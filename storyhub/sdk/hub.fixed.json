[
    {
        "configuration": {
            "actions": {
                "deleteUserProfile": {
                    "arguments": {
                        "guid": {
                            "help": "The guid of the user profile.",
                            "in": "requestBody",
                            "type": "string"
                        },
                        "identity": {
                            "help": "The identity of the user profile.",
                            "in": "requestBody",
                            "type": "string"
                        }
                    },
                    "help": "Delete user profile from CleverTap.\n",
                    "http": {
                        "contentType": "application/json",
                        "method": "post",
                        "path": "/deleteUserProfile",
                        "port": 8000
                    },
                    "output": {
                        "contentType": "application/json",
                        "properties": {
                            "success": {
                                "help": "Returns status with success or fail.",
                                "type": "string"
                            }
                        },
                        "type": "object"
                    }
                },
                "getEvent": {
                    "arguments": {
                        "event": {
                            "help": "The name of the event",
                            "in": "requestBody",
                            "required": true,
                            "type": "string"
                        },
                        "from": {
                            "help": "Start of date range for events needed. Value specified in format YYYYMMDD.",
                            "in": "requestBody",
                            "required": true,
                            "type": "int"
                        },
                        "to": {
                            "help": "End of date range for events needed. Value specified in format YYYYMMDD.",
                            "in": "requestBody",
                            "required": true,
                            "type": "int"
                        }
                    },
                    "help": "Get an event details from CleverTap.\n",
                    "http": {
                        "contentType": "application/json",
                        "method": "post",
                        "path": "/getEvent",
                        "port": 8000
                    },
                    "output": {
                        "contentType": "application/json",
                        "properties": {
                            "next_cursor": {
                                "help": "The next cursor ID.",
                                "type": "string"
                            },
                            "records": {
                                "help": "The list of all records related to event.",
                                "type": "list"
                            },
                            "status": {
                                "help": "Returns status with success.",
                                "type": "string"
                            }
                        },
                        "type": "object"
                    }
                },
                "getEventCount": {
                    "arguments": {
                        "event": {
                            "help": "The name of the event",
                            "in": "requestBody",
                            "required": true,
                            "type": "string"
                        },
                        "from": {
                            "help": "Start of date range for events needed. Value specified in format YYYYMMDD.",
                            "in": "requestBody",
                            "required": true,
                            "type": "int"
                        },
                        "properties": {
                            "help": "The properties of the event",
                            "in": "requestBody",
                            "required": true,
                            "type": "map"
                        },
                        "to": {
                            "help": "End of date range for events needed. Value specified in format YYYYMMDD.",
                            "in": "requestBody",
                            "required": true,
                            "type": "int"
                        }
                    },
                    "help": "Get an event count from CleverTap.\n",
                    "http": {
                        "contentType": "application/json",
                        "method": "post",
                        "path": "/getEventCount",
                        "port": 8000
                    },
                    "output": {
                        "contentType": "application/json",
                        "properties": {
                            "count": {
                                "help": "The count of event.",
                                "type": "string"
                            },
                            "status": {
                                "help": "Returns status with success.",
                                "type": "string"
                            }
                        },
                        "type": "object"
                    }
                },
                "getProfileCount": {
                    "arguments": {
                        "event": {
                            "help": "The name of the event",
                            "in": "requestBody",
                            "required": true,
                            "type": "string"
                        },
                        "from": {
                            "help": "Start of date range for events needed. Value specified in format YYYYMMDD.",
                            "in": "requestBody",
                            "required": true,
                            "type": "int"
                        },
                        "properties": {
                            "help": "The properties of the event",
                            "in": "requestBody",
                            "required": true,
                            "type": "map"
                        },
                        "to": {
                            "help": "End of date range for events needed. Value specified in format YYYYMMDD.",
                            "in": "requestBody",
                            "required": true,
                            "type": "int"
                        }
                    },
                    "help": "Get an profile count from CleverTap.\n",
                    "http": {
                        "contentType": "application/json",
                        "method": "post",
                        "path": "/getProfileCount",
                        "port": 8000
                    },
                    "output": {
                        "contentType": "application/json",
                        "properties": {
                            "count": {
                                "help": "The count of event.",
                                "type": "string"
                            },
                            "status": {
                                "help": "Returns status with success.",
                                "type": "string"
                            }
                        },
                        "type": "object"
                    }
                },
                "getUserProfile": {
                    "arguments": {
                        "event": {
                            "help": "The name of the event",
                            "in": "requestBody",
                            "required": true,
                            "type": "string"
                        },
                        "from": {
                            "help": "Start of date range for events needed. Value specified in format YYYYMMDD.",
                            "in": "requestBody",
                            "required": true,
                            "type": "int"
                        },
                        "to": {
                            "help": "End of date range for events needed. Value specified in format YYYYMMDD.",
                            "in": "requestBody",
                            "required": true,
                            "type": "int"
                        }
                    },
                    "help": "Get an user profile details from CleverTap.\n",
                    "http": {
                        "contentType": "application/json",
                        "method": "post",
                        "path": "/getUserProfile",
                        "port": 8000
                    },
                    "output": {
                        "contentType": "application/json",
                        "properties": {
                            "next_cursor": {
                                "help": "The next cursor ID.",
                                "type": "string"
                            },
                            "records": {
                                "help": "The list of all records related to event.",
                                "type": "list"
                            },
                            "status": {
                                "help": "Returns status with success.",
                                "type": "string"
                            }
                        },
                        "type": "object"
                    }
                },
                "push": {
                    "arguments": {
                        "event": {
                            "help": "The name of the event",
                            "in": "requestBody",
                            "type": "string"
                        },
                        "identity": {
                            "in": "requestBody",
                            "required": true,
                            "type": "string"
                        },
                        "profile": {
                            "in": "requestBody",
                            "type": "map"
                        },
                        "properties": {
                            "in": "requestBody",
                            "type": "map"
                        }
                    },
                    "help": "Push an event with properties or profile properties to CleverTap\n",
                    "http": {
                        "contentType": "application/json",
                        "method": "post",
                        "path": "/push",
                        "port": 8000
                    },
                    "output": {
                        "contentType": "application/json",
                        "properties": {
                            "processed": {
                                "help": "The number of records processed",
                                "type": "int"
                            },
                            "status": {
                                "help": "The status string from the CleverTap API",
                                "type": "string"
                            }
                        },
                        "type": "object"
                    }
                }
            },
            "environment": {
                "ACCOUNT_ID": {
                    "help": "Your CleverTap account ID",
                    "required": true,
                    "type": "string"
                },
                "ACCOUNT_PASSCODE": {
                    "help": "Your CleverTap account passcode",
                    "required": true,
                    "type": "string"
                }
            },
            "info": {
                "contact": {
                    "email": "core@openmicroservices.org",
                    "name": "Open Microservices",
                    "url": "https://openmicroservices.org"
                },
                "description": "This is a clevertap service",
                "title": "Clevertap",
                "version": "1.0.0"
            },
            "lifecycle": {
                "startup": {
                    "command": [
                        "python",
                        "/app/app.py"
                    ]
                }
            },
            "oms": 1
        },
        "readme": "# _CleverTap_ OMG Microservice\n\n[![Open Microservice Guide](https://img.shields.io/badge/OMG%20Enabled-\ud83d\udc4d-green.svg?)](https://microservice.guide)\n[![Build Status](https://travis-ci.com/omg-services/clevertap.svg?branch=master)](https://travis-ci.com/omg-services/clevertap)\n[![codecov](https://codecov.io/gh/omg-services/clevertap/branch/master/graph/badge.svg)](https://codecov.io/gh/omg-services/clevertap)\n\nAn OMG service to access the CleverTap event and profile APIs.\n\n## Direct usage in [Storyscript](https://storyscript.io/):\n\n##### Upload Event\n```coffee\nclevertap push event: \"Logged In\" identity: \"john\" properties: {\"Source\": \"Website\"}\n```\n##### Get Event\n```coffee\nclevertap getEvent event: \"Logged In\" from:20190715 to:20190716\n```\n##### Get Event Count\n```coffee\nclevertap getEventCount event: \"Logged In\" properties: {\"Source\": \"Website\"} from:20190715 to:20190716\n```\n##### Upload Profile\n```coffee \nclevertap push identity: \"Demo User\" profile: {\"Name\": \"Jack Montana\",\"Email\": \"jack@gmail.com\",\"Phone\": \"+14155551234\",\"Gender\": \"M\"}\n```\n##### Get User Profile\n```coffee\nclevertap getUserProfile event: \"Logged In\" from: 20181203 to: 20190716\n```\n##### Get Profile Count\n```coffee\nclevertap getProfileCount event: \"Logged In\" properties: {\"Source\": \"Website\"} from: 20181203 to: 20190716\n```\n##### Delete User Profile\n```coffee\nclevertap deleteUserProfile identity :\"Demo User\"\n```\n\nCurious to [learn more](https://docs.storyscript.io/)?\n\n\u2728\ud83c\udf70\u2728\n\n## Usage with [OMG CLI](https://www.npmjs.com/package/omg)\n\n##### Upload Event\n```shell\n$ omg run push -a event=<EVENT_NAME> -a identity=<EVENT_IDENTITY> -a properties=<PROPERTIES_IN_MAP_TYPE> -e ACCOUNT_ID=<ACCOUNT_ID> -e ACCOUNT_PASSCODE=<ACCOUNT_PASSCODE>\n```\n##### Get Event\n```shell\n$ omg run getEvent -a event=<EVENT_NAME> -a from=<FROM_DATE> -a to=<TO_DATE> -e ACCOUNT_ID=<ACCOUNT_ID> -e ACCOUNT_PASSCODE=<ACCOUNT_PASSCODE>\n```\n**Note**: FROM_DATE and TO_DATE should be in YYYYMMDD format.\n##### Get Event Count\n```shell\n$ omg run getEventCount -a event=<EVENT_NAME> -a properties=<PROPERTIES_IN_MAP_TYPE> -a from=<FROM_DATE> -a to=<TO_DATE> -e ACCOUNT_ID=<ACCOUNT_ID> -e ACCOUNT_PASSCODE=<ACCOUNT_PASSCODE>\n```\n\n##### Upload Profile\n```shell\n$ omg run push -a identity=<PROFILE_IDENTITY> -a profile=<PROFILE_IN_MAP_TYPE> -e ACCOUNT_ID=<ACCOUNT_ID> -e ACCOUNT_PASSCODE=<ACCOUNT_PASSCODE>\n```\n##### Get Profile\n```shell\n$ omg run getUserProfile -a event=<EVENT_NAME> -a from=<FROM_DATE> -a to=<TO_DATE> -e ACCOUNT_ID=<ACCOUNT_ID> -e ACCOUNT_PASSCODE=<ACCOUNT_PASSCODE>\n```\n##### Get Profile Count\n```shell\n$ omg run getProfileCount -a event=<EVENT_NAME> -a properties=<PROPERTIES_IN_MAP_TYPE> -a from=<FROM_DATE> -a to=<TO_DATE> -e ACCOUNT_ID=<ACCOUNT_ID> -e ACCOUNT_PASSCODE=<ACCOUNT_PASSCODE>\n```\n##### Delete User Profile\n```shell\n$ omg run deleteUserProfile -a identity=<PROFILE_IDENTITY> -e ACCOUNT_ID=<ACCOUNT_ID> -e ACCOUNT_PASSCODE=<ACCOUNT_PASSCODE>\n```\n\n**Note**: The OMG CLI requires [Docker](https://docs.docker.com/install/) to be installed.\n\n## License\n[MIT License](https://github.com/omg-services/clevertap/blob/master/LICENSE).\n",
        "service": {
            "alias": "clevertap",
            "description": "An OMG service to access the CleverTap APIs",
            "isCertified": true,
            "name": "clevertap",
            "owner": {
                "username": "oms-services"
            },
            "public": true,
            "topics": [
                "microservice",
                "clevertap",
                "analytics",
                "analytics-tracking",
                "analytics-platform",
                "open-microservice"
            ]
        },
        "serviceUuid": "8361ed14-24a2-4b8c-b4d1-0c919062c4f3",
        "state": "BETA"
    },
    {
        "configuration": {
            "actions": {
                "deleteUserProfile": {
                    "arguments": {
                        "guid": {
                            "help": "The guid of the user profile.",
                            "in": "requestBody",
                            "type": "string"
                        },
                        "identity": {
                            "help": "The identity of the user profile.",
                            "in": "requestBody",
                            "type": "string"
                        }
                    },
                    "help": "Delete user profile from CleverTap.\n",
                    "http": {
                        "contentType": "application/json",
                        "method": "post",
                        "path": "/deleteUserProfile",
                        "port": 8000
                    },
                    "output": {
                        "contentType": "application/json",
                        "properties": {
                            "success": {
                                "help": "Returns status with success or fail.",
                                "type": "string"
                            }
                        },
                        "type": "object"
                    }
                },
                "getEvent": {
                    "arguments": {
                        "event": {
                            "help": "The name of the event",
                            "in": "requestBody",
                            "required": true,
                            "type": "string"
                        },
                        "from": {
                            "help": "Start of date range for events needed. Value specified in format YYYYMMDD.",
                            "in": "requestBody",
                            "required": true,
                            "type": "int"
                        },
                        "to": {
                            "help": "End of date range for events needed. Value specified in format YYYYMMDD.",
                            "in": "requestBody",
                            "required": true,
                            "type": "int"
                        }
                    },
                    "help": "Get an event details from CleverTap.\n",
                    "http": {
                        "contentType": "application/json",
                        "method": "post",
                        "path": "/getEvent",
                        "port": 8000
                    },
                    "output": {
                        "contentType": "application/json",
                        "properties": {
                            "next_cursor": {
                                "help": "The next cursor ID.",
                                "type": "string"
                            },
                            "records": {
                                "help": "The list of all records related to event.",
                                "type": "list"
                            },
                            "status": {
                                "help": "Returns status with success.",
                                "type": "string"
                            }
                        },
                        "type": "object"
                    }
                },
                "getEventCount": {
                    "arguments": {
                        "event": {
                            "help": "The name of the event",
                            "in": "requestBody",
                            "required": true,
                            "type": "string"
                        },
                        "from": {
                            "help": "Start of date range for events needed. Value specified in format YYYYMMDD.",
                            "in": "requestBody",
                            "required": true,
                            "type": "int"
                        },
                        "properties": {
                            "help": "The properties of the event",
                            "in": "requestBody",
                            "required": true,
                            "type": "map"
                        },
                        "to": {
                            "help": "End of date range for events needed. Value specified in format YYYYMMDD.",
                            "in": "requestBody",
                            "required": true,
                            "type": "int"
                        }
                    },
                    "help": "Get an event count from CleverTap.\n",
                    "http": {
                        "contentType": "application/json",
                        "method": "post",
                        "path": "/getEventCount",
                        "port": 8000
                    },
                    "output": {
                        "contentType": "application/json",
                        "properties": {
                            "count": {
                                "help": "The count of event.",
                                "type": "string"
                            },
                            "status": {
                                "help": "Returns status with success.",
                                "type": "string"
                            }
                        },
                        "type": "object"
                    }
                },
                "getProfileCount": {
                    "arguments": {
                        "event": {
                            "help": "The name of the event",
                            "in": "requestBody",
                            "required": true,
                            "type": "string"
                        },
                        "from": {
                            "help": "Start of date range for events needed. Value specified in format YYYYMMDD.",
                            "in": "requestBody",
                            "required": true,
                            "type": "int"
                        },
                        "properties": {
                            "help": "The properties of the event",
                            "in": "requestBody",
                            "required": true,
                            "type": "map"
                        },
                        "to": {
                            "help": "End of date range for events needed. Value specified in format YYYYMMDD.",
                            "in": "requestBody",
                            "required": true,
                            "type": "int"
                        }
                    },
                    "help": "Get an profile count from CleverTap.\n",
                    "http": {
                        "contentType": "application/json",
                        "method": "post",
                        "path": "/getProfileCount",
                        "port": 8000
                    },
                    "output": {
                        "contentType": "application/json",
                        "properties": {
                            "count": {
                                "help": "The count of event.",
                                "type": "string"
                            },
                            "status": {
                                "help": "Returns status with success.",
                                "type": "string"
                            }
                        },
                        "type": "object"
                    }
                },
                "getUserProfile": {
                    "arguments": {
                        "event": {
                            "help": "The name of the event",
                            "in": "requestBody",
                            "required": true,
                            "type": "string"
                        },
                        "from": {
                            "help": "Start of date range for events needed. Value specified in format YYYYMMDD.",
                            "in": "requestBody",
                            "required": true,
                            "type": "int"
                        },
                        "to": {
                            "help": "End of date range for events needed. Value specified in format YYYYMMDD.",
                            "in": "requestBody",
                            "required": true,
                            "type": "int"
                        }
                    },
                    "help": "Get an user profile details from CleverTap.\n",
                    "http": {
                        "contentType": "application/json",
                        "method": "post",
                        "path": "/getUserProfile",
                        "port": 8000
                    },
                    "output": {
                        "contentType": "application/json",
                        "properties": {
                            "next_cursor": {
                                "help": "The next cursor ID.",
                                "type": "string"
                            },
                            "records": {
                                "help": "The list of all records related to event.",
                                "type": "list"
                            },
                            "status": {
                                "help": "Returns status with success.",
                                "type": "string"
                            }
                        },
                        "type": "object"
                    }
                },
                "push": {
                    "arguments": {
                        "event": {
                            "help": "The name of the event",
                            "in": "requestBody",
                            "type": "string"
                        },
                        "identity": {
                            "in": "requestBody",
                            "required": true,
                            "type": "string"
                        },
                        "profile": {
                            "in": "requestBody",
                            "type": "map"
                        },
                        "properties": {
                            "in": "requestBody",
                            "type": "map"
                        }
                    },
                    "help": "Push an event with properties or profile properties to CleverTap\n",
                    "http": {
                        "contentType": "application/json",
                        "method": "post",
                        "path": "/push",
                        "port": 8000
                    },
                    "output": {
                        "contentType": "application/json",
                        "properties": {
                            "processed": {
                                "help": "The number of records processed",
                                "type": "int"
                            },
                            "status": {
                                "help": "The status string from the CleverTap API",
                                "type": "string"
                            }
                        },
                        "type": "object"
                    }
                }
            },
            "environment": {
                "ACCOUNT_ID": {
                    "help": "Your CleverTap account ID",
                    "required": true,
                    "type": "string"
                },
                "ACCOUNT_PASSCODE": {
                    "help": "Your CleverTap account passcode",
                    "required": true,
                    "type": "string"
                }
            },
            "info": {
                "contact": {
                    "email": "core@openmicroservices.org",
                    "name": "Open Microservices",
                    "url": "https://openmicroservices.org"
                },
                "description": "This is a clevertap service",
                "title": "Clevertap",
                "version": "1.0.0"
            },
            "lifecycle": {
                "startup": {
                    "command": [
                        "python",
                        "/app/app.py"
                    ]
                }
            },
            "oms": 1
        },
        "readme": "# _CleverTap_ OMG Microservice\n\n[![Open Microservice Guide](https://img.shields.io/badge/OMG%20Enabled-\ud83d\udc4d-green.svg?)](https://microservice.guide)\n[![Build Status](https://travis-ci.com/omg-services/clevertap.svg?branch=master)](https://travis-ci.com/omg-services/clevertap)\n[![codecov](https://codecov.io/gh/omg-services/clevertap/branch/master/graph/badge.svg)](https://codecov.io/gh/omg-services/clevertap)\n\nAn OMG service to access the CleverTap event and profile APIs.\n\n## Direct usage in [Storyscript](https://storyscript.io/):\n\n##### Upload Event\n```coffee\nclevertap push event: \"Logged In\" identity: \"john\" properties: {\"Source\": \"Website\"}\n```\n##### Get Event\n```coffee\nclevertap getEvent event: \"Logged In\" from:20190715 to:20190716\n```\n##### Get Event Count\n```coffee\nclevertap getEventCount event: \"Logged In\" properties: {\"Source\": \"Website\"} from:20190715 to:20190716\n```\n##### Upload Profile\n```coffee \nclevertap push identity: \"Demo User\" profile: {\"Name\": \"Jack Montana\",\"Email\": \"jack@gmail.com\",\"Phone\": \"+14155551234\",\"Gender\": \"M\"}\n```\n##### Get User Profile\n```coffee\nclevertap getUserProfile event: \"Logged In\" from: 20181203 to: 20190716\n```\n##### Get Profile Count\n```coffee\nclevertap getProfileCount event: \"Logged In\" properties: {\"Source\": \"Website\"} from: 20181203 to: 20190716\n```\n##### Delete User Profile\n```coffee\nclevertap deleteUserProfile identity :\"Demo User\"\n```\n\nCurious to [learn more](https://docs.storyscript.io/)?\n\n\u2728\ud83c\udf70\u2728\n\n## Usage with [OMG CLI](https://www.npmjs.com/package/omg)\n\n##### Upload Event\n```shell\n$ omg run push -a event=<EVENT_NAME> -a identity=<EVENT_IDENTITY> -a properties=<PROPERTIES_IN_MAP_TYPE> -e ACCOUNT_ID=<ACCOUNT_ID> -e ACCOUNT_PASSCODE=<ACCOUNT_PASSCODE>\n```\n##### Get Event\n```shell\n$ omg run getEvent -a event=<EVENT_NAME> -a from=<FROM_DATE> -a to=<TO_DATE> -e ACCOUNT_ID=<ACCOUNT_ID> -e ACCOUNT_PASSCODE=<ACCOUNT_PASSCODE>\n```\n**Note**: FROM_DATE and TO_DATE should be in YYYYMMDD format.\n##### Get Event Count\n```shell\n$ omg run getEventCount -a event=<EVENT_NAME> -a properties=<PROPERTIES_IN_MAP_TYPE> -a from=<FROM_DATE> -a to=<TO_DATE> -e ACCOUNT_ID=<ACCOUNT_ID> -e ACCOUNT_PASSCODE=<ACCOUNT_PASSCODE>\n```\n\n##### Upload Profile\n```shell\n$ omg run push -a identity=<PROFILE_IDENTITY> -a profile=<PROFILE_IN_MAP_TYPE> -e ACCOUNT_ID=<ACCOUNT_ID> -e ACCOUNT_PASSCODE=<ACCOUNT_PASSCODE>\n```\n##### Get Profile\n```shell\n$ omg run getUserProfile -a event=<EVENT_NAME> -a from=<FROM_DATE> -a to=<TO_DATE> -e ACCOUNT_ID=<ACCOUNT_ID> -e ACCOUNT_PASSCODE=<ACCOUNT_PASSCODE>\n```\n##### Get Profile Count\n```shell\n$ omg run getProfileCount -a event=<EVENT_NAME> -a properties=<PROPERTIES_IN_MAP_TYPE> -a from=<FROM_DATE> -a to=<TO_DATE> -e ACCOUNT_ID=<ACCOUNT_ID> -e ACCOUNT_PASSCODE=<ACCOUNT_PASSCODE>\n```\n##### Delete User Profile\n```shell\n$ omg run deleteUserProfile -a identity=<PROFILE_IDENTITY> -e ACCOUNT_ID=<ACCOUNT_ID> -e ACCOUNT_PASSCODE=<ACCOUNT_PASSCODE>\n```\n\n**Note**: The OMG CLI requires [Docker](https://docs.docker.com/install/) to be installed.\n\n## License\n[MIT License](https://github.com/omg-services/clevertap/blob/master/LICENSE).\n",
        "service": {
            "alias": "clevertap",
            "description": "An OMG service to access the CleverTap APIs",
            "isCertified": true,
            "name": "clevertap",
            "owner": {
                "username": "oms-services"
            },
            "public": true,
            "topics": [
                "microservice",
                "clevertap",
                "analytics",
                "analytics-tracking",
                "analytics-platform",
                "open-microservice"
            ]
        },
        "serviceUuid": "8361ed14-24a2-4b8c-b4d1-0c919062c4f3",
        "state": "BETA"
    },
    {
        "configuration": {
            "actions": {
                "run": {
                    "arguments": {
                        "command": {
                            "help": "command to run",
                            "in": "requestBody",
                            "required": true,
                            "type": "string"
                        }
                    },
                    "help": "Runs a command in the service",
                    "http": {
                        "method": "post",
                        "path": "/run",
                        "port": 9000
                    },
                    "output": {
                        "contentType": "text/plain",
                        "type": "string"
                    }
                }
            },
            "info": {
                "description": "A service to run a command",
                "license": {
                    "name": "MIT",
                    "url": "https://opensource.org/licenses/MIT"
                },
                "title": "Command",
                "version": "0.0.1"
            },
            "lifecycle": {
                "startup": {
                    "command": [
                        "/command"
                    ]
                }
            },
            "omg": 1
        },
        "readme": "",
        "service": {
            "alias": null,
            "description": null,
            "isCertified": false,
            "name": "command",
            "owner": {
                "username": "williammartin"
            },
            "public": true,
            "topics": []
        },
        "serviceUuid": "351864c3-fb4e-4f2a-ba3e-fe7f35bea5bd",
        "state": "BETA"
    },
    {
        "configuration": {
            "actions": {
                "send": {
                    "arguments": {
                        "attachment_path": {
                            "in": "requestBody",
                            "type": "string"
                        },
                        "bcc": {
                            "in": "requestBody",
                            "type": "string"
                        },
                        "cc": {
                            "in": "requestBody",
                            "type": "string"
                        },
                        "from": {
                            "in": "requestBody",
                            "required": true,
                            "type": "string"
                        },
                        "html": {
                            "in": "requestBody",
                            "type": "string"
                        },
                        "inline_attatchment_path": {
                            "in": "requestBody",
                            "type": "string"
                        },
                        "subject": {
                            "in": "requestBody",
                            "required": true,
                            "type": "string"
                        },
                        "text": {
                            "in": "requestBody",
                            "required": true,
                            "type": "string"
                        },
                        "to": {
                            "in": "requestBody",
                            "required": true,
                            "type": "list"
                        }
                    },
                    "help": "Send an email",
                    "http": {
                        "contentType": "application/json",
                        "method": "post",
                        "path": "/send",
                        "port": 8000
                    },
                    "output": {
                        "type": "map"
                    }
                }
            },
            "environment": {
                "API_KEY": {
                    "type": "string"
                },
                "DOMAIN": {
                    "type": "string"
                }
            },
            "info": {
                "contact": {
                    "email": "core@openmicroservices.org",
                    "name": "Open Microservices",
                    "url": "https://openmicroservices.org"
                },
                "description": "Mailgun as a microservice",
                "license": {
                    "name": "MIT",
                    "url": "https://opensource.org/licenses/MIT"
                },
                "title": "Mailgun",
                "version": "1.0.0"
            },
            "lifecycle": {
                "startup": {
                    "command": [
                        "python",
                        "-u",
                        "/app/app.py"
                    ]
                }
            },
            "oms": 1
        },
        "readme": "# _Mailgun_ Open Microservice\n\n> Mailgun as a microservice\n\n[![Open Microservice Specification Version](https://img.shields.io/badge/Open%20Microservice-1.0-477bf3.svg)](https://openmicroservices.org)\n[![Open Microservices Spectrum Chat](https://withspectrum.github.io/badge/badge.svg)](https://spectrum.chat/open-microservices)\n[![Open Microservices Code of Conduct](https://img.shields.io/badge/Contributor%20Covenant-v1.4%20adopted-ff69b4.svg)](https://github.com/oms-services/.github/blob/master/CODE_OF_CONDUCT.md)\n[![Open Microservices Commitzen](https://img.shields.io/badge/commitizen-friendly-brightgreen.svg)](http://commitizen.github.io/cz-cli/)\n[![PRs Welcome](https://img.shields.io/badge/PRs-welcome-brightgreen.svg)](http://makeapullrequest.com)\n[![License: MIT](https://img.shields.io/badge/License-MIT-blue.svg)](https://opensource.org/licenses/MIT)\n\n## Introduction\n\nThis project is an example implementation of the [Open Microservice Specification](https://openmicroservices.org), a standard\noriginally created at [Storyscript](https://storyscript.io) for building highly-portable \"microservices\" that expose the\nevents, actions, and APIs inside containerized software.\n\n## Getting Started\n\nThe `oms` command-line interface allows you to interact with Open Microservices. If you're interested in creating an Open\nMicroservice the CLI also helps validate, test, and debug your `oms.yml` implementation!\n\nSee the [oms-cli](https://github.com/microservices/oms) project to learn more!\n\n### Installation\n\n```\nnpm install -g @microservices/oms\n```\n\n## Usage\n\n### Open Microservices CLI Usage\n\nOnce you have the [oms-cli](https://github.com/microservices/oms) installed, you can run any of the following commands from\nwithin this project's root directory:\n\n#### Actions\n\n##### send\n\n> Send an email\n\n##### Action Arguments\n\n| Argument Name           | Type     | Required | Default | Description              |\n| :---------------------- | :------- | :------- | :------ | :----------------------- |\n| to                      | `list`   | `true`   | None    | No description provided. |\n| from                    | `string` | `true`   | None    | No description provided. |\n| bcc                     | `string` | `false`  | None    | No description provided. |\n| cc                      | `string` | `false`  | None    | No description provided. |\n| subject                 | `string` | `true`   | None    | No description provided. |\n| text                    | `string` | `true`   | None    | No description provided. |\n| html                    | `string` | `false`  | None    | No description provided. |\n| attachment_path         | `string` | `false`  | None    | No description provided. |\n| inline_attatchment_path | `string` | `false`  | None    | No description provided. |\n| API_KEY                 | `string` | `false`  | None    | No description provided. |\n| DOMAIN                  | `string` | `false`  | None    | No description provided. |\n\n```shell\noms run send \\\n    -a to='*****' \\\n    -a from='*****' \\\n    -a bcc='*****' \\\n    -a cc='*****' \\\n    -a subject='*****' \\\n    -a text='*****' \\\n    -a html='*****' \\\n    -a attachment_path='*****' \\\n    -a inline_attatchment_path='*****' \\\n    -e API_KEY=$API_KEY \\\n    -e DOMAIN=$DOMAIN\n```\n\n## Contributing\n\nAll suggestions in how to improve the specification and this guide are very welcome. Feel free share your thoughts in the\nIssue tracker, or even better, fork the repository to implement your own ideas and submit a pull request.\n\n[![Edit mailgun on CodeSandbox](https://codesandbox.io/static/img/play-codesandbox.svg)](https://codesandbox.io/s/github/oms-services/mailgun)\n\nThis project is guided by [Contributor Covenant](https://github.com/oms-services/.github/blob/master/CODE_OF_CONDUCT.md).\nPlease read out full [Contribution Guidelines](https://github.com/oms-services/.github/blob/master/CONTRIBUTING.md).\n\n## Additional Resources\n\n- [Install the CLI](https://github.com/microservices/oms) - The OMS CLI helps developers create, test, validate, and build\n  microservices.\n- [Example OMS Services](https://github.com/oms-services) - Examples of OMS-compliant services written in a variety of\n  languages.\n- [Example Language Implementations](https://github.com/microservices) - Find tooling & language implementations in Node,\n  Python, Scala, Java, Clojure.\n- [Storyscript Hub](https://hub.storyscript.io) - A public registry of OMS services.\n- [Community Chat](https://spectrum.chat/open-microservices) - Have ideas? Questions? Join us on Spectrum.\n",
        "service": {
            "alias": "mailgun",
            "description": "Send emails with Mailgun as a microservice",
            "isCertified": false,
            "name": "mailgun",
            "owner": {
                "username": "oms-services"
            },
            "public": true,
            "topics": [
                "mailgun",
                "email-sender",
                "microservice",
                "open-microservice"
            ]
        },
        "serviceUuid": "9c63568f-ae03-46f3-a9c8-f782877595bc",
        "state": "BETA"
    },
    {
        "configuration": {
            "actions": {
                "send": {
                    "arguments": {
                        "attachment_path": {
                            "in": "requestBody",
                            "type": "string"
                        },
                        "bcc": {
                            "in": "requestBody",
                            "type": "string"
                        },
                        "cc": {
                            "in": "requestBody",
                            "type": "string"
                        },
                        "from": {
                            "in": "requestBody",
                            "required": true,
                            "type": "string"
                        },
                        "html": {
                            "in": "requestBody",
                            "type": "string"
                        },
                        "inline_attatchment_path": {
                            "in": "requestBody",
                            "type": "string"
                        },
                        "subject": {
                            "in": "requestBody",
                            "required": true,
                            "type": "string"
                        },
                        "text": {
                            "in": "requestBody",
                            "required": true,
                            "type": "string"
                        },
                        "to": {
                            "in": "requestBody",
                            "required": true,
                            "type": "list"
                        }
                    },
                    "help": "Send an email",
                    "http": {
                        "contentType": "application/json",
                        "method": "post",
                        "path": "/send",
                        "port": 8000
                    },
                    "output": {
                        "type": "map"
                    }
                }
            },
            "environment": {
                "API_KEY": {
                    "type": "string"
                },
                "DOMAIN": {
                    "type": "string"
                }
            },
            "info": {
                "contact": {
                    "email": "core@openmicroservices.org",
                    "name": "Open Microservices",
                    "url": "https://openmicroservices.org"
                },
                "description": "Mailgun as a microservice",
                "license": {
                    "name": "MIT",
                    "url": "https://opensource.org/licenses/MIT"
                },
                "title": "Mailgun",
                "version": "1.0.0"
            },
            "lifecycle": {
                "startup": {
                    "command": [
                        "python",
                        "-u",
                        "/app/app.py"
                    ]
                }
            },
            "oms": 1
        },
        "readme": "# _Mailgun_ Open Microservice\n\n> Mailgun as a microservice\n\n[![Open Microservice Specification Version](https://img.shields.io/badge/Open%20Microservice-1.0-477bf3.svg)](https://openmicroservices.org)\n[![Open Microservices Spectrum Chat](https://withspectrum.github.io/badge/badge.svg)](https://spectrum.chat/open-microservices)\n[![Open Microservices Code of Conduct](https://img.shields.io/badge/Contributor%20Covenant-v1.4%20adopted-ff69b4.svg)](https://github.com/oms-services/.github/blob/master/CODE_OF_CONDUCT.md)\n[![Open Microservices Commitzen](https://img.shields.io/badge/commitizen-friendly-brightgreen.svg)](http://commitizen.github.io/cz-cli/)\n[![PRs Welcome](https://img.shields.io/badge/PRs-welcome-brightgreen.svg)](http://makeapullrequest.com)\n[![License: MIT](https://img.shields.io/badge/License-MIT-blue.svg)](https://opensource.org/licenses/MIT)\n\n## Introduction\n\nThis project is an example implementation of the [Open Microservice Specification](https://openmicroservices.org), a standard\noriginally created at [Storyscript](https://storyscript.io) for building highly-portable \"microservices\" that expose the\nevents, actions, and APIs inside containerized software.\n\n## Getting Started\n\nThe `oms` command-line interface allows you to interact with Open Microservices. If you're interested in creating an Open\nMicroservice the CLI also helps validate, test, and debug your `oms.yml` implementation!\n\nSee the [oms-cli](https://github.com/microservices/oms) project to learn more!\n\n### Installation\n\n```\nnpm install -g @microservices/oms\n```\n\n## Usage\n\n### Open Microservices CLI Usage\n\nOnce you have the [oms-cli](https://github.com/microservices/oms) installed, you can run any of the following commands from\nwithin this project's root directory:\n\n#### Actions\n\n##### send\n\n> Send an email\n\n##### Action Arguments\n\n| Argument Name           | Type     | Required | Default | Description              |\n| :---------------------- | :------- | :------- | :------ | :----------------------- |\n| to                      | `list`   | `true`   | None    | No description provided. |\n| from                    | `string` | `true`   | None    | No description provided. |\n| bcc                     | `string` | `false`  | None    | No description provided. |\n| cc                      | `string` | `false`  | None    | No description provided. |\n| subject                 | `string` | `true`   | None    | No description provided. |\n| text                    | `string` | `true`   | None    | No description provided. |\n| html                    | `string` | `false`  | None    | No description provided. |\n| attachment_path         | `string` | `false`  | None    | No description provided. |\n| inline_attatchment_path | `string` | `false`  | None    | No description provided. |\n| API_KEY                 | `string` | `false`  | None    | No description provided. |\n| DOMAIN                  | `string` | `false`  | None    | No description provided. |\n\n```shell\noms run send \\\n    -a to='*****' \\\n    -a from='*****' \\\n    -a bcc='*****' \\\n    -a cc='*****' \\\n    -a subject='*****' \\\n    -a text='*****' \\\n    -a html='*****' \\\n    -a attachment_path='*****' \\\n    -a inline_attatchment_path='*****' \\\n    -e API_KEY=$API_KEY \\\n    -e DOMAIN=$DOMAIN\n```\n\n## Contributing\n\nAll suggestions in how to improve the specification and this guide are very welcome. Feel free share your thoughts in the\nIssue tracker, or even better, fork the repository to implement your own ideas and submit a pull request.\n\n[![Edit mailgun on CodeSandbox](https://codesandbox.io/static/img/play-codesandbox.svg)](https://codesandbox.io/s/github/oms-services/mailgun)\n\nThis project is guided by [Contributor Covenant](https://github.com/oms-services/.github/blob/master/CODE_OF_CONDUCT.md).\nPlease read out full [Contribution Guidelines](https://github.com/oms-services/.github/blob/master/CONTRIBUTING.md).\n\n## Additional Resources\n\n- [Install the CLI](https://github.com/microservices/oms) - The OMS CLI helps developers create, test, validate, and build\n  microservices.\n- [Example OMS Services](https://github.com/oms-services) - Examples of OMS-compliant services written in a variety of\n  languages.\n- [Example Language Implementations](https://github.com/microservices) - Find tooling & language implementations in Node,\n  Python, Scala, Java, Clojure.\n- [Storyscript Hub](https://hub.storyscript.io) - A public registry of OMS services.\n- [Community Chat](https://spectrum.chat/open-microservices) - Have ideas? Questions? Join us on Spectrum.\n",
        "service": {
            "alias": "mailgun",
            "description": "Send emails with Mailgun as a microservice",
            "isCertified": false,
            "name": "mailgun",
            "owner": {
                "username": "oms-services"
            },
            "public": true,
            "topics": [
                "mailgun",
                "email-sender",
                "microservice",
                "open-microservice"
            ]
        },
        "serviceUuid": "9c63568f-ae03-46f3-a9c8-f782877595bc",
        "state": "BETA"
    },
    {
        "configuration": {
            "actions": {
                "fetch": {
                    "arguments": {
                        "ticker": {
                            "help": "Stock ticker symbol",
                            "in": "query",
                            "required": true,
                            "type": "string"
                        }
                    },
                    "help": "Fetches the latest trade price for a stock ticker",
                    "http": {
                        "method": "get",
                        "path": "/fetch",
                        "port": 9000
                    },
                    "output": {
                        "type": "float"
                    }
                }
            },
            "info": {
                "description": "An http service to fetch stock prices",
                "license": {
                    "name": "MIT",
                    "url": "https://opensource.org/licenses/MIT"
                },
                "title": "Stockbroker",
                "version": "0.0.1"
            },
            "lifecycle": {
                "startup": {
                    "command": [
                        "/stockbroker"
                    ]
                }
            },
            "omg": 1
        },
        "readme": "## Stockbroker\n\nHttp server to fetch stock quotes.\n",
        "service": {
            "alias": null,
            "description": null,
            "isCertified": false,
            "name": "stockbroker",
            "owner": {
                "username": "williammartin"
            },
            "public": true,
            "topics": []
        },
        "serviceUuid": "083889c0-3cca-4974-a1c2-a049cccf8f21",
        "state": "BETA"
    },
    {
        "configuration": {
            "actions": {
                "launches": {
                    "arguments": {
                        "launch": {
                            "help": "past, upcomming, latest or next for now. Will support fligth number later",
                            "in": "query",
                            "required": true,
                            "type": "string"
                        }
                    },
                    "help": "Gets launches information",
                    "http": {
                        "method": "get",
                        "path": "/launches",
                        "port": 5000
                    },
                    "output": {
                        "type": "string"
                    }
                },
                "roadster": {
                    "help": "Gets Elon's roadster information",
                    "http": {
                        "method": "get",
                        "path": "/roadster",
                        "port": 5000
                    },
                    "output": {
                        "type": "string"
                    }
                }
            },
            "info": {
                "description": "SpaceX API as a microservice",
                "license": {
                    "name": "Apache 2.0",
                    "url": "https://opensource.org/licenses/Apache-2.0"
                },
                "title": "SpaceX API as a microservice",
                "version": "1.0.0"
            },
            "lifecycle": {
                "startup": {
                    "command": [
                        "node",
                        "app.js"
                    ]
                }
            },
            "omg": 1
        },
        "readme": "# SpaceX\n\nhttps://docs.spacexdata.com/#intro\n",
        "service": {
            "alias": null,
            "description": "SpaceX as a microservice",
            "isCertified": false,
            "name": "spacex",
            "owner": {
                "username": "jean"
            },
            "public": true,
            "topics": [
                "spacex",
                "hello",
                "world"
            ]
        },
        "serviceUuid": "b602e350-3878-4299-b27a-870078de21ee",
        "state": "BETA"
    },
    {
        "configuration": {
            "actions": {
                "debug": {
                    "arguments": {
                        "msg": {
                            "in": "requestBody",
                            "required": true,
                            "type": "string"
                        }
                    },
                    "help": "Log a message with the DEBUG level",
                    "http": {
                        "method": "post",
                        "path": "/ignore",
                        "port": 8000
                    },
                    "output": {
                        "type": "none"
                    }
                },
                "error": {
                    "arguments": {
                        "msg": {
                            "in": "requestBody",
                            "required": true,
                            "type": "string"
                        }
                    },
                    "help": "Log a message with the ERROR level",
                    "http": {
                        "method": "post",
                        "path": "/ignore",
                        "port": 8000
                    },
                    "output": {
                        "type": "none"
                    }
                },
                "info": {
                    "arguments": {
                        "msg": {
                            "in": "requestBody",
                            "required": true,
                            "type": "string"
                        }
                    },
                    "help": "Log a message with the INFO level",
                    "http": {
                        "method": "post",
                        "path": "/ignore",
                        "port": 8000
                    },
                    "output": {
                        "type": "none"
                    }
                },
                "warn": {
                    "arguments": {
                        "msg": {
                            "in": "requestBody",
                            "required": true,
                            "type": "string"
                        }
                    },
                    "help": "Log a message with the WARN level",
                    "http": {
                        "method": "post",
                        "path": "/ignore",
                        "port": 8000
                    },
                    "output": {
                        "type": "none"
                    }
                }
            },
            "info": {
                "contact": {
                    "email": "infra@storyscript.io",
                    "name": "Storyscript",
                    "url": "https://storyscript.io"
                },
                "description": "This is the microservice.yml which corresponds to the native implementation of the log service",
                "license": {
                    "name": "MIT",
                    "url": "https://opensource.org/licenses/MIT"
                },
                "title": "Simple logger for Storyscript Cloud",
                "version": "1.0.1"
            },
            "omg": 1
        },
        "readme": "# log\nThe microservice yaml for `log` -- An internal Asyncy service\n\n## Usage\n```coffee\nlog debug msg:\"This is a debug message\"\nlog info msg:\"This is an info message\"\nlog warn msg:\"This is a warn message\"\nlog error msg:\"This is an error message\"\n```\n",
        "service": {
            "alias": "log",
            "description": "The microservice yaml for `log` -- An internal Asyncy service",
            "isCertified": true,
            "name": "log",
            "owner": {
                "username": "storyscript"
            },
            "public": true,
            "topics": [
                "logging",
                "logger"
            ]
        },
        "serviceUuid": "12a33ef9-e4bc-403e-ac94-dcb15a9b5d3b",
        "state": "BETA"
    },
    {
        "configuration": {
            "actions": {
                "debug": {
                    "arguments": {
                        "msg": {
                            "in": "requestBody",
                            "required": true,
                            "type": "string"
                        }
                    },
                    "help": "Log a message with the DEBUG level",
                    "http": {
                        "method": "post",
                        "path": "/ignore",
                        "port": 8000
                    },
                    "output": {
                        "type": "none"
                    }
                },
                "error": {
                    "arguments": {
                        "msg": {
                            "in": "requestBody",
                            "required": true,
                            "type": "string"
                        }
                    },
                    "help": "Log a message with the ERROR level",
                    "http": {
                        "method": "post",
                        "path": "/ignore",
                        "port": 8000
                    },
                    "output": {
                        "type": "none"
                    }
                },
                "info": {
                    "arguments": {
                        "msg": {
                            "in": "requestBody",
                            "required": true,
                            "type": "string"
                        }
                    },
                    "help": "Log a message with the INFO level",
                    "http": {
                        "method": "post",
                        "path": "/ignore",
                        "port": 8000
                    },
                    "output": {
                        "type": "none"
                    }
                },
                "warn": {
                    "arguments": {
                        "msg": {
                            "in": "requestBody",
                            "required": true,
                            "type": "string"
                        }
                    },
                    "help": "Log a message with the WARN level",
                    "http": {
                        "method": "post",
                        "path": "/ignore",
                        "port": 8000
                    },
                    "output": {
                        "type": "none"
                    }
                }
            },
            "info": {
                "contact": {
                    "email": "infra@storyscript.io",
                    "name": "Storyscript",
                    "url": "https://storyscript.io"
                },
                "description": "This is the microservice.yml which corresponds to the native implementation of the log service",
                "license": {
                    "name": "MIT",
                    "url": "https://opensource.org/licenses/MIT"
                },
                "title": "Simple logger for Storyscript Cloud",
                "version": "1.0.1"
            },
            "omg": 1
        },
        "readme": "# log\nThe microservice yaml for `log` -- An internal Asyncy service\n\n## Usage\n```coffee\nlog debug msg:\"This is a debug message\"\nlog info msg:\"This is an info message\"\nlog warn msg:\"This is a warn message\"\nlog error msg:\"This is an error message\"\n```\n",
        "service": {
            "alias": "log",
            "description": "The microservice yaml for `log` -- An internal Asyncy service",
            "isCertified": true,
            "name": "log",
            "owner": {
                "username": "storyscript"
            },
            "public": true,
            "topics": [
                "logging",
                "logger"
            ]
        },
        "serviceUuid": "12a33ef9-e4bc-403e-ac94-dcb15a9b5d3b",
        "state": "BETA"
    },
    {
        "configuration": {
            "actions": {
                "analyze": {
                    "arguments": {
                        "input": {
                            "in": "requestBody",
                            "type": "string"
                        }
                    },
                    "http": {
                        "contentType": "application/json",
                        "method": "post",
                        "path": "/analyse",
                        "port": 8000
                    }
                }
            },
            "lifecycle": {
                "startup": {
                    "command": [
                        "python",
                        "/app/app.py"
                    ]
                }
            },
            "omg": 1
        },
        "readme": "# machinebox_textbox\n\n\n",
        "service": {
            "alias": "machinebox_textbox",
            "description": null,
            "isCertified": false,
            "name": "machinebox_textbox",
            "owner": {
                "username": "oms-services"
            },
            "public": true,
            "topics": []
        },
        "serviceUuid": "f3c55897-f1f5-4260-b9d1-7df373c4d5c4",
        "state": "BETA"
    },
    {
        "configuration": {
            "actions": {
                "analyze": {
                    "arguments": {
                        "input": {
                            "in": "requestBody",
                            "type": "string"
                        }
                    },
                    "http": {
                        "contentType": "application/json",
                        "method": "post",
                        "path": "/analyse",
                        "port": 8000
                    }
                }
            },
            "lifecycle": {
                "startup": {
                    "command": [
                        "python",
                        "/app/app.py"
                    ]
                }
            },
            "omg": 1
        },
        "readme": "# machinebox_textbox\n\n\n",
        "service": {
            "alias": "machinebox_textbox",
            "description": null,
            "isCertified": false,
            "name": "machinebox_textbox",
            "owner": {
                "username": "oms-services"
            },
            "public": true,
            "topics": []
        },
        "serviceUuid": "f3c55897-f1f5-4260-b9d1-7df373c4d5c4",
        "state": "BETA"
    },
    {
        "configuration": {
            "actions": {
                "add": {
                    "arguments": {
                        "data": {
                            "in": "requestBody",
                            "required": true,
                            "type": "any"
                        }
                    },
                    "http": {
                        "method": "post",
                        "path": "/add",
                        "port": 5555
                    },
                    "output": {
                        "type": "any"
                    }
                },
                "cat": {
                    "arguments": {
                        "path": {
                            "in": "requestBody",
                            "required": true,
                            "type": "string"
                        }
                    },
                    "http": {
                        "method": "post",
                        "path": "/cat",
                        "port": 5555
                    },
                    "output": {
                        "type": "any"
                    }
                }
            },
            "health": {
                "http": {
                    "path": "/health",
                    "port": 5555
                }
            },
            "info": {
                "description": "A basic OMG service implemented using js-ipfs",
                "license": {
                    "name": "Apache 2.0",
                    "url": "https://opensource.org/licenses/Apache-2.0"
                },
                "title": "Micro IPFS",
                "version": "0.0.1"
            },
            "lifecycle": {
                "startup": {
                    "command": [
                        "node",
                        "/app/src/index.js"
                    ]
                }
            },
            "omg": 1
        },
        "readme": "# A Basic IPFS Microservice\n\n![Microservice](https://img.shields.io/badge/microservice-ready-brightgreen.svg?style=for-the-badge)\n[![Build status](https://img.shields.io/travis/com/microservices/node/master.svg?style=for-the-badge)](https://travis-ci.com/microservices/node)\n\nA basic OMG service implemented using js-ipfs.\n\nStoryscript Usage\n-----\n\n```coffee\n\ndata = TonyRice/ipfs cat path: 'QmSB457KugLfZpUeb4X5E3jB4fevxzAqN8H1HrmVFALfAw'\n\nipld = data = TonyRice/ipfs add data: 'hello world'\n\n```\n\nTest\n----\n\n```sh\n> omg run cat -a path=QmSB457KugLfZpUeb4X5E3jB4fevxzAqN8H1HrmVFALfAw\n\u2139 Building Docker image\n\u2026\n\u2714 Built Docker image with name: omg/l2hvbwuvc2vil2fzew5jes9ydwj5\n\u2714 Started Docker container: 1c8a91688261\n\u2714 Health check passed\n\u2714 Ran action: `cat` with output: Copyright 2019 Microservices\n                                 \nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n                                 \n    http://www.apache.org/licenses/LICENSE-2.0\n                                 \nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n\u2714 Stopped Docker container: 1c8a91688261\n```\n",
        "service": {
            "alias": null,
            "description": "A basic OMG service implemented using js-ipfs",
            "isCertified": false,
            "name": "ipfs",
            "owner": {
                "username": "TonyRice"
            },
            "public": true,
            "topics": [
                "ipfs",
                "file",
                "data",
                "p2p"
            ]
        },
        "serviceUuid": "221bfd21-8dd0-47d1-a5fe-a00621a84949",
        "state": "BETA"
    },
    {
        "configuration": {
            "actions": {
                "fetch": {
                    "arguments": {
                        "ticker": {
                            "help": "Stock ticker symbol",
                            "required": true,
                            "type": "string"
                        }
                    },
                    "format": {
                        "command": [
                            "/boyohboy"
                        ]
                    },
                    "help": "Fetches the latest trade price for a stock ticker",
                    "output": {
                        "type": "float"
                    }
                }
            },
            "info": {
                "description": "A service to fetch stock prices",
                "license": {
                    "name": "MIT",
                    "url": "https://opensource.org/licenses/MIT"
                },
                "title": "Boy Oh Boy",
                "version": "0.0.1"
            },
            "lifecycle": {
                "startup": {
                    "command": [
                        "/boyohboy",
                        "lifecycle"
                    ]
                }
            },
            "omg": 1
        },
        "readme": "# Boy Oh Boy Stock Quote Fetcher\n\nA simple microservice conforming to the [Open Microservice Specification](https://microservice.guide/) (OMS) that fetches the most recent trade price (in dollars) for a provided ticker symbol e.g. GOOG, MSFT, PVTL\n\n## Building and Running\n\nThere are two ways to build this, directly as a binary via:\n\n```\ngo build\n./boyohboy fetch \"{ \\\"ticker\\\": \\\"PVTL\\\" }\"\n```\n\nor via Docker:\n\n```\ndocker build -t boyohboy:latest .\ndocker run boyohboy /boyohboy fetch \"{ \\\"ticker\\\": \\\"PVTL\\\" }\"\n```\n\n## Running the tests\n\nThe integration test suite is written using [Ginkgo](https://onsi.github.io/ginkgo/). If you have ginkgo installed, they can be run via:\n\n```\nginkgo -r\n```\n\nAlternatively, with fewer features, using `go test`:\n\n```\ngo test ./...\n```\n",
        "service": {
            "alias": null,
            "description": null,
            "isCertified": false,
            "name": "boyohboy",
            "owner": {
                "username": "williammartin"
            },
            "public": true,
            "topics": []
        },
        "serviceUuid": "1c29ae75-3672-4c43-b23d-5cd36456bb5a",
        "state": "BETA"
    },
    {
        "configuration": {
            "actions": {
                "entriesList": {
                    "arguments": {
                        "filter": {
                            "in": "requestBody",
                            "type": "string"
                        },
                        "orderBy": {
                            "in": "requestBody",
                            "type": "string"
                        },
                        "pageSize": {
                            "in": "requestBody",
                            "type": "int"
                        },
                        "pageToken": {
                            "in": "requestBody",
                            "type": "string"
                        },
                        "projects": {
                            "in": "requestBody",
                            "type": "list"
                        }
                    },
                    "help": "List log entries",
                    "http": {
                        "contentType": "application/json",
                        "method": "post",
                        "path": "/entries/list",
                        "port": 8000
                    },
                    "output": {
                        "contentType": "application/json",
                        "type": "list"
                    }
                }
            },
            "environment": {
                "GOOGLE_CREDENTIALS_JSON": {
                    "help": "The JSON contents of your credentials.json file",
                    "required": true,
                    "type": "string"
                }
            },
            "info": {
                "contact": {
                    "email": "core@openmicroservices.org",
                    "name": "Open Microservices",
                    "url": "https://openmicroservices.org"
                },
                "description": "Monitoring and management for services, containers, applications, and infrastructure.",
                "title": "Stackdriver",
                "version": "1.0.0"
            },
            "lifecycle": {
                "startup": {
                    "command": [
                        "python",
                        "/app/app.py"
                    ]
                }
            },
            "oms": 1
        },
        "readme": "# _Stackdriver_ Open Microservice\n\n> Monitoring and management for services, containers, applications, and infrastructure.\n\n[![Open Microservice Specification Version](https://img.shields.io/badge/Open%20Microservice-1.0-477bf3.svg)](https://openmicroservices.org) [![Open Microservices Spectrum Chat](https://withspectrum.github.io/badge/badge.svg)](https://spectrum.chat/open-microservices) [![Open Microservices Code of Conduct](https://img.shields.io/badge/Contributor%20Covenant-v1.4%20adopted-ff69b4.svg)](https://github.com/oms-services/.github/blob/master/CODE_OF_CONDUCT.md) [![Open Microservices Commitzen](https://img.shields.io/badge/commitizen-friendly-brightgreen.svg)](http://commitizen.github.io/cz-cli/) [![PRs Welcome](https://img.shields.io/badge/PRs-welcome-brightgreen.svg)](http://makeapullrequest.com)\n\n## Introduction\n\nThis project is an example implementation of the [Open Microservice Specification](https://openmicroservices.org), a standard originally created at [Storyscript](https://storyscript.io) for building highly-portable \"microservices\" that expose the events, actions, and APIs inside containerized software.\n\n## Getting Started\n\nThe `oms` command-line interface allows you to interact with Open Microservices. If you're interested in creating an Open Microservice the CLI also helps validate, test, and debug your `oms.yml` implementation!\n\nSee the [oms-cli](https://github.com/microservices/oms) project to learn more!\n\n### Installation\n\n```\nnpm install -g @microservices/oms\n```\n\n## Usage\n\n### Open Microservices CLI Usage\n\nOnce you have the [oms-cli](https://github.com/microservices/oms) installed, you can run any of the following commands from within this project's root directory:\n\n#### Actions\n\n##### entriesList\n\n> List log entries\n##### Action Arguments\n\n| Argument Name | Type | Required | Default | Description |\n|:------------- |:---- |:-------- |:--------|:----------- |\n| projects | `list` | `false` | None | No description provided. |\n| filter | `string` | `false` | None | No description provided. |\n| orderBy | `string` | `false` | None | No description provided. |\n| pageSize | `int` | `false` | None | No description provided. |\n| pageToken | `string` | `false` | None | No description provided. |\n| GOOGLE_CREDENTIALS_JSON | `string` | `true` | None | The JSON contents of your credentials.json file |\n\n``` shell\noms run entriesList \\ \n    -a projects='*****' \\ \n    -a filter='*****' \\ \n    -a orderBy='*****' \\ \n    -a pageSize='*****' \\ \n    -a pageToken='*****' \\ \n    -e GOOGLE_CREDENTIALS_JSON=$GOOGLE_CREDENTIALS_JSON\n```\n\n## Contributing\n\nAll suggestions in how to improve the specification and this guide are very welcome. Feel free share your thoughts in the Issue tracker, or even better, fork the repository to implement your own ideas and submit a pull request.\n\n[![Edit stackdriver on CodeSandbox](https://codesandbox.io/static/img/play-codesandbox.svg)](https://codesandbox.io/s/github/oms-services/stackdriver)\n\nThis project is guided by [Contributor Covenant](https://github.com/oms-services/.github/blob/master/CODE_OF_CONDUCT.md). Please read out full [Contribution Guidelines](https://github.com/oms-services/.github/blob/master/CONTRIBUTING.md).\n\n## Additional Resources\n\n* [Install the CLI](https://github.com/microservices/oms) - The OMS CLI helps developers create, test, validate, and build microservices.\n* [Example OMS Services](https://github.com/oms-services) - Examples of OMS-compliant services written in a variety of languages.\n* [Example Language Implementations](https://github.com/microservices) - Find tooling & language implementations in Node, Python, Scala, Java, Clojure.\n* [Storyscript Hub](https://hub.storyscript.io) - A public registry of OMS services.\n* [Community Chat](https://spectrum.chat/open-microservices) - Have ideas? Questions? Join us on Spectrum.\n",
        "service": {
            "alias": "stackdriver",
            "description": "An OMG service to access the Google Cloud Logging APIs (Stackdriver Logging)",
            "isCertified": true,
            "name": "stackdriver",
            "owner": {
                "username": "oms-services"
            },
            "public": true,
            "topics": [
                "microservice",
                "logging",
                "stackdriver",
                "stackdriver-logs",
                "oms",
                "open-microservice"
            ]
        },
        "serviceUuid": "cfaf5705-b791-44fa-a0eb-852518a72b04",
        "state": "BETA"
    },
    {
        "configuration": {
            "actions": {
                "entriesList": {
                    "arguments": {
                        "filter": {
                            "in": "requestBody",
                            "type": "string"
                        },
                        "orderBy": {
                            "in": "requestBody",
                            "type": "string"
                        },
                        "pageSize": {
                            "in": "requestBody",
                            "type": "int"
                        },
                        "pageToken": {
                            "in": "requestBody",
                            "type": "string"
                        },
                        "projects": {
                            "in": "requestBody",
                            "type": "list"
                        }
                    },
                    "help": "List log entries",
                    "http": {
                        "contentType": "application/json",
                        "method": "post",
                        "path": "/entries/list",
                        "port": 8000
                    },
                    "output": {
                        "contentType": "application/json",
                        "type": "list"
                    }
                }
            },
            "environment": {
                "GOOGLE_CREDENTIALS_JSON": {
                    "help": "The JSON contents of your credentials.json file",
                    "required": true,
                    "type": "string"
                }
            },
            "info": {
                "contact": {
                    "email": "core@openmicroservices.org",
                    "name": "Open Microservices",
                    "url": "https://openmicroservices.org"
                },
                "description": "Monitoring and management for services, containers, applications, and infrastructure.",
                "title": "Stackdriver",
                "version": "1.0.0"
            },
            "lifecycle": {
                "startup": {
                    "command": [
                        "python",
                        "/app/app.py"
                    ]
                }
            },
            "oms": 1
        },
        "readme": "# _Stackdriver_ Open Microservice\n\n> Monitoring and management for services, containers, applications, and infrastructure.\n\n[![Open Microservice Specification Version](https://img.shields.io/badge/Open%20Microservice-1.0-477bf3.svg)](https://openmicroservices.org) [![Open Microservices Spectrum Chat](https://withspectrum.github.io/badge/badge.svg)](https://spectrum.chat/open-microservices) [![Open Microservices Code of Conduct](https://img.shields.io/badge/Contributor%20Covenant-v1.4%20adopted-ff69b4.svg)](https://github.com/oms-services/.github/blob/master/CODE_OF_CONDUCT.md) [![Open Microservices Commitzen](https://img.shields.io/badge/commitizen-friendly-brightgreen.svg)](http://commitizen.github.io/cz-cli/) [![PRs Welcome](https://img.shields.io/badge/PRs-welcome-brightgreen.svg)](http://makeapullrequest.com)\n\n## Introduction\n\nThis project is an example implementation of the [Open Microservice Specification](https://openmicroservices.org), a standard originally created at [Storyscript](https://storyscript.io) for building highly-portable \"microservices\" that expose the events, actions, and APIs inside containerized software.\n\n## Getting Started\n\nThe `oms` command-line interface allows you to interact with Open Microservices. If you're interested in creating an Open Microservice the CLI also helps validate, test, and debug your `oms.yml` implementation!\n\nSee the [oms-cli](https://github.com/microservices/oms) project to learn more!\n\n### Installation\n\n```\nnpm install -g @microservices/oms\n```\n\n## Usage\n\n### Open Microservices CLI Usage\n\nOnce you have the [oms-cli](https://github.com/microservices/oms) installed, you can run any of the following commands from within this project's root directory:\n\n#### Actions\n\n##### entriesList\n\n> List log entries\n##### Action Arguments\n\n| Argument Name | Type | Required | Default | Description |\n|:------------- |:---- |:-------- |:--------|:----------- |\n| projects | `list` | `false` | None | No description provided. |\n| filter | `string` | `false` | None | No description provided. |\n| orderBy | `string` | `false` | None | No description provided. |\n| pageSize | `int` | `false` | None | No description provided. |\n| pageToken | `string` | `false` | None | No description provided. |\n| GOOGLE_CREDENTIALS_JSON | `string` | `true` | None | The JSON contents of your credentials.json file |\n\n``` shell\noms run entriesList \\ \n    -a projects='*****' \\ \n    -a filter='*****' \\ \n    -a orderBy='*****' \\ \n    -a pageSize='*****' \\ \n    -a pageToken='*****' \\ \n    -e GOOGLE_CREDENTIALS_JSON=$GOOGLE_CREDENTIALS_JSON\n```\n\n## Contributing\n\nAll suggestions in how to improve the specification and this guide are very welcome. Feel free share your thoughts in the Issue tracker, or even better, fork the repository to implement your own ideas and submit a pull request.\n\n[![Edit stackdriver on CodeSandbox](https://codesandbox.io/static/img/play-codesandbox.svg)](https://codesandbox.io/s/github/oms-services/stackdriver)\n\nThis project is guided by [Contributor Covenant](https://github.com/oms-services/.github/blob/master/CODE_OF_CONDUCT.md). Please read out full [Contribution Guidelines](https://github.com/oms-services/.github/blob/master/CONTRIBUTING.md).\n\n## Additional Resources\n\n* [Install the CLI](https://github.com/microservices/oms) - The OMS CLI helps developers create, test, validate, and build microservices.\n* [Example OMS Services](https://github.com/oms-services) - Examples of OMS-compliant services written in a variety of languages.\n* [Example Language Implementations](https://github.com/microservices) - Find tooling & language implementations in Node, Python, Scala, Java, Clojure.\n* [Storyscript Hub](https://hub.storyscript.io) - A public registry of OMS services.\n* [Community Chat](https://spectrum.chat/open-microservices) - Have ideas? Questions? Join us on Spectrum.\n",
        "service": {
            "alias": "stackdriver",
            "description": "An OMG service to access the Google Cloud Logging APIs (Stackdriver Logging)",
            "isCertified": true,
            "name": "stackdriver",
            "owner": {
                "username": "oms-services"
            },
            "public": true,
            "topics": [
                "microservice",
                "logging",
                "stackdriver",
                "stackdriver-logs",
                "oms",
                "open-microservice"
            ]
        },
        "serviceUuid": "cfaf5705-b791-44fa-a0eb-852518a72b04",
        "state": "BETA"
    },
    {
        "configuration": {
            "actions": {
                "event": {
                    "events": {
                        "triggered": {
                            "arguments": {
                                "name": {
                                    "help": "Name of the to be scheduled event names to select.\nIf not provided, all scheduled event will be listened for.\n",
                                    "in": "requestBody",
                                    "required": false,
                                    "type": "string"
                                }
                            },
                            "help": "Subscribe to scheduled events",
                            "http": {
                                "port": 8080,
                                "subscribe": {
                                    "contentType": "application/json",
                                    "method": "post",
                                    "path": "/subscribe"
                                }
                            },
                            "output": {
                                "contentType": "application/json",
                                "properties": {
                                    "data": {
                                        "type": "any"
                                    },
                                    "name": {
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    },
                    "help": "Schedule events"
                },
                "schedule": {
                    "arguments": {
                        "data": {
                            "help": "Additional event data",
                            "in": "requestBody",
                            "required": false,
                            "type": "any"
                        },
                        "delay": {
                            "help": "Event delay in seconds",
                            "in": "requestBody",
                            "required": true,
                            "type": "int"
                        },
                        "name": {
                            "help": "Name of the to be scheduled event",
                            "in": "requestBody",
                            "required": true,
                            "type": "string"
                        }
                    },
                    "help": "Schedule events",
                    "http": {
                        "method": "post",
                        "path": "/schedule",
                        "port": 8080
                    },
                    "output": {
                        "type": "none"
                    }
                }
            },
            "health": {
                "http": {
                    "path": "/health",
                    "port": 8080
                }
            },
            "info": {
                "contact": {
                    "email": "core@openmicroservices.org",
                    "name": "Open Microservices",
                    "url": "https://openmicroservices.org"
                },
                "description": "Allows to schedule future events",
                "license": {
                    "name": "Apache 2.0",
                    "url": "https://opensource.org/licenses/Apache-2.0"
                },
                "title": "Event scheduler",
                "version": "1.0.0"
            },
            "lifecycle": {
                "startup": {
                    "command": [
                        "node",
                        "/app/src/index.js"
                    ]
                }
            },
            "oms": 1
        },
        "readme": "# Scheduling service\n\n![Microservice](https://img.shields.io/badge/microservice-ready-brightgreen.svg?style=for-the-badge)\n[![Build status](https://img.shields.io/travis/com/oms-services/scheduler/master.svg?style=for-the-badge)](https://travis-ci.com/oms-services/scheduler)\n\nAn OMS event schedule service.\nIt allows to schedule future events and subscribe to them.\n\nScheduled events will be waited for a defined `delay` (aka `timeout`).\n\nUsage\n-----\n\n```coffee\n# Storyscript\nscheduler event name: 'expire' delay: 1000 data: {\"your\": \"data\"}\n\nwhen scheduler event triggered name: 'expire' as event\n  log info msg: \"${event}\"\n```\n\nTest\n----\n\n```sh\n$ oms run event -a name=expire -a delay=1000 -data='{\"your\":\"data\"}'\n```\n\n```sh\n$ oms subscribe --debug event triggered -a name=expire\n```\n",
        "service": {
            "alias": "scheduler",
            "description": "OMS event scheduler",
            "isCertified": false,
            "name": "scheduler",
            "owner": {
                "username": "wilzbach"
            },
            "public": true,
            "topics": [
                "schedule",
                "event",
                "timer"
            ]
        },
        "serviceUuid": "d68786d6-4041-4f11-bc86-c96e18c405df",
        "state": "BETA"
    },
    {
        "configuration": {
            "actions": {
                "event": {
                    "events": {
                        "triggered": {
                            "arguments": {
                                "name": {
                                    "help": "Name of the to be scheduled event names to select.\nIf not provided, all scheduled event will be listened for.\n",
                                    "in": "requestBody",
                                    "required": false,
                                    "type": "string"
                                }
                            },
                            "help": "Subscribe to scheduled events",
                            "http": {
                                "port": 8080,
                                "subscribe": {
                                    "contentType": "application/json",
                                    "method": "post",
                                    "path": "/subscribe"
                                }
                            },
                            "output": {
                                "contentType": "application/json",
                                "properties": {
                                    "data": {
                                        "type": "any"
                                    },
                                    "name": {
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    },
                    "help": "Schedule events"
                },
                "schedule": {
                    "arguments": {
                        "data": {
                            "help": "Additional event data",
                            "in": "requestBody",
                            "required": false,
                            "type": "any"
                        },
                        "delay": {
                            "help": "Event delay in seconds",
                            "in": "requestBody",
                            "required": true,
                            "type": "int"
                        },
                        "name": {
                            "help": "Name of the to be scheduled event",
                            "in": "requestBody",
                            "required": true,
                            "type": "string"
                        }
                    },
                    "help": "Schedule events",
                    "http": {
                        "method": "post",
                        "path": "/schedule",
                        "port": 8080
                    },
                    "output": {
                        "type": "none"
                    }
                }
            },
            "health": {
                "http": {
                    "path": "/health",
                    "port": 8080
                }
            },
            "info": {
                "contact": {
                    "email": "core@openmicroservices.org",
                    "name": "Open Microservices",
                    "url": "https://openmicroservices.org"
                },
                "description": "Allows to schedule future events",
                "license": {
                    "name": "Apache 2.0",
                    "url": "https://opensource.org/licenses/Apache-2.0"
                },
                "title": "Event scheduler",
                "version": "1.0.0"
            },
            "lifecycle": {
                "startup": {
                    "command": [
                        "node",
                        "/app/src/index.js"
                    ]
                }
            },
            "oms": 1
        },
        "readme": "# Scheduling service\n\n![Microservice](https://img.shields.io/badge/microservice-ready-brightgreen.svg?style=for-the-badge)\n[![Build status](https://img.shields.io/travis/com/oms-services/scheduler/master.svg?style=for-the-badge)](https://travis-ci.com/oms-services/scheduler)\n\nAn OMS event schedule service.\nIt allows to schedule future events and subscribe to them.\n\nScheduled events will be waited for a defined `delay` (aka `timeout`).\n\nUsage\n-----\n\n```coffee\n# Storyscript\nscheduler event name: 'expire' delay: 1000 data: {\"your\": \"data\"}\n\nwhen scheduler event triggered name: 'expire' as event\n  log info msg: \"${event}\"\n```\n\nTest\n----\n\n```sh\n$ oms run event -a name=expire -a delay=1000 -data='{\"your\":\"data\"}'\n```\n\n```sh\n$ oms subscribe --debug event triggered -a name=expire\n```\n",
        "service": {
            "alias": "scheduler",
            "description": "OMS event scheduler",
            "isCertified": false,
            "name": "scheduler",
            "owner": {
                "username": "wilzbach"
            },
            "public": true,
            "topics": [
                "schedule",
                "event",
                "timer"
            ]
        },
        "serviceUuid": "d68786d6-4041-4f11-bc86-c96e18c405df",
        "state": "BETA"
    },
    {
        "configuration": {
            "actions": {
                "send": {
                    "arguments": {
                        "from": {
                            "in": "requestBody",
                            "required": true,
                            "type": "string"
                        },
                        "subject": {
                            "in": "requestBody",
                            "required": true,
                            "type": "string"
                        },
                        "text": {
                            "in": "requestBody",
                            "required": true,
                            "type": "string"
                        },
                        "to": {
                            "in": "requestBody",
                            "required": true,
                            "type": "string"
                        }
                    },
                    "help": "Send an email",
                    "http": {
                        "contentType": "application/json",
                        "method": "post",
                        "path": "/send",
                        "port": 5000
                    },
                    "output": {
                        "properties": {
                            "body": {
                                "properties": {
                                    "id": {
                                        "type": "string"
                                    },
                                    "message": {
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            },
                            "error": {
                                "type": "any"
                            }
                        },
                        "type": "object"
                    }
                }
            },
            "environment": {
                "API_KEY": {
                    "type": "string"
                },
                "DOMAIN": {
                    "type": "string"
                }
            },
            "health": {
                "http": {
                    "path": "/health",
                    "port": 5000
                }
            },
            "info": {
                "description": "Send an email using the mailgun API",
                "title": "mailgun",
                "version": "1.0.0"
            },
            "lifecycle": {
                "startup": {
                    "command": [
                        "node",
                        "index.js"
                    ]
                }
            },
            "oms": 1
        },
        "readme": null,
        "service": {
            "alias": null,
            "description": "mailgun as a service",
            "isCertified": false,
            "name": "mailgun-that-just-works",
            "owner": {
                "username": "jean"
            },
            "public": true,
            "topics": [
                "oms",
                "mailgun",
                "email"
            ]
        },
        "serviceUuid": "94d46920-b979-4f90-ac49-986a90cd3072",
        "state": "BETA"
    },
    {
        "configuration": {
            "actions": {
                "addSheet": {
                    "arguments": {
                        "sheetTitle": {
                            "help": "The title for new sheet.",
                            "in": "requestBody",
                            "required": true,
                            "type": "string"
                        },
                        "spreadsheetId": {
                            "help": "The ID of spreadsheet.",
                            "in": "requestBody",
                            "required": true,
                            "type": "string"
                        }
                    },
                    "help": "Add new sheet in spreadsheet.",
                    "http": {
                        "contentType": "application/json",
                        "method": "post",
                        "path": "/addSheet",
                        "port": 3000
                    },
                    "output": {
                        "contentType": "application/json",
                        "type": "map"
                    }
                },
                "createSpreadsheet": {
                    "arguments": {
                        "emailAddress": {
                            "help": "The gmail email address of the user or group to which this drive permission refers (used to view sheet from email address drive account).",
                            "in": "requestBody",
                            "required": true,
                            "type": "string"
                        },
                        "role": {
                            "help": "The role granted by this permission, the roles currently allowed - writer ( recommended ), organizer , fileOrganizer, commenter , reader.",
                            "in": "requestBody",
                            "required": true,
                            "type": "string"
                        },
                        "title": {
                            "help": "Title for new spreadsheet.",
                            "in": "requestBody",
                            "required": true,
                            "type": "string"
                        },
                        "type": {
                            "help": "The type of the grantee. the types currently allowed - user ( recommended ), group, domain, anyone.",
                            "in": "requestBody",
                            "required": true,
                            "type": "string"
                        }
                    },
                    "help": "Create new google spreadsheet.",
                    "http": {
                        "contentType": "application/json",
                        "method": "post",
                        "path": "/createSpreadsheet",
                        "port": 3000
                    },
                    "output": {
                        "contentType": "application/json",
                        "type": "map"
                    }
                },
                "deleteSheet": {
                    "arguments": {
                        "sheetId": {
                            "help": "The ID of sheet to delete (To delete first sheet use ID 0).",
                            "in": "requestBody",
                            "required": true,
                            "type": "int"
                        },
                        "spreadsheetId": {
                            "help": "The ID of spreadsheet.",
                            "in": "requestBody",
                            "required": true,
                            "type": "string"
                        }
                    },
                    "help": "Delete sheet.",
                    "http": {
                        "contentType": "application/json",
                        "method": "post",
                        "path": "/deleteSheet",
                        "port": 3000
                    },
                    "output": {
                        "contentType": "application/json",
                        "type": "map"
                    }
                },
                "findSheet": {
                    "arguments": {
                        "sheetTitle": {
                            "help": "The title of sheet.",
                            "in": "requestBody",
                            "required": true,
                            "type": "string"
                        },
                        "spreadsheetId": {
                            "help": "The ID of spreadsheet.",
                            "in": "requestBody",
                            "required": true,
                            "type": "string"
                        }
                    },
                    "help": "Get sheet by sheet title.",
                    "http": {
                        "contentType": "application/json",
                        "method": "post",
                        "path": "/findSheet",
                        "port": 3000
                    },
                    "output": {
                        "contentType": "application/json",
                        "type": "map"
                    }
                },
                "findSpreadsheet": {
                    "arguments": {
                        "spreadsheetId": {
                            "help": "The ID of spreadsheet.",
                            "in": "requestBody",
                            "required": true,
                            "type": "string"
                        }
                    },
                    "help": "Get spreadsheet by ID.",
                    "http": {
                        "contentType": "application/json",
                        "method": "post",
                        "path": "/findSpreadsheet",
                        "port": 3000
                    },
                    "output": {
                        "contentType": "application/json",
                        "type": "map"
                    }
                },
                "listener": {
                    "events": {
                        "newRowUpdate": {
                            "arguments": {
                                "sheetTitle": {
                                    "help": "The title of sheet to subscribe.",
                                    "in": "requestBody",
                                    "required": true,
                                    "type": "string"
                                },
                                "spreadsheetID": {
                                    "help": "The spreadsheet ID to subscribe.",
                                    "in": "requestBody",
                                    "required": true,
                                    "type": "string"
                                }
                            },
                            "help": "Triggered any new row is added.",
                            "http": {
                                "port": 3000,
                                "subscribe": {
                                    "method": "post",
                                    "path": "/subscribe"
                                }
                            },
                            "output": {
                                "contentType": "application/json",
                                "type": "map"
                            }
                        }
                    },
                    "help": "Listening to provided sheet ID and sheet title for new row updated."
                },
                "updateCell": {
                    "arguments": {
                        "cellNumber": {
                            "help": "The cell number eg - A1.",
                            "in": "requestBody",
                            "required": true,
                            "type": "string"
                        },
                        "content": {
                            "help": "The content to update on cell of sheet.",
                            "in": "requestBody",
                            "required": true,
                            "type": "string"
                        },
                        "sheetTitle": {
                            "help": "The title of sheet.",
                            "in": "requestBody",
                            "required": true,
                            "type": "string"
                        },
                        "spreadsheetId": {
                            "help": "The ID of spreadsheet.",
                            "in": "requestBody",
                            "required": true,
                            "type": "string"
                        }
                    },
                    "help": "Update sheet content.",
                    "http": {
                        "contentType": "application/json",
                        "method": "post",
                        "path": "/updateCell",
                        "port": 3000
                    },
                    "output": {
                        "contentType": "application/json",
                        "type": "map"
                    }
                },
                "updateSheetSize": {
                    "arguments": {
                        "column": {
                            "help": "Length of columns to add in sheet.",
                            "in": "requestBody",
                            "required": true,
                            "type": "int"
                        },
                        "row": {
                            "help": "Length of rows to add in sheet.",
                            "in": "requestBody",
                            "required": true,
                            "type": "int"
                        },
                        "sheetId": {
                            "help": "The ID of sheet.",
                            "in": "requestBody",
                            "required": true,
                            "type": "int"
                        },
                        "spreadsheetId": {
                            "help": "The ID of spreadsheet.",
                            "in": "requestBody",
                            "required": true,
                            "type": "string"
                        }
                    },
                    "help": "Update sheets row and column.",
                    "http": {
                        "contentType": "application/json",
                        "method": "post",
                        "path": "/updateSheetSize",
                        "port": 3000
                    },
                    "output": {
                        "contentType": "application/json",
                        "type": "map"
                    }
                }
            },
            "environment": {
                "CREDENTIAL_JSON": {
                    "help": "Base64 data of credential.json' file.",
                    "required": true,
                    "type": "string"
                }
            },
            "health": {
                "http": {
                    "path": "/health",
                    "port": 3000
                }
            },
            "info": {
                "contact": {
                    "email": "rohits@heaptrace.com",
                    "name": "Rohit Shetty",
                    "url": "https://github.com/ht68rohit"
                },
                "description": "This is a google-sheets service.",
                "license": {
                    "name": "MIT",
                    "url": "https://opensource.org/licenses/MIT"
                },
                "title": "Google Spreadsheet.",
                "version": "1.0.0"
            },
            "lifecycle": {
                "startup": {
                    "command": [
                        "google-sheets"
                    ]
                }
            },
            "omg": 1
        },
        "readme": "# _Google Sheets_ OMG Microservice\n\n[![Open Microservice Guide](https://img.shields.io/badge/OMG%20Enabled-\ud83d\udc4d-green.svg?)](https://microservice.guide)\n[![Build Status](https://travis-ci.com/omg-services/google-sheets.svg?branch=master)](https://travis-ci.com/omg-services/google-sheets)\n[![codecov](https://codecov.io/gh/omg-services/google-sheets/branch/master/graph/badge.svg)](https://codecov.io/gh/omg-services/google-sheets)\n\nAn OMG service for Google Sheets, it is for organization, analysis and storage of data in tabular form. Spreadsheets developed as computerized analogs of paper accounting worksheets.\n\n## Direct usage in [Storyscript](https://storyscript.io/):\n\n##### Create Spreadsheet\n```coffee\ngoogle-sheets createSpreadsheet title:'Spreadsheet title' emailAddress:'email address for drive permission' role:'role of access' type:'type of access'\n```\n##### Find Spreadsheet\n```coffee\ngoogle-sheets findSpreadsheet spreadsheetId:'Spreadsheet Id'\n```\n##### Add Sheet\n```coffee\ngoogle-sheets addSheet spreadsheetId:'Spreadsheet Id' sheetTitle:'Sheet title'\n```\n##### Find Sheet\n```coffee\ngoogle-sheets findSheet spreadsheetId:'Spreadsheet Id' sheetTitle:'Sheet title'\n```\n##### Update Sheet Size\n```coffee\ngoogle-sheets updateSheetSize spreadsheetId:'Spreadsheet Id' sheetId:'Sheet Id' row:1 column:2\n```\n##### Update Cell\n```coffee\ngoogle-sheets updateCell spreadsheetId:'Spreadsheet Id' sheetTitle:'Sheet title' cellNumber:'A1' content:'any content'\n```\n##### Delete Sheet\n```coffee\ngoogle-sheets deleteSheet spreadsheetId:'Spreadsheet Id' sheetId:'sheet Id'\n```\n##### Subscribe Sheet\n```coffee\ngoogle-sheets listener newRowUpdate spreadsheetID:'Spreadsheet Id' sheetTitle:'sheet title'\n```\n\nCurious to [learn more](https://docs.storyscript.io/)?\n\n\u2728\ud83c\udf70\u2728\n\n## Usage with [OMG CLI](https://www.npmjs.com/package/omg)\n\n##### Create Spreadsheet\n```shell\n$ omg run createSpreadsheet -a title=<SPREADSHEET_TITLE> -a emailAddress=<EMAIL_ADDRESS> -a role=<ROLE_OF_ACCESS> -a type=<TYPE_OF_ACCESS> -e CREDENTIAL_JSON=<BASE64_DATA_OF_CREDENTIAL_JSON_FILE>\n```\n##### Find Spreadsheet\n```shell\n$ omg run findSpreadsheet -a spreadsheetId=<SPREADSHEET_ID> -e CREDENTIAL_JSON=<BASE64_DATA_OF_CREDENTIAL_JSON_FILE>\n```\n##### Add Sheet\n```shell\n$ omg run addSheet -a spreadsheetId=<SPREADSHEET_ID> -a sheetTitle=<SHEET_TITLE> -e CREDENTIAL_JSON=<BASE64_DATA_OF_CREDENTIAL_JSON_FILE>\n```\n##### Find Sheet\n```shell\n$ omg run findSheet -a spreadsheetId=<SPREADSHEET_ID> -a sheetTitle=<SHEET_TITLE> -e CREDENTIAL_JSON=<BASE64_DATA_OF_CREDENTIAL_JSON_FILE>\n```\n##### Update Sheet Size\n```shell\n$ omg run updateSheetSize -a spreadsheetId=<SPREADSHEET_ID> -a sheetId=<SHEET_ID> -a row=<ROW_LENGTH> -a column=<COLUMN_LENGTH> -e CREDENTIAL_JSON=<BASE64_DATA_OF_CREDENTIAL_JSON_FILE>\n```\n##### Update Cell\n```shell\n$ omg run updateCell -a spreadsheetId=<SPREADSHEET_ID> -a sheetTitle=<SHEET_TITLE> -a cellNumber=<CELL_NUMBER> -a content=<CELL_CONTENT> -e CREDENTIAL_JSON=<BASE64_DATA_OF_CREDENTIAL_JSON_FILE>\n```\n##### Delete Sheet\n```shell\n$ omg run deleteSheet -a spreadsheetId=<SPREADSHEET_ID> -a sheetId=<SHEET_ID> -e CREDENTIAL_JSON=<BASE64_DATA_OF_CREDENTIAL_JSON_FILE>\n```\n##### Subscribe Sheet\n```shell\nomg subscribe listener newRowUpdate -a spreadsheetID=<SPREADSHEET_ID> -a sheetTitle=<SHEET_TITLE> -e CREDENTIAL_JSON=<BASE64_DATA_OF_CREDENTIAL_JSON_FILE>\n```\n\n**Note**: the OMG CLI requires [Docker](https://docs.docker.com/install/) to be installed.\n\n## License\n[MIT License](https://github.com/heaptracetechnology/google-sheets/blob/master/LICENSE).\n",
        "service": {
            "alias": null,
            "description": "Google Sheet as a microservice",
            "isCertified": false,
            "name": "google-sheets",
            "owner": {
                "username": "ht68rohit"
            },
            "public": true,
            "topics": [
                "google-sheets",
                "google-sheets-api-v4"
            ]
        },
        "serviceUuid": "f4b632e8-0f40-40f2-bb7f-b96174aa5b10",
        "state": "BETA"
    },
    {
        "configuration": {
            "actions": {
                "sms": {
                    "arguments": {
                        "body": {
                            "in": "requestBody",
                            "required": true,
                            "type": "string"
                        },
                        "from": {
                            "in": "requestBody",
                            "required": true,
                            "type": "string"
                        },
                        "to": {
                            "in": "requestBody",
                            "required": true,
                            "type": "string"
                        }
                    },
                    "http": {
                        "method": "post",
                        "path": "/sms",
                        "port": 8000
                    },
                    "output": {
                        "contentType": "application/json",
                        "properties": {
                            "error_code": {
                                "type": "any"
                            },
                            "error_message": {
                                "type": "string"
                            },
                            "messaging_service_sid": {
                                "type": "string"
                            },
                            "price": {
                                "type": "float"
                            },
                            "price_unit": {
                                "type": "float"
                            },
                            "sid": {
                                "type": "string"
                            },
                            "status": {
                                "type": "string"
                            },
                            "uri": {
                                "type": "string"
                            }
                        },
                        "type": "object"
                    }
                }
            },
            "environment": {
                "ACCOUNT_SID": {
                    "help": "Create a Twilio account at https://twilio.com\n",
                    "required": true,
                    "type": "string"
                },
                "AUTH_TOKEN": {
                    "help": "Create a Twilio account at https://twilio.com\n",
                    "required": true,
                    "type": "string"
                }
            },
            "info": {
                "contact": {
                    "email": "core@openmicroservices.org",
                    "name": "Open Microservices",
                    "url": "https://openmicroservices.org"
                },
                "description": "This is a twilio service",
                "title": "Twilio",
                "version": "1.0.0"
            },
            "lifecycle": {
                "startup": {
                    "command": [
                        "python",
                        "/app/app.py"
                    ]
                }
            },
            "oms": 1
        },
        "readme": "# _Twilio_ Open Microservice\n\n> This is a twilio service\n\n[![Open Microservice Specification Version](https://img.shields.io/badge/Open%20Microservice-1.0-477bf3.svg)](https://openmicroservices.org) [![Open Microservices Spectrum Chat](https://withspectrum.github.io/badge/badge.svg)](https://spectrum.chat/open-microservices) [![Open Microservices Code of Conduct](https://img.shields.io/badge/Contributor%20Covenant-v1.4%20adopted-ff69b4.svg)](https://github.com/oms-services/.github/blob/master/CODE_OF_CONDUCT.md) [![Open Microservices Commitzen](https://img.shields.io/badge/commitizen-friendly-brightgreen.svg)](http://commitizen.github.io/cz-cli/) [![PRs Welcome](https://img.shields.io/badge/PRs-welcome-brightgreen.svg)](http://makeapullrequest.com)\n\n## Introduction\n\nThis project is an example implementation of the [Open Microservice Specification](https://openmicroservices.org), a standard originally created at [Storyscript](https://storyscript.io) for building highly-portable \"microservices\" that expose the events, actions, and APIs inside containerized software.\n\n## Getting Started\n\nThe `oms` command-line interface allows you to interact with Open Microservices. If you're interested in creating an Open Microservice the CLI also helps validate, test, and debug your `oms.yml` implementation!\n\nSee the [oms-cli](https://github.com/microservices/oms) project to learn more!\n\n### Installation\n\n```\nnpm install -g @microservices/oms\n```\n\n## Usage\n\n### Open Microservices CLI Usage\n\nOnce you have the [oms-cli](https://github.com/microservices/oms) installed, you can run any of the following commands from within this project's root directory:\n\n#### Actions\n\n##### sms\n\n> \n##### Action Arguments\n\n| Argument Name | Type | Required | Default | Description |\n|:------------- |:---- |:-------- |:--------|:----------- |\n| to | `string` | `true` | None | No description provided. |\n| from | `string` | `true` | None | No description provided. |\n| body | `string` | `true` | None | No description provided. |\n| ACCOUNT_SID | `string` | `true` | None | Create a Twilio account at https://twilio.com  |\n| AUTH_TOKEN | `string` | `true` | None | Create a Twilio account at https://twilio.com  |\n\n``` shell\noms run sms \\ \n    -a to='*****' \\ \n    -a from='*****' \\ \n    -a body='*****' \\ \n    -e ACCOUNT_SID=$ACCOUNT_SID \\ \n    -e AUTH_TOKEN=$AUTH_TOKEN\n```\n\n## Contributing\n\nAll suggestions in how to improve the specification and this guide are very welcome. Feel free share your thoughts in the Issue tracker, or even better, fork the repository to implement your own ideas and submit a pull request.\n\n[![Edit twilio on CodeSandbox](https://codesandbox.io/static/img/play-codesandbox.svg)](https://codesandbox.io/s/github/oms-services/twilio)\n\nThis project is guided by [Contributor Covenant](https://github.com/oms-services/.github/blob/master/CODE_OF_CONDUCT.md). Please read out full [Contribution Guidelines](https://github.com/oms-services/.github/blob/master/CONTRIBUTING.md).\n\n## Additional Resources\n\n* [Install the CLI](https://github.com/microservices/oms) - The OMS CLI helps developers create, test, validate, and build microservices.\n* [Example OMS Services](https://github.com/oms-services) - Examples of OMS-compliant services written in a variety of languages.\n* [Example Language Implementations](https://github.com/microservices) - Find tooling & language implementations in Node, Python, Scala, Java, Clojure.\n* [Storyscript Hub](https://hub.storyscript.io) - A public registry of OMS services.\n* [Community Chat](https://spectrum.chat/open-microservices) - Have ideas? Questions? Join us on Spectrum.\n",
        "service": {
            "alias": "twilio",
            "description": "Twilio as a microservice",
            "isCertified": true,
            "name": "twilio",
            "owner": {
                "username": "oms-services"
            },
            "public": true,
            "topics": [
                "twilio",
                "sms",
                "phone",
                "microservice",
                "open-microservice"
            ]
        },
        "serviceUuid": "5d96ff34-9b5e-4523-8c69-7be0dd3d5373",
        "state": "BETA"
    },
    {
        "configuration": {
            "actions": {
                "sms": {
                    "arguments": {
                        "body": {
                            "in": "requestBody",
                            "required": true,
                            "type": "string"
                        },
                        "from": {
                            "in": "requestBody",
                            "required": true,
                            "type": "string"
                        },
                        "to": {
                            "in": "requestBody",
                            "required": true,
                            "type": "string"
                        }
                    },
                    "http": {
                        "method": "post",
                        "path": "/sms",
                        "port": 8000
                    },
                    "output": {
                        "contentType": "application/json",
                        "properties": {
                            "error_code": {
                                "type": "any"
                            },
                            "error_message": {
                                "type": "string"
                            },
                            "messaging_service_sid": {
                                "type": "string"
                            },
                            "price": {
                                "type": "float"
                            },
                            "price_unit": {
                                "type": "float"
                            },
                            "sid": {
                                "type": "string"
                            },
                            "status": {
                                "type": "string"
                            },
                            "uri": {
                                "type": "string"
                            }
                        },
                        "type": "object"
                    }
                }
            },
            "environment": {
                "ACCOUNT_SID": {
                    "help": "Create a Twilio account at https://twilio.com\n",
                    "required": true,
                    "type": "string"
                },
                "AUTH_TOKEN": {
                    "help": "Create a Twilio account at https://twilio.com\n",
                    "required": true,
                    "type": "string"
                }
            },
            "info": {
                "contact": {
                    "email": "core@openmicroservices.org",
                    "name": "Open Microservices",
                    "url": "https://openmicroservices.org"
                },
                "description": "This is a twilio service",
                "title": "Twilio",
                "version": "1.0.0"
            },
            "lifecycle": {
                "startup": {
                    "command": [
                        "python",
                        "/app/app.py"
                    ]
                }
            },
            "oms": 1
        },
        "readme": "# _Twilio_ Open Microservice\n\n> This is a twilio service\n\n[![Open Microservice Specification Version](https://img.shields.io/badge/Open%20Microservice-1.0-477bf3.svg)](https://openmicroservices.org) [![Open Microservices Spectrum Chat](https://withspectrum.github.io/badge/badge.svg)](https://spectrum.chat/open-microservices) [![Open Microservices Code of Conduct](https://img.shields.io/badge/Contributor%20Covenant-v1.4%20adopted-ff69b4.svg)](https://github.com/oms-services/.github/blob/master/CODE_OF_CONDUCT.md) [![Open Microservices Commitzen](https://img.shields.io/badge/commitizen-friendly-brightgreen.svg)](http://commitizen.github.io/cz-cli/) [![PRs Welcome](https://img.shields.io/badge/PRs-welcome-brightgreen.svg)](http://makeapullrequest.com)\n\n## Introduction\n\nThis project is an example implementation of the [Open Microservice Specification](https://openmicroservices.org), a standard originally created at [Storyscript](https://storyscript.io) for building highly-portable \"microservices\" that expose the events, actions, and APIs inside containerized software.\n\n## Getting Started\n\nThe `oms` command-line interface allows you to interact with Open Microservices. If you're interested in creating an Open Microservice the CLI also helps validate, test, and debug your `oms.yml` implementation!\n\nSee the [oms-cli](https://github.com/microservices/oms) project to learn more!\n\n### Installation\n\n```\nnpm install -g @microservices/oms\n```\n\n## Usage\n\n### Open Microservices CLI Usage\n\nOnce you have the [oms-cli](https://github.com/microservices/oms) installed, you can run any of the following commands from within this project's root directory:\n\n#### Actions\n\n##### sms\n\n> \n##### Action Arguments\n\n| Argument Name | Type | Required | Default | Description |\n|:------------- |:---- |:-------- |:--------|:----------- |\n| to | `string` | `true` | None | No description provided. |\n| from | `string` | `true` | None | No description provided. |\n| body | `string` | `true` | None | No description provided. |\n| ACCOUNT_SID | `string` | `true` | None | Create a Twilio account at https://twilio.com  |\n| AUTH_TOKEN | `string` | `true` | None | Create a Twilio account at https://twilio.com  |\n\n``` shell\noms run sms \\ \n    -a to='*****' \\ \n    -a from='*****' \\ \n    -a body='*****' \\ \n    -e ACCOUNT_SID=$ACCOUNT_SID \\ \n    -e AUTH_TOKEN=$AUTH_TOKEN\n```\n\n## Contributing\n\nAll suggestions in how to improve the specification and this guide are very welcome. Feel free share your thoughts in the Issue tracker, or even better, fork the repository to implement your own ideas and submit a pull request.\n\n[![Edit twilio on CodeSandbox](https://codesandbox.io/static/img/play-codesandbox.svg)](https://codesandbox.io/s/github/oms-services/twilio)\n\nThis project is guided by [Contributor Covenant](https://github.com/oms-services/.github/blob/master/CODE_OF_CONDUCT.md). Please read out full [Contribution Guidelines](https://github.com/oms-services/.github/blob/master/CONTRIBUTING.md).\n\n## Additional Resources\n\n* [Install the CLI](https://github.com/microservices/oms) - The OMS CLI helps developers create, test, validate, and build microservices.\n* [Example OMS Services](https://github.com/oms-services) - Examples of OMS-compliant services written in a variety of languages.\n* [Example Language Implementations](https://github.com/microservices) - Find tooling & language implementations in Node, Python, Scala, Java, Clojure.\n* [Storyscript Hub](https://hub.storyscript.io) - A public registry of OMS services.\n* [Community Chat](https://spectrum.chat/open-microservices) - Have ideas? Questions? Join us on Spectrum.\n",
        "service": {
            "alias": "twilio",
            "description": "Twilio as a microservice",
            "isCertified": true,
            "name": "twilio",
            "owner": {
                "username": "oms-services"
            },
            "public": true,
            "topics": [
                "twilio",
                "sms",
                "phone",
                "microservice",
                "open-microservice"
            ]
        },
        "serviceUuid": "5d96ff34-9b5e-4523-8c69-7be0dd3d5373",
        "state": "BETA"
    },
    {
        "configuration": {
            "actions": {
                "capture": {
                    "arguments": {
                        "url": {
                            "default": "https://twitter.com/jackrusher/status/1170325794910027778",
                            "help": "A target tweet permalink.",
                            "in": "requestBody",
                            "required": true,
                            "type": "string"
                        }
                    },
                    "help": "Captures a screenshot of a tweet.",
                    "http": {
                        "method": "post",
                        "path": "/capture-tweet-screenshot",
                        "port": 8080
                    },
                    "output": {
                        "contentType": "application/json",
                        "type": "map"
                    }
                }
            },
            "environment": {
                "AWS_ACCESS_KEY_ID": {
                    "help": "AWS Access Key Id credential w/ S3 permissions.",
                    "required": true,
                    "type": "string"
                },
                "AWS_S3_BUCKET_NAME": {
                    "help": "AWS S3 Bucket name",
                    "required": true,
                    "type": "string"
                },
                "AWS_S3_BUCKET_PREFIX": {
                    "help": "AWS S3 Bucket file prefix",
                    "required": false,
                    "type": "string"
                },
                "AWS_SECRET_ACCESS_KEY": {
                    "help": "AWS Secret Access Key credential w/ S3 permissions.",
                    "required": true,
                    "type": "string"
                }
            },
            "health": {
                "http": {
                    "path": "/health",
                    "port": 8080
                }
            },
            "info": {
                "description": "Returns a URL to a screenshot of a tweet.",
                "license": {
                    "name": "MIT",
                    "url": "https://opensource.org/licenses/MIT"
                },
                "title": "capture-tweet-screenshot",
                "version": "1.0.0"
            },
            "lifecycle": {
                "startup": {
                    "command": [
                        "node",
                        "/app/src/index.js"
                    ]
                }
            },
            "omg": 1
        },
        "readme": "# Microservice template for NodeJS\n\n![Microservice](https://img.shields.io/badge/microservice-ready-brightgreen.svg?style=for-the-badge)\n[![Build status](https://img.shields.io/travis/com/microservices/node/master.svg?style=for-the-badge)](https://travis-ci.com/microservices/node)\n\nAn OMS template for NodeJS + ExpressJS.\n\n## Setup\n\nLatest LTS version of Node.js 10.\n[See Releases](https://nodejs.org/en/about/releases/).\n\n```sh\nyarn\n```\n\nFirst, install the [Commitizen cli](https://github.com/commitizen/cz-cli) tools:\n\n```shell\nnpm install commitizen -g\n```\n\nNext, initialize your project to use the `cz-conventional-changelog` adapter by\ntyping\n\n```sh\ncommitizen init cz-conventional-changelog --yarn --dev --exact\n```\n\nUse the following to replace `git commit`:\n\n```sh\nyarn run commit\n```\n\n## Test\n\n## OMS Test Runner\n\n```sh\nomg run capture \\\n  -a url=https://twitter.com/jamessocol/status/717902576210067456 \\\n  -e AWS_ACCESS_KEY_ID=XXXXXXXXXX \\\n  -e AWS_SECRET_ACCESS_KEY=XXXXXXXXXX \\\n  -e AWS_S3_BUCKET_NAME=XOXOXO\n```\n\n```\n\u2139 Building Docker image\n\u2026\n\u2714 Built Docker image with name: omg/l2hvbwuvc2vil2fzew5jes9ydwj5\n\u2714 Started Docker container: 1c8a91688261\n\u2714 Health check passed\n\u2714 Ran action: `message` with output: {\"message\":\"Hello Service\"}\n\u2714 Stopped Docker container: 1c8a91688261\n```\n\n## cUrl\n\n```bash\ncurl -X POST \\\n  http://localhost:8080/capture-tweet-screenshot \\\n  -H 'Content-Type: application/json' \\\n  -d '{ \"url\": \"https://twitter.com/storyscript_/status/1174745271189856257\" }'\n```\n",
        "service": {
            "alias": null,
            "description": "OMS-compliant service thats captures a screenshot of a tweet.",
            "isCertified": false,
            "name": "capture-tweet-screenshot",
            "owner": {
                "username": "matthewhudson"
            },
            "public": true,
            "topics": [
                "screenshot"
            ]
        },
        "serviceUuid": "e5609a12-d681-450a-90a1-0a40c5ad887e",
        "state": "BETA"
    },
    {
        "configuration": {
            "actions": {
                "append": {
                    "arguments": {
                        "key": {
                            "in": "requestBody",
                            "required": true,
                            "type": "string"
                        },
                        "value": {
                            "in": "requestBody",
                            "required": true,
                            "type": "any"
                        }
                    },
                    "help": "Appends 'value' to a 'key'.",
                    "http": {
                        "contentType": "application/json",
                        "method": "post",
                        "path": "/append",
                        "port": 8000
                    },
                    "output": {
                        "type": "int"
                    }
                },
                "blpop": {
                    "arguments": {
                        "key": {
                            "in": "requestBody",
                            "required": true,
                            "type": "string"
                        }
                    },
                    "help": "Removes and returns the first element of the list stored at 'key'.\nWhen there are no element in the list, the command will not return\nuntil an element got added.\n",
                    "http": {
                        "contentType": "application/json",
                        "method": "post",
                        "path": "/blpop",
                        "port": 8000
                    },
                    "output": {
                        "type": "any"
                    }
                },
                "brpop": {
                    "arguments": {
                        "key": {
                            "in": "requestBody",
                            "required": true,
                            "type": "string"
                        }
                    },
                    "help": "Removes and returns the last element of the list stored at 'key'.\nWhen there are no element in the list, the command will not return\nuntil an elements got added.\n",
                    "http": {
                        "contentType": "application/json",
                        "method": "post",
                        "path": "/brpop",
                        "port": 8000
                    },
                    "output": {
                        "type": "any"
                    }
                },
                "decrement": {
                    "arguments": {
                        "by": {
                            "in": "requestBody",
                            "type": "int"
                        },
                        "key": {
                            "in": "requestBody",
                            "required": true,
                            "type": "string"
                        }
                    },
                    "help": "Decrements a number stored at 'key'.",
                    "http": {
                        "contentType": "application/json",
                        "method": "post",
                        "path": "/decr",
                        "port": 8000
                    },
                    "output": {
                        "type": "int"
                    }
                },
                "delete": {
                    "arguments": {
                        "key": {
                            "in": "requestBody",
                            "required": true,
                            "type": "string"
                        }
                    },
                    "help": "Removes 'key'.",
                    "http": {
                        "contentType": "application/json",
                        "method": "post",
                        "path": "/del",
                        "port": 8000
                    },
                    "output": {
                        "type": "none"
                    }
                },
                "expire": {
                    "arguments": {
                        "key": {
                            "in": "requestBody",
                            "required": true,
                            "type": "string"
                        },
                        "seconds": {
                            "in": "requestBody",
                            "required": true,
                            "type": "int"
                        }
                    },
                    "help": "Set a timeout on a 'key'.",
                    "http": {
                        "contentType": "application/json",
                        "method": "post",
                        "path": "/expire",
                        "port": 8000
                    },
                    "output": {
                        "type": "none"
                    }
                },
                "get": {
                    "arguments": {
                        "key": {
                            "in": "requestBody",
                            "required": true,
                            "type": "string"
                        }
                    },
                    "help": "Returns the value of 'key'.",
                    "http": {
                        "contentType": "application/json",
                        "method": "post",
                        "path": "/get",
                        "port": 8000
                    },
                    "output": {
                        "type": "string"
                    }
                },
                "getSet": {
                    "arguments": {
                        "key": {
                            "in": "requestBody",
                            "required": true,
                            "type": "string"
                        },
                        "value": {
                            "in": "requestBody",
                            "required": true,
                            "type": "any"
                        }
                    },
                    "help": "Returns the current value of 'key' and overwrites it with 'value'.",
                    "http": {
                        "contentType": "application/json",
                        "method": "post",
                        "path": "/getset",
                        "port": 8000
                    },
                    "output": {
                        "type": "string"
                    }
                },
                "increment": {
                    "arguments": {
                        "by": {
                            "in": "requestBody",
                            "type": "int"
                        },
                        "key": {
                            "in": "requestBody",
                            "required": true,
                            "type": "string"
                        }
                    },
                    "help": "Increments a number stored at 'key'.",
                    "http": {
                        "contentType": "application/json",
                        "method": "post",
                        "path": "/incr",
                        "port": 8000
                    },
                    "output": {
                        "type": "int"
                    }
                },
                "listener": {
                    "events": {
                        "lpop": {
                            "arguments": {
                                "key": {
                                    "help": "The key to LPOP",
                                    "in": "requestBody",
                                    "required": true,
                                    "type": "string"
                                }
                            },
                            "help": "LPOP a key constantly, and emit the values as events",
                            "http": {
                                "port": 8000,
                                "subscribe": {
                                    "method": "post",
                                    "path": "/listener/add"
                                },
                                "unsubscribe": {
                                    "method": "post",
                                    "path": "/listener/remove"
                                }
                            },
                            "output": {
                                "type": "any"
                            }
                        },
                        "rpop": {
                            "arguments": {
                                "key": {
                                    "help": "The key to RPOP",
                                    "in": "requestBody",
                                    "required": true,
                                    "type": "string"
                                }
                            },
                            "help": "RPOP a key constantly, and emit the values as events",
                            "http": {
                                "port": 8000,
                                "subscribe": {
                                    "method": "post",
                                    "path": "/listener/add"
                                },
                                "unsubscribe": {
                                    "method": "post",
                                    "path": "/listener/remove"
                                }
                            },
                            "output": {
                                "type": "any"
                            }
                        }
                    }
                },
                "lpop": {
                    "arguments": {
                        "key": {
                            "in": "requestBody",
                            "required": true,
                            "type": "string"
                        }
                    },
                    "help": "Removes and returns the first element of the list stored at 'key'.",
                    "http": {
                        "contentType": "application/json",
                        "method": "post",
                        "path": "/lpop",
                        "port": 8000
                    },
                    "output": {
                        "type": "any"
                    }
                },
                "lpush": {
                    "arguments": {
                        "key": {
                            "in": "requestBody",
                            "required": true,
                            "type": "string"
                        },
                        "value": {
                            "in": "requestBody",
                            "required": true,
                            "type": "any"
                        }
                    },
                    "help": "Insert 'value' at the head of list stored at 'key'.",
                    "http": {
                        "contentType": "application/json",
                        "method": "post",
                        "path": "/lpush",
                        "port": 8000
                    },
                    "output": {
                        "type": "none"
                    }
                },
                "mget": {
                    "arguments": {
                        "keys": {
                            "in": "requestBody",
                            "type": "list"
                        }
                    },
                    "help": "Returns the values of multiple 'keys'.",
                    "http": {
                        "contentType": "application/json",
                        "method": "post",
                        "path": "/get",
                        "port": 8000
                    },
                    "output": {
                        "type": "list"
                    }
                },
                "mset": {
                    "arguments": {
                        "pairs": {
                            "in": "requestBody",
                            "type": "map"
                        }
                    },
                    "help": "Sets multiple 'key'/'value' pairs simultaneously.",
                    "http": {
                        "contentType": "application/json",
                        "method": "post",
                        "path": "/mset",
                        "port": 8000
                    },
                    "output": {
                        "type": "none"
                    }
                },
                "msetnx": {
                    "arguments": {
                        "pairs": {
                            "in": "requestBody",
                            "type": "map"
                        }
                    },
                    "help": "Sets multiple 'key'/'value' pairs simultaneously.\nOnly non-existing keys will be set.\n",
                    "http": {
                        "contentType": "application/json",
                        "method": "post",
                        "path": "/msetnx",
                        "port": 8000
                    },
                    "output": {
                        "type": "boolean"
                    }
                },
                "rpop": {
                    "arguments": {
                        "key": {
                            "in": "requestBody",
                            "required": true,
                            "type": "string"
                        }
                    },
                    "help": "Removes and returns the last element of the list stored at 'key'.",
                    "http": {
                        "contentType": "application/json",
                        "method": "post",
                        "path": "/rpop",
                        "port": 8000
                    },
                    "output": {
                        "type": "any"
                    }
                },
                "rpush": {
                    "arguments": {
                        "key": {
                            "in": "requestBody",
                            "required": true,
                            "type": "string"
                        },
                        "value": {
                            "in": "requestBody",
                            "required": true,
                            "type": "any"
                        }
                    },
                    "help": "Insert 'value' at the end of list stored at 'key'.",
                    "http": {
                        "contentType": "application/json",
                        "method": "post",
                        "path": "/rpush",
                        "port": 8000
                    },
                    "output": {
                        "type": "none"
                    }
                },
                "set": {
                    "arguments": {
                        "key": {
                            "in": "requestBody",
                            "required": true,
                            "type": "string"
                        },
                        "value": {
                            "in": "requestBody",
                            "required": true,
                            "type": "any"
                        }
                    },
                    "help": "Sets 'key' to hold 'value'.",
                    "http": {
                        "contentType": "application/json",
                        "method": "post",
                        "path": "/set",
                        "port": 8000
                    },
                    "output": {
                        "type": "none"
                    }
                },
                "setnx": {
                    "arguments": {
                        "key": {
                            "in": "requestBody",
                            "required": true,
                            "type": "string"
                        },
                        "value": {
                            "in": "requestBody",
                            "required": true,
                            "type": "any"
                        }
                    },
                    "help": "Set a 'key' to 'value' only if the key does not exist yet.",
                    "http": {
                        "contentType": "application/json",
                        "method": "post",
                        "path": "/setnx",
                        "port": 8000
                    },
                    "output": {
                        "type": "boolean"
                    }
                }
            },
            "environment": {
                "REDIS_DB": {
                    "type": "string"
                },
                "REDIS_HOST": {
                    "type": "string"
                },
                "REDIS_PASSWORD": {
                    "type": "string"
                },
                "REDIS_PORT": {
                    "type": "int"
                }
            },
            "health": {
                "http": {
                    "path": "/health",
                    "port": 8000
                }
            },
            "info": {
                "contact": {
                    "email": "core@openmicroservices.org",
                    "name": "Open Microservices",
                    "url": "https://openmicroservices.org"
                },
                "description": "Wrapper for the Redis key-value store",
                "title": "Redis",
                "version": "1.0.1"
            },
            "lifecycle": {
                "startup": {
                    "command": [
                        "/bin/sh",
                        "/app/start.sh"
                    ]
                }
            },
            "oms": 1,
            "volumes": {
                "db": {
                    "persist": true,
                    "target": "/db"
                }
            }
        },
        "readme": "# _Redis_ Open Microservice\n\n> Wrapper for the Redis key-value store\n\n[![Open Microservice Specification Version](https://img.shields.io/badge/Open%20Microservice-1.0-477bf3.svg)](https://openmicroservices.org) [![Open Microservices Spectrum Chat](https://withspectrum.github.io/badge/badge.svg)](https://spectrum.chat/open-microservices) [![Open Microservices Code of Conduct](https://img.shields.io/badge/Contributor%20Covenant-v1.4%20adopted-ff69b4.svg)](https://github.com/oms-services/.github/blob/master/CODE_OF_CONDUCT.md) [![Open Microservices Commitzen](https://img.shields.io/badge/commitizen-friendly-brightgreen.svg)](http://commitizen.github.io/cz-cli/) [![PRs Welcome](https://img.shields.io/badge/PRs-welcome-brightgreen.svg)](http://makeapullrequest.com)\n\n## Introduction\n\nThis project is an example implementation of the [Open Microservice Specification](https://openmicroservices.org), a standard originally created at [Storyscript](https://storyscript.io) for building highly-portable \"microservices\" that expose the events, actions, and APIs inside containerized software.\n\n## Getting Started\n\nThe `oms` command-line interface allows you to interact with Open Microservices. If you're interested in creating an Open Microservice the CLI also helps validate, test, and debug your `oms.yml` implementation!\n\nSee the [oms-cli](https://github.com/microservices/oms) project to learn more!\n\n### Installation\n\n```\nnpm install -g @microservices/oms\n```\n\n## Usage\n\n### Open Microservices CLI Usage\n\nOnce you have the [oms-cli](https://github.com/microservices/oms) installed, you can run any of the following commands from within this project's root directory:\n\n#### Actions\n\n##### set\n\n> Sets 'key' to hold 'value'.\n##### Action Arguments\n\n| Argument Name | Type | Required | Default | Description |\n|:------------- |:---- |:-------- |:--------|:----------- |\n| key | `string` | `true` | None | No description provided. |\n| value | `any` | `true` | None | No description provided. |\n| REDIS_HOST | `string` | `false` | None | No description provided. |\n| REDIS_PORT | `int` | `false` | None | No description provided. |\n| REDIS_DB | `string` | `false` | None | No description provided. |\n| REDIS_PASSWORD | `string` | `false` | None | No description provided. |\n\n``` shell\noms run set \\ \n    -a key='*****' \\ \n    -a value='*****' \\ \n    -e REDIS_HOST=$REDIS_HOST \\ \n    -e REDIS_PORT=$REDIS_PORT \\ \n    -e REDIS_DB=$REDIS_DB \\ \n    -e REDIS_PASSWORD=$REDIS_PASSWORD\n```\n\n##### rpush\n\n> Insert 'value' at the end of list stored at 'key'.\n##### Action Arguments\n\n| Argument Name | Type | Required | Default | Description |\n|:------------- |:---- |:-------- |:--------|:----------- |\n| key | `string` | `true` | None | No description provided. |\n| value | `any` | `true` | None | No description provided. |\n| REDIS_HOST | `string` | `false` | None | No description provided. |\n| REDIS_PORT | `int` | `false` | None | No description provided. |\n| REDIS_DB | `string` | `false` | None | No description provided. |\n| REDIS_PASSWORD | `string` | `false` | None | No description provided. |\n\n``` shell\noms run rpush \\ \n    -a key='*****' \\ \n    -a value='*****' \\ \n    -e REDIS_HOST=$REDIS_HOST \\ \n    -e REDIS_PORT=$REDIS_PORT \\ \n    -e REDIS_DB=$REDIS_DB \\ \n    -e REDIS_PASSWORD=$REDIS_PASSWORD\n```\n\n##### lpush\n\n> Insert 'value' at the head of list stored at 'key'.\n##### Action Arguments\n\n| Argument Name | Type | Required | Default | Description |\n|:------------- |:---- |:-------- |:--------|:----------- |\n| key | `string` | `true` | None | No description provided. |\n| value | `any` | `true` | None | No description provided. |\n| REDIS_HOST | `string` | `false` | None | No description provided. |\n| REDIS_PORT | `int` | `false` | None | No description provided. |\n| REDIS_DB | `string` | `false` | None | No description provided. |\n| REDIS_PASSWORD | `string` | `false` | None | No description provided. |\n\n``` shell\noms run lpush \\ \n    -a key='*****' \\ \n    -a value='*****' \\ \n    -e REDIS_HOST=$REDIS_HOST \\ \n    -e REDIS_PORT=$REDIS_PORT \\ \n    -e REDIS_DB=$REDIS_DB \\ \n    -e REDIS_PASSWORD=$REDIS_PASSWORD\n```\n\n##### lpop\n\n> Removes and returns the first element of the list stored at 'key'.\n##### Action Arguments\n\n| Argument Name | Type | Required | Default | Description |\n|:------------- |:---- |:-------- |:--------|:----------- |\n| key | `string` | `true` | None | No description provided. |\n| REDIS_HOST | `string` | `false` | None | No description provided. |\n| REDIS_PORT | `int` | `false` | None | No description provided. |\n| REDIS_DB | `string` | `false` | None | No description provided. |\n| REDIS_PASSWORD | `string` | `false` | None | No description provided. |\n\n``` shell\noms run lpop \\ \n    -a key='*****' \\ \n    -e REDIS_HOST=$REDIS_HOST \\ \n    -e REDIS_PORT=$REDIS_PORT \\ \n    -e REDIS_DB=$REDIS_DB \\ \n    -e REDIS_PASSWORD=$REDIS_PASSWORD\n```\n\n##### rpop\n\n> Removes and returns the last element of the list stored at 'key'.\n##### Action Arguments\n\n| Argument Name | Type | Required | Default | Description |\n|:------------- |:---- |:-------- |:--------|:----------- |\n| key | `string` | `true` | None | No description provided. |\n| REDIS_HOST | `string` | `false` | None | No description provided. |\n| REDIS_PORT | `int` | `false` | None | No description provided. |\n| REDIS_DB | `string` | `false` | None | No description provided. |\n| REDIS_PASSWORD | `string` | `false` | None | No description provided. |\n\n``` shell\noms run rpop \\ \n    -a key='*****' \\ \n    -e REDIS_HOST=$REDIS_HOST \\ \n    -e REDIS_PORT=$REDIS_PORT \\ \n    -e REDIS_DB=$REDIS_DB \\ \n    -e REDIS_PASSWORD=$REDIS_PASSWORD\n```\n\n##### blpop\n\n> Removes and returns the first element of the list stored at 'key'.\nWhen there are no element in the list, the command will not return\nuntil an element got added.\n\n##### Action Arguments\n\n| Argument Name | Type | Required | Default | Description |\n|:------------- |:---- |:-------- |:--------|:----------- |\n| key | `string` | `true` | None | No description provided. |\n| REDIS_HOST | `string` | `false` | None | No description provided. |\n| REDIS_PORT | `int` | `false` | None | No description provided. |\n| REDIS_DB | `string` | `false` | None | No description provided. |\n| REDIS_PASSWORD | `string` | `false` | None | No description provided. |\n\n``` shell\noms run blpop \\ \n    -a key='*****' \\ \n    -e REDIS_HOST=$REDIS_HOST \\ \n    -e REDIS_PORT=$REDIS_PORT \\ \n    -e REDIS_DB=$REDIS_DB \\ \n    -e REDIS_PASSWORD=$REDIS_PASSWORD\n```\n\n##### brpop\n\n> Removes and returns the last element of the list stored at 'key'.\nWhen there are no element in the list, the command will not return\nuntil an elements got added.\n\n##### Action Arguments\n\n| Argument Name | Type | Required | Default | Description |\n|:------------- |:---- |:-------- |:--------|:----------- |\n| key | `string` | `true` | None | No description provided. |\n| REDIS_HOST | `string` | `false` | None | No description provided. |\n| REDIS_PORT | `int` | `false` | None | No description provided. |\n| REDIS_DB | `string` | `false` | None | No description provided. |\n| REDIS_PASSWORD | `string` | `false` | None | No description provided. |\n\n``` shell\noms run brpop \\ \n    -a key='*****' \\ \n    -e REDIS_HOST=$REDIS_HOST \\ \n    -e REDIS_PORT=$REDIS_PORT \\ \n    -e REDIS_DB=$REDIS_DB \\ \n    -e REDIS_PASSWORD=$REDIS_PASSWORD\n```\n\n##### delete\n\n> Removes 'key'.\n##### Action Arguments\n\n| Argument Name | Type | Required | Default | Description |\n|:------------- |:---- |:-------- |:--------|:----------- |\n| key | `string` | `true` | None | No description provided. |\n| REDIS_HOST | `string` | `false` | None | No description provided. |\n| REDIS_PORT | `int` | `false` | None | No description provided. |\n| REDIS_DB | `string` | `false` | None | No description provided. |\n| REDIS_PASSWORD | `string` | `false` | None | No description provided. |\n\n``` shell\noms run delete \\ \n    -a key='*****' \\ \n    -e REDIS_HOST=$REDIS_HOST \\ \n    -e REDIS_PORT=$REDIS_PORT \\ \n    -e REDIS_DB=$REDIS_DB \\ \n    -e REDIS_PASSWORD=$REDIS_PASSWORD\n```\n\n##### get\n\n> Returns the value of 'key'.\n##### Action Arguments\n\n| Argument Name | Type | Required | Default | Description |\n|:------------- |:---- |:-------- |:--------|:----------- |\n| key | `string` | `true` | None | No description provided. |\n| REDIS_HOST | `string` | `false` | None | No description provided. |\n| REDIS_PORT | `int` | `false` | None | No description provided. |\n| REDIS_DB | `string` | `false` | None | No description provided. |\n| REDIS_PASSWORD | `string` | `false` | None | No description provided. |\n\n``` shell\noms run get \\ \n    -a key='*****' \\ \n    -e REDIS_HOST=$REDIS_HOST \\ \n    -e REDIS_PORT=$REDIS_PORT \\ \n    -e REDIS_DB=$REDIS_DB \\ \n    -e REDIS_PASSWORD=$REDIS_PASSWORD\n```\n\n##### mget\n\n> Returns the values of multiple 'keys'.\n##### Action Arguments\n\n| Argument Name | Type | Required | Default | Description |\n|:------------- |:---- |:-------- |:--------|:----------- |\n| keys | `list` | `false` | None | No description provided. |\n| REDIS_HOST | `string` | `false` | None | No description provided. |\n| REDIS_PORT | `int` | `false` | None | No description provided. |\n| REDIS_DB | `string` | `false` | None | No description provided. |\n| REDIS_PASSWORD | `string` | `false` | None | No description provided. |\n\n``` shell\noms run mget \\ \n    -a keys='*****' \\ \n    -e REDIS_HOST=$REDIS_HOST \\ \n    -e REDIS_PORT=$REDIS_PORT \\ \n    -e REDIS_DB=$REDIS_DB \\ \n    -e REDIS_PASSWORD=$REDIS_PASSWORD\n```\n\n##### increment\n\n> Increments a number stored at 'key'.\n##### Action Arguments\n\n| Argument Name | Type | Required | Default | Description |\n|:------------- |:---- |:-------- |:--------|:----------- |\n| key | `string` | `true` | None | No description provided. |\n| by | `int` | `false` | None | No description provided. |\n| REDIS_HOST | `string` | `false` | None | No description provided. |\n| REDIS_PORT | `int` | `false` | None | No description provided. |\n| REDIS_DB | `string` | `false` | None | No description provided. |\n| REDIS_PASSWORD | `string` | `false` | None | No description provided. |\n\n``` shell\noms run increment \\ \n    -a key='*****' \\ \n    -a by='*****' \\ \n    -e REDIS_HOST=$REDIS_HOST \\ \n    -e REDIS_PORT=$REDIS_PORT \\ \n    -e REDIS_DB=$REDIS_DB \\ \n    -e REDIS_PASSWORD=$REDIS_PASSWORD\n```\n\n##### decrement\n\n> Decrements a number stored at 'key'.\n##### Action Arguments\n\n| Argument Name | Type | Required | Default | Description |\n|:------------- |:---- |:-------- |:--------|:----------- |\n| key | `string` | `true` | None | No description provided. |\n| by | `int` | `false` | None | No description provided. |\n| REDIS_HOST | `string` | `false` | None | No description provided. |\n| REDIS_PORT | `int` | `false` | None | No description provided. |\n| REDIS_DB | `string` | `false` | None | No description provided. |\n| REDIS_PASSWORD | `string` | `false` | None | No description provided. |\n\n``` shell\noms run decrement \\ \n    -a key='*****' \\ \n    -a by='*****' \\ \n    -e REDIS_HOST=$REDIS_HOST \\ \n    -e REDIS_PORT=$REDIS_PORT \\ \n    -e REDIS_DB=$REDIS_DB \\ \n    -e REDIS_PASSWORD=$REDIS_PASSWORD\n```\n\n##### append\n\n> Appends 'value' to a 'key'.\n##### Action Arguments\n\n| Argument Name | Type | Required | Default | Description |\n|:------------- |:---- |:-------- |:--------|:----------- |\n| key | `string` | `true` | None | No description provided. |\n| value | `any` | `true` | None | No description provided. |\n| REDIS_HOST | `string` | `false` | None | No description provided. |\n| REDIS_PORT | `int` | `false` | None | No description provided. |\n| REDIS_DB | `string` | `false` | None | No description provided. |\n| REDIS_PASSWORD | `string` | `false` | None | No description provided. |\n\n``` shell\noms run append \\ \n    -a key='*****' \\ \n    -a value='*****' \\ \n    -e REDIS_HOST=$REDIS_HOST \\ \n    -e REDIS_PORT=$REDIS_PORT \\ \n    -e REDIS_DB=$REDIS_DB \\ \n    -e REDIS_PASSWORD=$REDIS_PASSWORD\n```\n\n##### getSet\n\n> Returns the current value of 'key' and overwrites it with 'value'.\n##### Action Arguments\n\n| Argument Name | Type | Required | Default | Description |\n|:------------- |:---- |:-------- |:--------|:----------- |\n| key | `string` | `true` | None | No description provided. |\n| value | `any` | `true` | None | No description provided. |\n| REDIS_HOST | `string` | `false` | None | No description provided. |\n| REDIS_PORT | `int` | `false` | None | No description provided. |\n| REDIS_DB | `string` | `false` | None | No description provided. |\n| REDIS_PASSWORD | `string` | `false` | None | No description provided. |\n\n``` shell\noms run getSet \\ \n    -a key='*****' \\ \n    -a value='*****' \\ \n    -e REDIS_HOST=$REDIS_HOST \\ \n    -e REDIS_PORT=$REDIS_PORT \\ \n    -e REDIS_DB=$REDIS_DB \\ \n    -e REDIS_PASSWORD=$REDIS_PASSWORD\n```\n\n##### setnx\n\n> Set a 'key' to 'value' only if the key does not exist yet.\n##### Action Arguments\n\n| Argument Name | Type | Required | Default | Description |\n|:------------- |:---- |:-------- |:--------|:----------- |\n| key | `string` | `true` | None | No description provided. |\n| value | `any` | `true` | None | No description provided. |\n| REDIS_HOST | `string` | `false` | None | No description provided. |\n| REDIS_PORT | `int` | `false` | None | No description provided. |\n| REDIS_DB | `string` | `false` | None | No description provided. |\n| REDIS_PASSWORD | `string` | `false` | None | No description provided. |\n\n``` shell\noms run setnx \\ \n    -a key='*****' \\ \n    -a value='*****' \\ \n    -e REDIS_HOST=$REDIS_HOST \\ \n    -e REDIS_PORT=$REDIS_PORT \\ \n    -e REDIS_DB=$REDIS_DB \\ \n    -e REDIS_PASSWORD=$REDIS_PASSWORD\n```\n\n##### mset\n\n> Sets multiple 'key'/'value' pairs simultaneously.\n##### Action Arguments\n\n| Argument Name | Type | Required | Default | Description |\n|:------------- |:---- |:-------- |:--------|:----------- |\n| pairs | `map` | `false` | None | No description provided. |\n| REDIS_HOST | `string` | `false` | None | No description provided. |\n| REDIS_PORT | `int` | `false` | None | No description provided. |\n| REDIS_DB | `string` | `false` | None | No description provided. |\n| REDIS_PASSWORD | `string` | `false` | None | No description provided. |\n\n``` shell\noms run mset \\ \n    -a pairs='*****' \\ \n    -e REDIS_HOST=$REDIS_HOST \\ \n    -e REDIS_PORT=$REDIS_PORT \\ \n    -e REDIS_DB=$REDIS_DB \\ \n    -e REDIS_PASSWORD=$REDIS_PASSWORD\n```\n\n##### msetnx\n\n> Sets multiple 'key'/'value' pairs simultaneously.\nOnly non-existing keys will be set.\n\n##### Action Arguments\n\n| Argument Name | Type | Required | Default | Description |\n|:------------- |:---- |:-------- |:--------|:----------- |\n| pairs | `map` | `false` | None | No description provided. |\n| REDIS_HOST | `string` | `false` | None | No description provided. |\n| REDIS_PORT | `int` | `false` | None | No description provided. |\n| REDIS_DB | `string` | `false` | None | No description provided. |\n| REDIS_PASSWORD | `string` | `false` | None | No description provided. |\n\n``` shell\noms run msetnx \\ \n    -a pairs='*****' \\ \n    -e REDIS_HOST=$REDIS_HOST \\ \n    -e REDIS_PORT=$REDIS_PORT \\ \n    -e REDIS_DB=$REDIS_DB \\ \n    -e REDIS_PASSWORD=$REDIS_PASSWORD\n```\n\n##### expire\n\n> Set a timeout on a 'key'.\n##### Action Arguments\n\n| Argument Name | Type | Required | Default | Description |\n|:------------- |:---- |:-------- |:--------|:----------- |\n| key | `string` | `true` | None | No description provided. |\n| seconds | `int` | `true` | None | No description provided. |\n| REDIS_HOST | `string` | `false` | None | No description provided. |\n| REDIS_PORT | `int` | `false` | None | No description provided. |\n| REDIS_DB | `string` | `false` | None | No description provided. |\n| REDIS_PASSWORD | `string` | `false` | None | No description provided. |\n\n``` shell\noms run expire \\ \n    -a key='*****' \\ \n    -a seconds='*****' \\ \n    -e REDIS_HOST=$REDIS_HOST \\ \n    -e REDIS_PORT=$REDIS_PORT \\ \n    -e REDIS_DB=$REDIS_DB \\ \n    -e REDIS_PASSWORD=$REDIS_PASSWORD\n```\n\n##### rpop\n\n> RPOP a key constantly, and emit the values as events\n##### Action Arguments\n\n| Argument Name | Type | Required | Default | Description |\n|:------------- |:---- |:-------- |:--------|:----------- |\n| key | `string` | `true` | None | The key to RPOP |\n| REDIS_HOST | `string` | `false` | None | No description provided. |\n| REDIS_PORT | `int` | `false` | None | No description provided. |\n| REDIS_DB | `string` | `false` | None | No description provided. |\n| REDIS_PASSWORD | `string` | `false` | None | No description provided. |\n\n``` shell\noms subscribe rpop \\ \n    -a key='*****' \\ \n    -e REDIS_HOST=$REDIS_HOST \\ \n    -e REDIS_PORT=$REDIS_PORT \\ \n    -e REDIS_DB=$REDIS_DB \\ \n    -e REDIS_PASSWORD=$REDIS_PASSWORD\n```\n,##### lpop\n\n> LPOP a key constantly, and emit the values as events\n##### Action Arguments\n\n| Argument Name | Type | Required | Default | Description |\n|:------------- |:---- |:-------- |:--------|:----------- |\n| key | `string` | `true` | None | The key to LPOP |\n| REDIS_HOST | `string` | `false` | None | No description provided. |\n| REDIS_PORT | `int` | `false` | None | No description provided. |\n| REDIS_DB | `string` | `false` | None | No description provided. |\n| REDIS_PASSWORD | `string` | `false` | None | No description provided. |\n\n``` shell\noms subscribe lpop \\ \n    -a key='*****' \\ \n    -e REDIS_HOST=$REDIS_HOST \\ \n    -e REDIS_PORT=$REDIS_PORT \\ \n    -e REDIS_DB=$REDIS_DB \\ \n    -e REDIS_PASSWORD=$REDIS_PASSWORD\n```\n\n## Contributing\n\nAll suggestions in how to improve the specification and this guide are very welcome. Feel free share your thoughts in the Issue tracker, or even better, fork the repository to implement your own ideas and submit a pull request.\n\n[![Edit redis on CodeSandbox](https://codesandbox.io/static/img/play-codesandbox.svg)](https://codesandbox.io/s/github/oms-services/redis)\n\nThis project is guided by [Contributor Covenant](https://github.com/oms-services/.github/blob/master/CODE_OF_CONDUCT.md). Please read out full [Contribution Guidelines](https://github.com/oms-services/.github/blob/master/CONTRIBUTING.md).\n\n## Additional Resources\n\n* [Install the CLI](https://github.com/microservices/oms) - The OMS CLI helps developers create, test, validate, and build microservices.\n* [Example OMS Services](https://github.com/oms-services) - Examples of OMS-compliant services written in a variety of languages.\n* [Example Language Implementations](https://github.com/microservices) - Find tooling & language implementations in Node, Python, Scala, Java, Clojure.\n* [Storyscript Hub](https://hub.storyscript.io) - A public registry of OMS services.\n* [Community Chat](https://spectrum.chat/open-microservices) - Have ideas? Questions? Join us on Spectrum.\n",
        "service": {
            "alias": "redis",
            "description": "Run redis in a Story.",
            "isCertified": true,
            "name": "redis",
            "owner": {
                "username": "oms-services"
            },
            "public": true,
            "topics": [
                "microservice",
                "redis-server",
                "redis",
                "oms",
                "open-microservice"
            ]
        },
        "serviceUuid": "352885c0-2673-46e1-949e-be3c8043376f",
        "state": "BETA"
    },
    {
        "configuration": {
            "actions": {
                "append": {
                    "arguments": {
                        "key": {
                            "in": "requestBody",
                            "required": true,
                            "type": "string"
                        },
                        "value": {
                            "in": "requestBody",
                            "required": true,
                            "type": "any"
                        }
                    },
                    "help": "Appends 'value' to a 'key'.",
                    "http": {
                        "contentType": "application/json",
                        "method": "post",
                        "path": "/append",
                        "port": 8000
                    },
                    "output": {
                        "type": "int"
                    }
                },
                "blpop": {
                    "arguments": {
                        "key": {
                            "in": "requestBody",
                            "required": true,
                            "type": "string"
                        }
                    },
                    "help": "Removes and returns the first element of the list stored at 'key'.\nWhen there are no element in the list, the command will not return\nuntil an element got added.\n",
                    "http": {
                        "contentType": "application/json",
                        "method": "post",
                        "path": "/blpop",
                        "port": 8000
                    },
                    "output": {
                        "type": "any"
                    }
                },
                "brpop": {
                    "arguments": {
                        "key": {
                            "in": "requestBody",
                            "required": true,
                            "type": "string"
                        }
                    },
                    "help": "Removes and returns the last element of the list stored at 'key'.\nWhen there are no element in the list, the command will not return\nuntil an elements got added.\n",
                    "http": {
                        "contentType": "application/json",
                        "method": "post",
                        "path": "/brpop",
                        "port": 8000
                    },
                    "output": {
                        "type": "any"
                    }
                },
                "decrement": {
                    "arguments": {
                        "by": {
                            "in": "requestBody",
                            "type": "int"
                        },
                        "key": {
                            "in": "requestBody",
                            "required": true,
                            "type": "string"
                        }
                    },
                    "help": "Decrements a number stored at 'key'.",
                    "http": {
                        "contentType": "application/json",
                        "method": "post",
                        "path": "/decr",
                        "port": 8000
                    },
                    "output": {
                        "type": "int"
                    }
                },
                "delete": {
                    "arguments": {
                        "key": {
                            "in": "requestBody",
                            "required": true,
                            "type": "string"
                        }
                    },
                    "help": "Removes 'key'.",
                    "http": {
                        "contentType": "application/json",
                        "method": "post",
                        "path": "/del",
                        "port": 8000
                    },
                    "output": {
                        "type": "none"
                    }
                },
                "expire": {
                    "arguments": {
                        "key": {
                            "in": "requestBody",
                            "required": true,
                            "type": "string"
                        },
                        "seconds": {
                            "in": "requestBody",
                            "required": true,
                            "type": "int"
                        }
                    },
                    "help": "Set a timeout on a 'key'.",
                    "http": {
                        "contentType": "application/json",
                        "method": "post",
                        "path": "/expire",
                        "port": 8000
                    },
                    "output": {
                        "type": "none"
                    }
                },
                "get": {
                    "arguments": {
                        "key": {
                            "in": "requestBody",
                            "required": true,
                            "type": "string"
                        }
                    },
                    "help": "Returns the value of 'key'.",
                    "http": {
                        "contentType": "application/json",
                        "method": "post",
                        "path": "/get",
                        "port": 8000
                    },
                    "output": {
                        "type": "string"
                    }
                },
                "getSet": {
                    "arguments": {
                        "key": {
                            "in": "requestBody",
                            "required": true,
                            "type": "string"
                        },
                        "value": {
                            "in": "requestBody",
                            "required": true,
                            "type": "any"
                        }
                    },
                    "help": "Returns the current value of 'key' and overwrites it with 'value'.",
                    "http": {
                        "contentType": "application/json",
                        "method": "post",
                        "path": "/getset",
                        "port": 8000
                    },
                    "output": {
                        "type": "string"
                    }
                },
                "increment": {
                    "arguments": {
                        "by": {
                            "in": "requestBody",
                            "type": "int"
                        },
                        "key": {
                            "in": "requestBody",
                            "required": true,
                            "type": "string"
                        }
                    },
                    "help": "Increments a number stored at 'key'.",
                    "http": {
                        "contentType": "application/json",
                        "method": "post",
                        "path": "/incr",
                        "port": 8000
                    },
                    "output": {
                        "type": "int"
                    }
                },
                "listener": {
                    "events": {
                        "lpop": {
                            "arguments": {
                                "key": {
                                    "help": "The key to LPOP",
                                    "in": "requestBody",
                                    "required": true,
                                    "type": "string"
                                }
                            },
                            "help": "LPOP a key constantly, and emit the values as events",
                            "http": {
                                "port": 8000,
                                "subscribe": {
                                    "method": "post",
                                    "path": "/listener/add"
                                },
                                "unsubscribe": {
                                    "method": "post",
                                    "path": "/listener/remove"
                                }
                            },
                            "output": {
                                "type": "any"
                            }
                        },
                        "rpop": {
                            "arguments": {
                                "key": {
                                    "help": "The key to RPOP",
                                    "in": "requestBody",
                                    "required": true,
                                    "type": "string"
                                }
                            },
                            "help": "RPOP a key constantly, and emit the values as events",
                            "http": {
                                "port": 8000,
                                "subscribe": {
                                    "method": "post",
                                    "path": "/listener/add"
                                },
                                "unsubscribe": {
                                    "method": "post",
                                    "path": "/listener/remove"
                                }
                            },
                            "output": {
                                "type": "any"
                            }
                        }
                    }
                },
                "lpop": {
                    "arguments": {
                        "key": {
                            "in": "requestBody",
                            "required": true,
                            "type": "string"
                        }
                    },
                    "help": "Removes and returns the first element of the list stored at 'key'.",
                    "http": {
                        "contentType": "application/json",
                        "method": "post",
                        "path": "/lpop",
                        "port": 8000
                    },
                    "output": {
                        "type": "any"
                    }
                },
                "lpush": {
                    "arguments": {
                        "key": {
                            "in": "requestBody",
                            "required": true,
                            "type": "string"
                        },
                        "value": {
                            "in": "requestBody",
                            "required": true,
                            "type": "any"
                        }
                    },
                    "help": "Insert 'value' at the head of list stored at 'key'.",
                    "http": {
                        "contentType": "application/json",
                        "method": "post",
                        "path": "/lpush",
                        "port": 8000
                    },
                    "output": {
                        "type": "none"
                    }
                },
                "mget": {
                    "arguments": {
                        "keys": {
                            "in": "requestBody",
                            "type": "list"
                        }
                    },
                    "help": "Returns the values of multiple 'keys'.",
                    "http": {
                        "contentType": "application/json",
                        "method": "post",
                        "path": "/get",
                        "port": 8000
                    },
                    "output": {
                        "type": "list"
                    }
                },
                "mset": {
                    "arguments": {
                        "pairs": {
                            "in": "requestBody",
                            "type": "map"
                        }
                    },
                    "help": "Sets multiple 'key'/'value' pairs simultaneously.",
                    "http": {
                        "contentType": "application/json",
                        "method": "post",
                        "path": "/mset",
                        "port": 8000
                    },
                    "output": {
                        "type": "none"
                    }
                },
                "msetnx": {
                    "arguments": {
                        "pairs": {
                            "in": "requestBody",
                            "type": "map"
                        }
                    },
                    "help": "Sets multiple 'key'/'value' pairs simultaneously.\nOnly non-existing keys will be set.\n",
                    "http": {
                        "contentType": "application/json",
                        "method": "post",
                        "path": "/msetnx",
                        "port": 8000
                    },
                    "output": {
                        "type": "boolean"
                    }
                },
                "rpop": {
                    "arguments": {
                        "key": {
                            "in": "requestBody",
                            "required": true,
                            "type": "string"
                        }
                    },
                    "help": "Removes and returns the last element of the list stored at 'key'.",
                    "http": {
                        "contentType": "application/json",
                        "method": "post",
                        "path": "/rpop",
                        "port": 8000
                    },
                    "output": {
                        "type": "any"
                    }
                },
                "rpush": {
                    "arguments": {
                        "key": {
                            "in": "requestBody",
                            "required": true,
                            "type": "string"
                        },
                        "value": {
                            "in": "requestBody",
                            "required": true,
                            "type": "any"
                        }
                    },
                    "help": "Insert 'value' at the end of list stored at 'key'.",
                    "http": {
                        "contentType": "application/json",
                        "method": "post",
                        "path": "/rpush",
                        "port": 8000
                    },
                    "output": {
                        "type": "none"
                    }
                },
                "set": {
                    "arguments": {
                        "key": {
                            "in": "requestBody",
                            "required": true,
                            "type": "string"
                        },
                        "value": {
                            "in": "requestBody",
                            "required": true,
                            "type": "any"
                        }
                    },
                    "help": "Sets 'key' to hold 'value'.",
                    "http": {
                        "contentType": "application/json",
                        "method": "post",
                        "path": "/set",
                        "port": 8000
                    },
                    "output": {
                        "type": "none"
                    }
                },
                "setnx": {
                    "arguments": {
                        "key": {
                            "in": "requestBody",
                            "required": true,
                            "type": "string"
                        },
                        "value": {
                            "in": "requestBody",
                            "required": true,
                            "type": "any"
                        }
                    },
                    "help": "Set a 'key' to 'value' only if the key does not exist yet.",
                    "http": {
                        "contentType": "application/json",
                        "method": "post",
                        "path": "/setnx",
                        "port": 8000
                    },
                    "output": {
                        "type": "boolean"
                    }
                }
            },
            "environment": {
                "REDIS_DB": {
                    "type": "string"
                },
                "REDIS_HOST": {
                    "type": "string"
                },
                "REDIS_PASSWORD": {
                    "type": "string"
                },
                "REDIS_PORT": {
                    "type": "int"
                }
            },
            "health": {
                "http": {
                    "path": "/health",
                    "port": 8000
                }
            },
            "info": {
                "contact": {
                    "email": "core@openmicroservices.org",
                    "name": "Open Microservices",
                    "url": "https://openmicroservices.org"
                },
                "description": "Wrapper for the Redis key-value store",
                "title": "Redis",
                "version": "1.0.1"
            },
            "lifecycle": {
                "startup": {
                    "command": [
                        "/bin/sh",
                        "/app/start.sh"
                    ]
                }
            },
            "oms": 1,
            "volumes": {
                "db": {
                    "persist": true,
                    "target": "/db"
                }
            }
        },
        "readme": "# _Redis_ Open Microservice\n\n> Wrapper for the Redis key-value store\n\n[![Open Microservice Specification Version](https://img.shields.io/badge/Open%20Microservice-1.0-477bf3.svg)](https://openmicroservices.org) [![Open Microservices Spectrum Chat](https://withspectrum.github.io/badge/badge.svg)](https://spectrum.chat/open-microservices) [![Open Microservices Code of Conduct](https://img.shields.io/badge/Contributor%20Covenant-v1.4%20adopted-ff69b4.svg)](https://github.com/oms-services/.github/blob/master/CODE_OF_CONDUCT.md) [![Open Microservices Commitzen](https://img.shields.io/badge/commitizen-friendly-brightgreen.svg)](http://commitizen.github.io/cz-cli/) [![PRs Welcome](https://img.shields.io/badge/PRs-welcome-brightgreen.svg)](http://makeapullrequest.com)\n\n## Introduction\n\nThis project is an example implementation of the [Open Microservice Specification](https://openmicroservices.org), a standard originally created at [Storyscript](https://storyscript.io) for building highly-portable \"microservices\" that expose the events, actions, and APIs inside containerized software.\n\n## Getting Started\n\nThe `oms` command-line interface allows you to interact with Open Microservices. If you're interested in creating an Open Microservice the CLI also helps validate, test, and debug your `oms.yml` implementation!\n\nSee the [oms-cli](https://github.com/microservices/oms) project to learn more!\n\n### Installation\n\n```\nnpm install -g @microservices/oms\n```\n\n## Usage\n\n### Open Microservices CLI Usage\n\nOnce you have the [oms-cli](https://github.com/microservices/oms) installed, you can run any of the following commands from within this project's root directory:\n\n#### Actions\n\n##### set\n\n> Sets 'key' to hold 'value'.\n##### Action Arguments\n\n| Argument Name | Type | Required | Default | Description |\n|:------------- |:---- |:-------- |:--------|:----------- |\n| key | `string` | `true` | None | No description provided. |\n| value | `any` | `true` | None | No description provided. |\n| REDIS_HOST | `string` | `false` | None | No description provided. |\n| REDIS_PORT | `int` | `false` | None | No description provided. |\n| REDIS_DB | `string` | `false` | None | No description provided. |\n| REDIS_PASSWORD | `string` | `false` | None | No description provided. |\n\n``` shell\noms run set \\ \n    -a key='*****' \\ \n    -a value='*****' \\ \n    -e REDIS_HOST=$REDIS_HOST \\ \n    -e REDIS_PORT=$REDIS_PORT \\ \n    -e REDIS_DB=$REDIS_DB \\ \n    -e REDIS_PASSWORD=$REDIS_PASSWORD\n```\n\n##### rpush\n\n> Insert 'value' at the end of list stored at 'key'.\n##### Action Arguments\n\n| Argument Name | Type | Required | Default | Description |\n|:------------- |:---- |:-------- |:--------|:----------- |\n| key | `string` | `true` | None | No description provided. |\n| value | `any` | `true` | None | No description provided. |\n| REDIS_HOST | `string` | `false` | None | No description provided. |\n| REDIS_PORT | `int` | `false` | None | No description provided. |\n| REDIS_DB | `string` | `false` | None | No description provided. |\n| REDIS_PASSWORD | `string` | `false` | None | No description provided. |\n\n``` shell\noms run rpush \\ \n    -a key='*****' \\ \n    -a value='*****' \\ \n    -e REDIS_HOST=$REDIS_HOST \\ \n    -e REDIS_PORT=$REDIS_PORT \\ \n    -e REDIS_DB=$REDIS_DB \\ \n    -e REDIS_PASSWORD=$REDIS_PASSWORD\n```\n\n##### lpush\n\n> Insert 'value' at the head of list stored at 'key'.\n##### Action Arguments\n\n| Argument Name | Type | Required | Default | Description |\n|:------------- |:---- |:-------- |:--------|:----------- |\n| key | `string` | `true` | None | No description provided. |\n| value | `any` | `true` | None | No description provided. |\n| REDIS_HOST | `string` | `false` | None | No description provided. |\n| REDIS_PORT | `int` | `false` | None | No description provided. |\n| REDIS_DB | `string` | `false` | None | No description provided. |\n| REDIS_PASSWORD | `string` | `false` | None | No description provided. |\n\n``` shell\noms run lpush \\ \n    -a key='*****' \\ \n    -a value='*****' \\ \n    -e REDIS_HOST=$REDIS_HOST \\ \n    -e REDIS_PORT=$REDIS_PORT \\ \n    -e REDIS_DB=$REDIS_DB \\ \n    -e REDIS_PASSWORD=$REDIS_PASSWORD\n```\n\n##### lpop\n\n> Removes and returns the first element of the list stored at 'key'.\n##### Action Arguments\n\n| Argument Name | Type | Required | Default | Description |\n|:------------- |:---- |:-------- |:--------|:----------- |\n| key | `string` | `true` | None | No description provided. |\n| REDIS_HOST | `string` | `false` | None | No description provided. |\n| REDIS_PORT | `int` | `false` | None | No description provided. |\n| REDIS_DB | `string` | `false` | None | No description provided. |\n| REDIS_PASSWORD | `string` | `false` | None | No description provided. |\n\n``` shell\noms run lpop \\ \n    -a key='*****' \\ \n    -e REDIS_HOST=$REDIS_HOST \\ \n    -e REDIS_PORT=$REDIS_PORT \\ \n    -e REDIS_DB=$REDIS_DB \\ \n    -e REDIS_PASSWORD=$REDIS_PASSWORD\n```\n\n##### rpop\n\n> Removes and returns the last element of the list stored at 'key'.\n##### Action Arguments\n\n| Argument Name | Type | Required | Default | Description |\n|:------------- |:---- |:-------- |:--------|:----------- |\n| key | `string` | `true` | None | No description provided. |\n| REDIS_HOST | `string` | `false` | None | No description provided. |\n| REDIS_PORT | `int` | `false` | None | No description provided. |\n| REDIS_DB | `string` | `false` | None | No description provided. |\n| REDIS_PASSWORD | `string` | `false` | None | No description provided. |\n\n``` shell\noms run rpop \\ \n    -a key='*****' \\ \n    -e REDIS_HOST=$REDIS_HOST \\ \n    -e REDIS_PORT=$REDIS_PORT \\ \n    -e REDIS_DB=$REDIS_DB \\ \n    -e REDIS_PASSWORD=$REDIS_PASSWORD\n```\n\n##### blpop\n\n> Removes and returns the first element of the list stored at 'key'.\nWhen there are no element in the list, the command will not return\nuntil an element got added.\n\n##### Action Arguments\n\n| Argument Name | Type | Required | Default | Description |\n|:------------- |:---- |:-------- |:--------|:----------- |\n| key | `string` | `true` | None | No description provided. |\n| REDIS_HOST | `string` | `false` | None | No description provided. |\n| REDIS_PORT | `int` | `false` | None | No description provided. |\n| REDIS_DB | `string` | `false` | None | No description provided. |\n| REDIS_PASSWORD | `string` | `false` | None | No description provided. |\n\n``` shell\noms run blpop \\ \n    -a key='*****' \\ \n    -e REDIS_HOST=$REDIS_HOST \\ \n    -e REDIS_PORT=$REDIS_PORT \\ \n    -e REDIS_DB=$REDIS_DB \\ \n    -e REDIS_PASSWORD=$REDIS_PASSWORD\n```\n\n##### brpop\n\n> Removes and returns the last element of the list stored at 'key'.\nWhen there are no element in the list, the command will not return\nuntil an elements got added.\n\n##### Action Arguments\n\n| Argument Name | Type | Required | Default | Description |\n|:------------- |:---- |:-------- |:--------|:----------- |\n| key | `string` | `true` | None | No description provided. |\n| REDIS_HOST | `string` | `false` | None | No description provided. |\n| REDIS_PORT | `int` | `false` | None | No description provided. |\n| REDIS_DB | `string` | `false` | None | No description provided. |\n| REDIS_PASSWORD | `string` | `false` | None | No description provided. |\n\n``` shell\noms run brpop \\ \n    -a key='*****' \\ \n    -e REDIS_HOST=$REDIS_HOST \\ \n    -e REDIS_PORT=$REDIS_PORT \\ \n    -e REDIS_DB=$REDIS_DB \\ \n    -e REDIS_PASSWORD=$REDIS_PASSWORD\n```\n\n##### delete\n\n> Removes 'key'.\n##### Action Arguments\n\n| Argument Name | Type | Required | Default | Description |\n|:------------- |:---- |:-------- |:--------|:----------- |\n| key | `string` | `true` | None | No description provided. |\n| REDIS_HOST | `string` | `false` | None | No description provided. |\n| REDIS_PORT | `int` | `false` | None | No description provided. |\n| REDIS_DB | `string` | `false` | None | No description provided. |\n| REDIS_PASSWORD | `string` | `false` | None | No description provided. |\n\n``` shell\noms run delete \\ \n    -a key='*****' \\ \n    -e REDIS_HOST=$REDIS_HOST \\ \n    -e REDIS_PORT=$REDIS_PORT \\ \n    -e REDIS_DB=$REDIS_DB \\ \n    -e REDIS_PASSWORD=$REDIS_PASSWORD\n```\n\n##### get\n\n> Returns the value of 'key'.\n##### Action Arguments\n\n| Argument Name | Type | Required | Default | Description |\n|:------------- |:---- |:-------- |:--------|:----------- |\n| key | `string` | `true` | None | No description provided. |\n| REDIS_HOST | `string` | `false` | None | No description provided. |\n| REDIS_PORT | `int` | `false` | None | No description provided. |\n| REDIS_DB | `string` | `false` | None | No description provided. |\n| REDIS_PASSWORD | `string` | `false` | None | No description provided. |\n\n``` shell\noms run get \\ \n    -a key='*****' \\ \n    -e REDIS_HOST=$REDIS_HOST \\ \n    -e REDIS_PORT=$REDIS_PORT \\ \n    -e REDIS_DB=$REDIS_DB \\ \n    -e REDIS_PASSWORD=$REDIS_PASSWORD\n```\n\n##### mget\n\n> Returns the values of multiple 'keys'.\n##### Action Arguments\n\n| Argument Name | Type | Required | Default | Description |\n|:------------- |:---- |:-------- |:--------|:----------- |\n| keys | `list` | `false` | None | No description provided. |\n| REDIS_HOST | `string` | `false` | None | No description provided. |\n| REDIS_PORT | `int` | `false` | None | No description provided. |\n| REDIS_DB | `string` | `false` | None | No description provided. |\n| REDIS_PASSWORD | `string` | `false` | None | No description provided. |\n\n``` shell\noms run mget \\ \n    -a keys='*****' \\ \n    -e REDIS_HOST=$REDIS_HOST \\ \n    -e REDIS_PORT=$REDIS_PORT \\ \n    -e REDIS_DB=$REDIS_DB \\ \n    -e REDIS_PASSWORD=$REDIS_PASSWORD\n```\n\n##### increment\n\n> Increments a number stored at 'key'.\n##### Action Arguments\n\n| Argument Name | Type | Required | Default | Description |\n|:------------- |:---- |:-------- |:--------|:----------- |\n| key | `string` | `true` | None | No description provided. |\n| by | `int` | `false` | None | No description provided. |\n| REDIS_HOST | `string` | `false` | None | No description provided. |\n| REDIS_PORT | `int` | `false` | None | No description provided. |\n| REDIS_DB | `string` | `false` | None | No description provided. |\n| REDIS_PASSWORD | `string` | `false` | None | No description provided. |\n\n``` shell\noms run increment \\ \n    -a key='*****' \\ \n    -a by='*****' \\ \n    -e REDIS_HOST=$REDIS_HOST \\ \n    -e REDIS_PORT=$REDIS_PORT \\ \n    -e REDIS_DB=$REDIS_DB \\ \n    -e REDIS_PASSWORD=$REDIS_PASSWORD\n```\n\n##### decrement\n\n> Decrements a number stored at 'key'.\n##### Action Arguments\n\n| Argument Name | Type | Required | Default | Description |\n|:------------- |:---- |:-------- |:--------|:----------- |\n| key | `string` | `true` | None | No description provided. |\n| by | `int` | `false` | None | No description provided. |\n| REDIS_HOST | `string` | `false` | None | No description provided. |\n| REDIS_PORT | `int` | `false` | None | No description provided. |\n| REDIS_DB | `string` | `false` | None | No description provided. |\n| REDIS_PASSWORD | `string` | `false` | None | No description provided. |\n\n``` shell\noms run decrement \\ \n    -a key='*****' \\ \n    -a by='*****' \\ \n    -e REDIS_HOST=$REDIS_HOST \\ \n    -e REDIS_PORT=$REDIS_PORT \\ \n    -e REDIS_DB=$REDIS_DB \\ \n    -e REDIS_PASSWORD=$REDIS_PASSWORD\n```\n\n##### append\n\n> Appends 'value' to a 'key'.\n##### Action Arguments\n\n| Argument Name | Type | Required | Default | Description |\n|:------------- |:---- |:-------- |:--------|:----------- |\n| key | `string` | `true` | None | No description provided. |\n| value | `any` | `true` | None | No description provided. |\n| REDIS_HOST | `string` | `false` | None | No description provided. |\n| REDIS_PORT | `int` | `false` | None | No description provided. |\n| REDIS_DB | `string` | `false` | None | No description provided. |\n| REDIS_PASSWORD | `string` | `false` | None | No description provided. |\n\n``` shell\noms run append \\ \n    -a key='*****' \\ \n    -a value='*****' \\ \n    -e REDIS_HOST=$REDIS_HOST \\ \n    -e REDIS_PORT=$REDIS_PORT \\ \n    -e REDIS_DB=$REDIS_DB \\ \n    -e REDIS_PASSWORD=$REDIS_PASSWORD\n```\n\n##### getSet\n\n> Returns the current value of 'key' and overwrites it with 'value'.\n##### Action Arguments\n\n| Argument Name | Type | Required | Default | Description |\n|:------------- |:---- |:-------- |:--------|:----------- |\n| key | `string` | `true` | None | No description provided. |\n| value | `any` | `true` | None | No description provided. |\n| REDIS_HOST | `string` | `false` | None | No description provided. |\n| REDIS_PORT | `int` | `false` | None | No description provided. |\n| REDIS_DB | `string` | `false` | None | No description provided. |\n| REDIS_PASSWORD | `string` | `false` | None | No description provided. |\n\n``` shell\noms run getSet \\ \n    -a key='*****' \\ \n    -a value='*****' \\ \n    -e REDIS_HOST=$REDIS_HOST \\ \n    -e REDIS_PORT=$REDIS_PORT \\ \n    -e REDIS_DB=$REDIS_DB \\ \n    -e REDIS_PASSWORD=$REDIS_PASSWORD\n```\n\n##### setnx\n\n> Set a 'key' to 'value' only if the key does not exist yet.\n##### Action Arguments\n\n| Argument Name | Type | Required | Default | Description |\n|:------------- |:---- |:-------- |:--------|:----------- |\n| key | `string` | `true` | None | No description provided. |\n| value | `any` | `true` | None | No description provided. |\n| REDIS_HOST | `string` | `false` | None | No description provided. |\n| REDIS_PORT | `int` | `false` | None | No description provided. |\n| REDIS_DB | `string` | `false` | None | No description provided. |\n| REDIS_PASSWORD | `string` | `false` | None | No description provided. |\n\n``` shell\noms run setnx \\ \n    -a key='*****' \\ \n    -a value='*****' \\ \n    -e REDIS_HOST=$REDIS_HOST \\ \n    -e REDIS_PORT=$REDIS_PORT \\ \n    -e REDIS_DB=$REDIS_DB \\ \n    -e REDIS_PASSWORD=$REDIS_PASSWORD\n```\n\n##### mset\n\n> Sets multiple 'key'/'value' pairs simultaneously.\n##### Action Arguments\n\n| Argument Name | Type | Required | Default | Description |\n|:------------- |:---- |:-------- |:--------|:----------- |\n| pairs | `map` | `false` | None | No description provided. |\n| REDIS_HOST | `string` | `false` | None | No description provided. |\n| REDIS_PORT | `int` | `false` | None | No description provided. |\n| REDIS_DB | `string` | `false` | None | No description provided. |\n| REDIS_PASSWORD | `string` | `false` | None | No description provided. |\n\n``` shell\noms run mset \\ \n    -a pairs='*****' \\ \n    -e REDIS_HOST=$REDIS_HOST \\ \n    -e REDIS_PORT=$REDIS_PORT \\ \n    -e REDIS_DB=$REDIS_DB \\ \n    -e REDIS_PASSWORD=$REDIS_PASSWORD\n```\n\n##### msetnx\n\n> Sets multiple 'key'/'value' pairs simultaneously.\nOnly non-existing keys will be set.\n\n##### Action Arguments\n\n| Argument Name | Type | Required | Default | Description |\n|:------------- |:---- |:-------- |:--------|:----------- |\n| pairs | `map` | `false` | None | No description provided. |\n| REDIS_HOST | `string` | `false` | None | No description provided. |\n| REDIS_PORT | `int` | `false` | None | No description provided. |\n| REDIS_DB | `string` | `false` | None | No description provided. |\n| REDIS_PASSWORD | `string` | `false` | None | No description provided. |\n\n``` shell\noms run msetnx \\ \n    -a pairs='*****' \\ \n    -e REDIS_HOST=$REDIS_HOST \\ \n    -e REDIS_PORT=$REDIS_PORT \\ \n    -e REDIS_DB=$REDIS_DB \\ \n    -e REDIS_PASSWORD=$REDIS_PASSWORD\n```\n\n##### expire\n\n> Set a timeout on a 'key'.\n##### Action Arguments\n\n| Argument Name | Type | Required | Default | Description |\n|:------------- |:---- |:-------- |:--------|:----------- |\n| key | `string` | `true` | None | No description provided. |\n| seconds | `int` | `true` | None | No description provided. |\n| REDIS_HOST | `string` | `false` | None | No description provided. |\n| REDIS_PORT | `int` | `false` | None | No description provided. |\n| REDIS_DB | `string` | `false` | None | No description provided. |\n| REDIS_PASSWORD | `string` | `false` | None | No description provided. |\n\n``` shell\noms run expire \\ \n    -a key='*****' \\ \n    -a seconds='*****' \\ \n    -e REDIS_HOST=$REDIS_HOST \\ \n    -e REDIS_PORT=$REDIS_PORT \\ \n    -e REDIS_DB=$REDIS_DB \\ \n    -e REDIS_PASSWORD=$REDIS_PASSWORD\n```\n\n##### rpop\n\n> RPOP a key constantly, and emit the values as events\n##### Action Arguments\n\n| Argument Name | Type | Required | Default | Description |\n|:------------- |:---- |:-------- |:--------|:----------- |\n| key | `string` | `true` | None | The key to RPOP |\n| REDIS_HOST | `string` | `false` | None | No description provided. |\n| REDIS_PORT | `int` | `false` | None | No description provided. |\n| REDIS_DB | `string` | `false` | None | No description provided. |\n| REDIS_PASSWORD | `string` | `false` | None | No description provided. |\n\n``` shell\noms subscribe rpop \\ \n    -a key='*****' \\ \n    -e REDIS_HOST=$REDIS_HOST \\ \n    -e REDIS_PORT=$REDIS_PORT \\ \n    -e REDIS_DB=$REDIS_DB \\ \n    -e REDIS_PASSWORD=$REDIS_PASSWORD\n```\n,##### lpop\n\n> LPOP a key constantly, and emit the values as events\n##### Action Arguments\n\n| Argument Name | Type | Required | Default | Description |\n|:------------- |:---- |:-------- |:--------|:----------- |\n| key | `string` | `true` | None | The key to LPOP |\n| REDIS_HOST | `string` | `false` | None | No description provided. |\n| REDIS_PORT | `int` | `false` | None | No description provided. |\n| REDIS_DB | `string` | `false` | None | No description provided. |\n| REDIS_PASSWORD | `string` | `false` | None | No description provided. |\n\n``` shell\noms subscribe lpop \\ \n    -a key='*****' \\ \n    -e REDIS_HOST=$REDIS_HOST \\ \n    -e REDIS_PORT=$REDIS_PORT \\ \n    -e REDIS_DB=$REDIS_DB \\ \n    -e REDIS_PASSWORD=$REDIS_PASSWORD\n```\n\n## Contributing\n\nAll suggestions in how to improve the specification and this guide are very welcome. Feel free share your thoughts in the Issue tracker, or even better, fork the repository to implement your own ideas and submit a pull request.\n\n[![Edit redis on CodeSandbox](https://codesandbox.io/static/img/play-codesandbox.svg)](https://codesandbox.io/s/github/oms-services/redis)\n\nThis project is guided by [Contributor Covenant](https://github.com/oms-services/.github/blob/master/CODE_OF_CONDUCT.md). Please read out full [Contribution Guidelines](https://github.com/oms-services/.github/blob/master/CONTRIBUTING.md).\n\n## Additional Resources\n\n* [Install the CLI](https://github.com/microservices/oms) - The OMS CLI helps developers create, test, validate, and build microservices.\n* [Example OMS Services](https://github.com/oms-services) - Examples of OMS-compliant services written in a variety of languages.\n* [Example Language Implementations](https://github.com/microservices) - Find tooling & language implementations in Node, Python, Scala, Java, Clojure.\n* [Storyscript Hub](https://hub.storyscript.io) - A public registry of OMS services.\n* [Community Chat](https://spectrum.chat/open-microservices) - Have ideas? Questions? Join us on Spectrum.\n",
        "service": {
            "alias": "redis",
            "description": "Run redis in a Story.",
            "isCertified": true,
            "name": "redis",
            "owner": {
                "username": "oms-services"
            },
            "public": true,
            "topics": [
                "microservice",
                "redis-server",
                "redis",
                "oms",
                "open-microservice"
            ]
        },
        "serviceUuid": "352885c0-2673-46e1-949e-be3c8043376f",
        "state": "BETA"
    },
    {
        "configuration": {
            "actions": {
                "parse": {
                    "arguments": {
                        "content": {
                            "in": "requestBody",
                            "required": true,
                            "type": "string"
                        }
                    },
                    "help": "Parse a JSON string. This service has it's native implementation in the Storyscript Runtime.",
                    "http": {
                        "method": "post",
                        "path": "/ignore",
                        "port": 8000
                    },
                    "output": {
                        "type": "any"
                    }
                },
                "stringify": {
                    "arguments": {
                        "content": {
                            "in": "requestBody",
                            "required": true,
                            "type": "any"
                        }
                    },
                    "help": "Convert a map or a list to it's JSON representation. This service has it's native implementation in the Storyscript Runtime.",
                    "http": {
                        "method": "post",
                        "path": "/ignore",
                        "port": 8000
                    },
                    "output": {
                        "type": "string"
                    }
                }
            },
            "info": {
                "description": "Service to parse and convert data to/from JSON",
                "license": {
                    "name": "Apache 2.0",
                    "url": "https://opensource.org/licenses/Apache-2.0"
                },
                "title": "JSON microservice",
                "version": "1.0.0"
            },
            "omg": 1
        },
        "readme": "# json\nAn internal Storyscript service to parse and convert data to JSON.\n\n## Usage\n```coffee\n# Storyscript\nres = json stringify content: {\"foo\": \"bar\"}\nres = json parse content: res\n```\n",
        "service": {
            "alias": "json",
            "description": "An internal Asyncy service to parse and convert data to JSON.",
            "isCertified": true,
            "name": "json",
            "owner": {
                "username": "oms-services"
            },
            "public": true,
            "topics": []
        },
        "serviceUuid": "4bf7ffc5-5b47-4840-b74c-f173dbba9ebe",
        "state": "BETA"
    },
    {
        "configuration": {
            "actions": {
                "parse": {
                    "arguments": {
                        "content": {
                            "in": "requestBody",
                            "required": true,
                            "type": "string"
                        }
                    },
                    "help": "Parse a JSON string. This service has it's native implementation in the Storyscript Runtime.",
                    "http": {
                        "method": "post",
                        "path": "/ignore",
                        "port": 8000
                    },
                    "output": {
                        "type": "any"
                    }
                },
                "stringify": {
                    "arguments": {
                        "content": {
                            "in": "requestBody",
                            "required": true,
                            "type": "any"
                        }
                    },
                    "help": "Convert a map or a list to it's JSON representation. This service has it's native implementation in the Storyscript Runtime.",
                    "http": {
                        "method": "post",
                        "path": "/ignore",
                        "port": 8000
                    },
                    "output": {
                        "type": "string"
                    }
                }
            },
            "info": {
                "description": "Service to parse and convert data to/from JSON",
                "license": {
                    "name": "Apache 2.0",
                    "url": "https://opensource.org/licenses/Apache-2.0"
                },
                "title": "JSON microservice",
                "version": "1.0.0"
            },
            "omg": 1
        },
        "readme": "# json\nAn internal Storyscript service to parse and convert data to JSON.\n\n## Usage\n```coffee\n# Storyscript\nres = json stringify content: {\"foo\": \"bar\"}\nres = json parse content: res\n```\n",
        "service": {
            "alias": "json",
            "description": "An internal Asyncy service to parse and convert data to JSON.",
            "isCertified": true,
            "name": "json",
            "owner": {
                "username": "oms-services"
            },
            "public": true,
            "topics": []
        },
        "serviceUuid": "4bf7ffc5-5b47-4840-b74c-f173dbba9ebe",
        "state": "BETA"
    },
    {
        "configuration": {
            "actions": {
                "info": {
                    "arguments": {
                        "url": {
                            "in": "query",
                            "required": true,
                            "type": "string"
                        }
                    },
                    "http": {
                        "method": "get",
                        "path": "/info",
                        "port": 8080
                    },
                    "output": {
                        "contentType": "application/json",
                        "type": "map"
                    }
                }
            },
            "health": {
                "http": {
                    "path": "/health",
                    "port": 8080
                }
            },
            "info": {
                "description": "Wrapper for Node package ytdl-core",
                "license": {
                    "name": "MIT",
                    "url": "https://opensource.org/licenses/MIT"
                },
                "title": "ytdl",
                "version": "1.0.0"
            },
            "lifecycle": {
                "startup": {
                    "command": [
                        "node",
                        "/app/src/index.js"
                    ]
                }
            },
            "omg": 1
        },
        "readme": "# Microservice template for NodeJS\n\n![Microservice](https://img.shields.io/badge/microservice-ready-brightgreen.svg?style=for-the-badge)\n[![Build status](https://img.shields.io/travis/com/microservices/node/master.svg?style=for-the-badge)](https://travis-ci.com/microservices/node)\n\nAn OMS template for NodeJS + ExpressJS.\n\n## Setup\n\nLatest LTS version of Node.js 10.\n[See Releases](https://nodejs.org/en/about/releases/).\n\n```sh\nyarn\n```\n\nFirst, install the [Commitizen cli](https://github.com/commitizen/cz-cli) tools:\n\n```shell\nnpm install commitizen -g\n```\n\nNext, initialize your project to use the `cz-conventional-changelog` adapter by\ntyping\n\n```sh\ncommitizen init cz-conventional-changelog --yarn --dev --exact\n```\n\nUse the following to replace `git commit`:\n\n```sh\nyarn run commit\n```\n\n## Test\n\n## OMS Test Runner\n\n```sh\noms run info -a url=https://www.youtube.com/watch?v=02dbxYYcE1c\n```\n",
        "service": {
            "alias": null,
            "description": "Open Microservice implementation of YTDL.",
            "isCertified": false,
            "name": "oms-ytdl",
            "owner": {
                "username": "matthewhudson"
            },
            "public": true,
            "topics": [
                "ytdl",
                "youtube",
                "video"
            ]
        },
        "serviceUuid": "b22bf8bf-5a40-421d-9187-29e6d1912b45",
        "state": "BETA"
    },
    {
        "configuration": {
            "actions": {
                "find": {
                    "arguments": {
                        "coll": {
                            "in": "requestBody",
                            "required": true,
                            "type": "string"
                        },
                        "db": {
                            "in": "requestBody",
                            "required": true,
                            "type": "string"
                        },
                        "fields": {
                            "in": "requestBody",
                            "type": "map"
                        },
                        "query": {
                            "in": "requestBody",
                            "required": true,
                            "type": "map"
                        },
                        "sort": {
                            "in": "requestBody",
                            "type": "map"
                        }
                    },
                    "http": {
                        "method": "post",
                        "path": "/find",
                        "port": 8000
                    },
                    "output": {
                        "contentType": "application/json",
                        "type": "list"
                    }
                },
                "findOne": {
                    "arguments": {
                        "coll": {
                            "in": "requestBody",
                            "required": true,
                            "type": "string"
                        },
                        "db": {
                            "in": "requestBody",
                            "required": true,
                            "type": "string"
                        },
                        "fields": {
                            "in": "requestBody",
                            "type": "map"
                        },
                        "query": {
                            "in": "requestBody",
                            "required": true,
                            "type": "map"
                        },
                        "sort": {
                            "in": "requestBody",
                            "type": "map"
                        }
                    },
                    "http": {
                        "method": "post",
                        "path": "/findOne",
                        "port": 8000
                    },
                    "output": {
                        "contentType": "application/json",
                        "type": "map"
                    }
                },
                "insert": {
                    "arguments": {
                        "coll": {
                            "in": "requestBody",
                            "required": true,
                            "type": "string"
                        },
                        "db": {
                            "in": "requestBody",
                            "required": true,
                            "type": "string"
                        },
                        "doc": {
                            "in": "requestBody",
                            "required": true,
                            "type": "map"
                        }
                    },
                    "http": {
                        "method": "post",
                        "path": "/insert",
                        "port": 8000
                    },
                    "output": {
                        "contentType": "application/json",
                        "properties": {
                            "_id": {
                                "type": "any"
                            }
                        },
                        "type": "object"
                    }
                }
            },
            "environment": {
                "MONGODB_URI": {
                    "help": "The MongoDB URI to be used in the connection.\nDefaults to mongodb://localhost:27017/.\n",
                    "type": "string"
                }
            },
            "info": {
                "description": "This is a mongodb service",
                "title": "MongoDB",
                "version": "1.0.0"
            },
            "lifecycle": {
                "startup": {
                    "command": [
                        "python",
                        "/app/app.py"
                    ]
                }
            },
            "omg": 1
        },
        "readme": "# _MongoDB_ Open Microservice\n\n> This is a mongodb service\n\n[![Open Microservice Specification Version](https://img.shields.io/badge/Open%20Microservice-1.0-477bf3.svg)](https://openmicroservices.org) [![Open Microservices Spectrum Chat](https://withspectrum.github.io/badge/badge.svg)](https://spectrum.chat/open-microservices) [![Open Microservices Code of Conduct](https://img.shields.io/badge/Contributor%20Covenant-v1.4%20adopted-ff69b4.svg)](https://github.com/oms-services/.github/blob/master/CODE_OF_CONDUCT.md) [![Open Microservices Commitzen](https://img.shields.io/badge/commitizen-friendly-brightgreen.svg)](http://commitizen.github.io/cz-cli/) [![PRs Welcome](https://img.shields.io/badge/PRs-welcome-brightgreen.svg)](http://makeapullrequest.com)\n\n## Introduction\n\nThis project is an example implementation of the [Open Microservice Specification](https://openmicroservices.org), a standard originally created at [Storyscript](https://storyscript.io) for building highly-portable \"microservices\" that expose the events, actions, and APIs inside containerized software.\n\n## Getting Started\n\nThe `oms` command-line interface allows you to interact with Open Microservices. If you're interested in creating an Open Microservice the CLI also helps validate, test, and debug your `oms.yml` implementation!\n\nSee the [oms-cli](https://github.com/microservices/oms) project to learn more!\n\n### Installation\n\n```\nnpm install -g @microservices/oms\n```\n\n## Usage\n\n### Open Microservices CLI Usage\n\nOnce you have the [oms-cli](https://github.com/microservices/oms) installed, you can run any of the following commands from within this project's root directory:\n\n#### Actions\n\n##### find\n\n> \n##### Action Arguments\n\n| Argument Name | Type | Required | Default | Description |\n|:------------- |:---- |:-------- |:--------|:----------- |\n| db | `string` | `true` | None | No description provided. |\n| coll | `string` | `true` | None | No description provided. |\n| query | `map` | `true` | None | No description provided. |\n| sort | `map` | `false` | None | No description provided. |\n| fields | `map` | `false` | None | No description provided. |\n| MONGODB_URI | `string` | `false` | None | The MongoDB URI to be used in the connection. Defaults to mongodb://localhost:27017/.  |\n\n``` shell\noms run find \\ \n    -a db='*****' \\ \n    -a coll='*****' \\ \n    -a query='*****' \\ \n    -a sort='*****' \\ \n    -a fields='*****' \\ \n    -e MONGODB_URI=$MONGODB_URI\n```\n\n##### findOne\n\n> \n##### Action Arguments\n\n| Argument Name | Type | Required | Default | Description |\n|:------------- |:---- |:-------- |:--------|:----------- |\n| db | `string` | `true` | None | No description provided. |\n| coll | `string` | `true` | None | No description provided. |\n| query | `map` | `true` | None | No description provided. |\n| sort | `map` | `false` | None | No description provided. |\n| fields | `map` | `false` | None | No description provided. |\n| MONGODB_URI | `string` | `false` | None | The MongoDB URI to be used in the connection. Defaults to mongodb://localhost:27017/.  |\n\n``` shell\noms run findOne \\ \n    -a db='*****' \\ \n    -a coll='*****' \\ \n    -a query='*****' \\ \n    -a sort='*****' \\ \n    -a fields='*****' \\ \n    -e MONGODB_URI=$MONGODB_URI\n```\n\n##### insert\n\n> \n##### Action Arguments\n\n| Argument Name | Type | Required | Default | Description |\n|:------------- |:---- |:-------- |:--------|:----------- |\n| db | `string` | `true` | None | No description provided. |\n| coll | `string` | `true` | None | No description provided. |\n| doc | `map` | `true` | None | No description provided. |\n| MONGODB_URI | `string` | `false` | None | The MongoDB URI to be used in the connection. Defaults to mongodb://localhost:27017/.  |\n\n``` shell\noms run insert \\ \n    -a db='*****' \\ \n    -a coll='*****' \\ \n    -a doc='*****' \\ \n    -e MONGODB_URI=$MONGODB_URI\n```\n\n## Contributing\n\nAll suggestions in how to improve the specification and this guide are very welcome. Feel free share your thoughts in the Issue tracker, or even better, fork the repository to implement your own ideas and submit a pull request.\n\n[![Edit mongodb on CodeSandbox](https://codesandbox.io/static/img/play-codesandbox.svg)](https://codesandbox.io/s/github/oms-services/mongodb)\n\nThis project is guided by [Contributor Covenant](https://github.com/oms-services/.github/blob/master/CODE_OF_CONDUCT.md). Please read out full [Contribution Guidelines](https://github.com/oms-services/.github/blob/master/CONTRIBUTING.md).\n\n## Additional Resources\n\n* [Install the CLI](https://github.com/microservices/oms) - The OMS CLI helps developers create, test, validate, and build microservices.\n* [Example OMS Services](https://github.com/oms-services) - Examples of OMS-compliant services written in a variety of languages.\n* [Example Language Implementations](https://github.com/microservices) - Find tooling & language implementations in Node, Python, Scala, Java, Clojure.\n* [Storyscript Hub](https://hub.storyscript.io) - A public registry of OMS services.\n* [Community Chat](https://spectrum.chat/open-microservices) - Have ideas? Questions? Join us on Spectrum.\n",
        "service": {
            "alias": "mongodb",
            "description": "An OMG service to connect to a MongoDB instance",
            "isCertified": true,
            "name": "mongodb",
            "owner": {
                "username": "oms-services"
            },
            "public": true,
            "topics": [
                "mongodb",
                "microservice",
                "open-microservice"
            ]
        },
        "serviceUuid": "8ad0cd7c-a549-4532-a325-7de0cd7e5a16",
        "state": "BETA"
    },
    {
        "configuration": {
            "actions": {
                "find": {
                    "arguments": {
                        "coll": {
                            "in": "requestBody",
                            "required": true,
                            "type": "string"
                        },
                        "db": {
                            "in": "requestBody",
                            "required": true,
                            "type": "string"
                        },
                        "fields": {
                            "in": "requestBody",
                            "type": "map"
                        },
                        "query": {
                            "in": "requestBody",
                            "required": true,
                            "type": "map"
                        },
                        "sort": {
                            "in": "requestBody",
                            "type": "map"
                        }
                    },
                    "http": {
                        "method": "post",
                        "path": "/find",
                        "port": 8000
                    },
                    "output": {
                        "contentType": "application/json",
                        "type": "list"
                    }
                },
                "findOne": {
                    "arguments": {
                        "coll": {
                            "in": "requestBody",
                            "required": true,
                            "type": "string"
                        },
                        "db": {
                            "in": "requestBody",
                            "required": true,
                            "type": "string"
                        },
                        "fields": {
                            "in": "requestBody",
                            "type": "map"
                        },
                        "query": {
                            "in": "requestBody",
                            "required": true,
                            "type": "map"
                        },
                        "sort": {
                            "in": "requestBody",
                            "type": "map"
                        }
                    },
                    "http": {
                        "method": "post",
                        "path": "/findOne",
                        "port": 8000
                    },
                    "output": {
                        "contentType": "application/json",
                        "type": "map"
                    }
                },
                "insert": {
                    "arguments": {
                        "coll": {
                            "in": "requestBody",
                            "required": true,
                            "type": "string"
                        },
                        "db": {
                            "in": "requestBody",
                            "required": true,
                            "type": "string"
                        },
                        "doc": {
                            "in": "requestBody",
                            "required": true,
                            "type": "map"
                        }
                    },
                    "http": {
                        "method": "post",
                        "path": "/insert",
                        "port": 8000
                    },
                    "output": {
                        "contentType": "application/json",
                        "properties": {
                            "_id": {
                                "type": "any"
                            }
                        },
                        "type": "object"
                    }
                }
            },
            "environment": {
                "MONGODB_URI": {
                    "help": "The MongoDB URI to be used in the connection.\nDefaults to mongodb://localhost:27017/.\n",
                    "type": "string"
                }
            },
            "info": {
                "description": "This is a mongodb service",
                "title": "MongoDB",
                "version": "1.0.0"
            },
            "lifecycle": {
                "startup": {
                    "command": [
                        "python",
                        "/app/app.py"
                    ]
                }
            },
            "omg": 1
        },
        "readme": "# _MongoDB_ Open Microservice\n\n> This is a mongodb service\n\n[![Open Microservice Specification Version](https://img.shields.io/badge/Open%20Microservice-1.0-477bf3.svg)](https://openmicroservices.org) [![Open Microservices Spectrum Chat](https://withspectrum.github.io/badge/badge.svg)](https://spectrum.chat/open-microservices) [![Open Microservices Code of Conduct](https://img.shields.io/badge/Contributor%20Covenant-v1.4%20adopted-ff69b4.svg)](https://github.com/oms-services/.github/blob/master/CODE_OF_CONDUCT.md) [![Open Microservices Commitzen](https://img.shields.io/badge/commitizen-friendly-brightgreen.svg)](http://commitizen.github.io/cz-cli/) [![PRs Welcome](https://img.shields.io/badge/PRs-welcome-brightgreen.svg)](http://makeapullrequest.com)\n\n## Introduction\n\nThis project is an example implementation of the [Open Microservice Specification](https://openmicroservices.org), a standard originally created at [Storyscript](https://storyscript.io) for building highly-portable \"microservices\" that expose the events, actions, and APIs inside containerized software.\n\n## Getting Started\n\nThe `oms` command-line interface allows you to interact with Open Microservices. If you're interested in creating an Open Microservice the CLI also helps validate, test, and debug your `oms.yml` implementation!\n\nSee the [oms-cli](https://github.com/microservices/oms) project to learn more!\n\n### Installation\n\n```\nnpm install -g @microservices/oms\n```\n\n## Usage\n\n### Open Microservices CLI Usage\n\nOnce you have the [oms-cli](https://github.com/microservices/oms) installed, you can run any of the following commands from within this project's root directory:\n\n#### Actions\n\n##### find\n\n> \n##### Action Arguments\n\n| Argument Name | Type | Required | Default | Description |\n|:------------- |:---- |:-------- |:--------|:----------- |\n| db | `string` | `true` | None | No description provided. |\n| coll | `string` | `true` | None | No description provided. |\n| query | `map` | `true` | None | No description provided. |\n| sort | `map` | `false` | None | No description provided. |\n| fields | `map` | `false` | None | No description provided. |\n| MONGODB_URI | `string` | `false` | None | The MongoDB URI to be used in the connection. Defaults to mongodb://localhost:27017/.  |\n\n``` shell\noms run find \\ \n    -a db='*****' \\ \n    -a coll='*****' \\ \n    -a query='*****' \\ \n    -a sort='*****' \\ \n    -a fields='*****' \\ \n    -e MONGODB_URI=$MONGODB_URI\n```\n\n##### findOne\n\n> \n##### Action Arguments\n\n| Argument Name | Type | Required | Default | Description |\n|:------------- |:---- |:-------- |:--------|:----------- |\n| db | `string` | `true` | None | No description provided. |\n| coll | `string` | `true` | None | No description provided. |\n| query | `map` | `true` | None | No description provided. |\n| sort | `map` | `false` | None | No description provided. |\n| fields | `map` | `false` | None | No description provided. |\n| MONGODB_URI | `string` | `false` | None | The MongoDB URI to be used in the connection. Defaults to mongodb://localhost:27017/.  |\n\n``` shell\noms run findOne \\ \n    -a db='*****' \\ \n    -a coll='*****' \\ \n    -a query='*****' \\ \n    -a sort='*****' \\ \n    -a fields='*****' \\ \n    -e MONGODB_URI=$MONGODB_URI\n```\n\n##### insert\n\n> \n##### Action Arguments\n\n| Argument Name | Type | Required | Default | Description |\n|:------------- |:---- |:-------- |:--------|:----------- |\n| db | `string` | `true` | None | No description provided. |\n| coll | `string` | `true` | None | No description provided. |\n| doc | `map` | `true` | None | No description provided. |\n| MONGODB_URI | `string` | `false` | None | The MongoDB URI to be used in the connection. Defaults to mongodb://localhost:27017/.  |\n\n``` shell\noms run insert \\ \n    -a db='*****' \\ \n    -a coll='*****' \\ \n    -a doc='*****' \\ \n    -e MONGODB_URI=$MONGODB_URI\n```\n\n## Contributing\n\nAll suggestions in how to improve the specification and this guide are very welcome. Feel free share your thoughts in the Issue tracker, or even better, fork the repository to implement your own ideas and submit a pull request.\n\n[![Edit mongodb on CodeSandbox](https://codesandbox.io/static/img/play-codesandbox.svg)](https://codesandbox.io/s/github/oms-services/mongodb)\n\nThis project is guided by [Contributor Covenant](https://github.com/oms-services/.github/blob/master/CODE_OF_CONDUCT.md). Please read out full [Contribution Guidelines](https://github.com/oms-services/.github/blob/master/CONTRIBUTING.md).\n\n## Additional Resources\n\n* [Install the CLI](https://github.com/microservices/oms) - The OMS CLI helps developers create, test, validate, and build microservices.\n* [Example OMS Services](https://github.com/oms-services) - Examples of OMS-compliant services written in a variety of languages.\n* [Example Language Implementations](https://github.com/microservices) - Find tooling & language implementations in Node, Python, Scala, Java, Clojure.\n* [Storyscript Hub](https://hub.storyscript.io) - A public registry of OMS services.\n* [Community Chat](https://spectrum.chat/open-microservices) - Have ideas? Questions? Join us on Spectrum.\n",
        "service": {
            "alias": "mongodb",
            "description": "An OMG service to connect to a MongoDB instance",
            "isCertified": true,
            "name": "mongodb",
            "owner": {
                "username": "oms-services"
            },
            "public": true,
            "topics": [
                "mongodb",
                "microservice",
                "open-microservice"
            ]
        },
        "serviceUuid": "8ad0cd7c-a549-4532-a325-7de0cd7e5a16",
        "state": "BETA"
    },
    {
        "configuration": {
            "actions": {
                "generate": {
                    "arguments": {
                        "secret": {
                            "in": "query",
                            "required": true,
                            "type": "string"
                        }
                    },
                    "help": "Generate TOTP token with secret",
                    "http": {
                        "method": "get",
                        "path": "/generate",
                        "port": 5001
                    },
                    "output": {
                        "type": "string"
                    }
                }
            },
            "health": {
                "http": {
                    "path": "/health",
                    "port": 5001
                }
            },
            "info": {
                "contact": {
                    "name": "Aurelien ARINO",
                    "url": "https://github.com/Arinono/otp"
                },
                "description": "OTP Generator",
                "license": {
                    "name": "MIT",
                    "url": "https://opensource.org/licenses/MIT"
                },
                "title": "OTP Generator",
                "version": "0.0.1"
            },
            "lifecycle": {
                "startup": {
                    "command": [
                        "node",
                        "index.js"
                    ]
                }
            },
            "omg": 1
        },
        "readme": "# otp\n",
        "service": {
            "alias": null,
            "description": "OMS microservice OTP generator",
            "isCertified": false,
            "name": "otp",
            "owner": {
                "username": "Arinono"
            },
            "public": true,
            "topics": [
                "otp",
                "totp"
            ]
        },
        "serviceUuid": "2f5e00b6-01b0-4902-99fa-631307ea7b9e",
        "state": "BETA"
    },
    {
        "configuration": {
            "actions": {
                "parse": {
                    "arguments": {
                        "template": {
                            "in": "requestBody",
                            "required": true,
                            "type": "string"
                        }
                    },
                    "http": {
                        "method": "post",
                        "path": "/parse",
                        "port": 8080
                    },
                    "output": {
                        "contentType": "text/plain",
                        "type": "string"
                    }
                }
            },
            "health": {
                "http": {
                    "path": "/health",
                    "port": 8080
                }
            },
            "info": {
                "description": "Pug on rust",
                "license": {
                    "name": "MIT",
                    "url": "https://opensource.org/licenses/MIT"
                },
                "title": "pugrs",
                "version": "1.0.0"
            },
            "lifecycle": {
                "startup": {
                    "command": [
                        "/app"
                    ]
                }
            },
            "omg": 1
        },
        "readme": "# pugrs",
        "service": {
            "alias": null,
            "description": "",
            "isCertified": false,
            "name": "pugrs",
            "owner": {
                "username": "Vesuvium"
            },
            "public": true,
            "topics": [
                "template-engine",
                "pug"
            ]
        },
        "serviceUuid": "7005f22b-a28a-43ce-ad6f-8b3a686ce4ae",
        "state": "BETA"
    },
    {
        "configuration": {
            "actions": {
                "scrape": {
                    "arguments": {
                        "session": {
                            "help": "Any random integer. Allows you to continue using the same proxy for each request with that session number. Send a new integer to create a new session.",
                            "in": "requestBody",
                            "required": false,
                            "type": "string"
                        },
                        "url": {
                            "help": "The target URL to scrape.",
                            "in": "requestBody",
                            "required": true,
                            "type": "string"
                        }
                    },
                    "help": "Retrieve the fully rendered HTML content via Scraper API.",
                    "http": {
                        "method": "post",
                        "path": "/scrape-url-html",
                        "port": 8080
                    },
                    "output": {
                        "contentType": "application/json",
                        "type": "map"
                    }
                }
            },
            "environment": {
                "SCRAPER_API_KEY": {
                    "help": "API Key provided by ScraperAPI",
                    "required": true,
                    "type": "string"
                },
                "SCRAPER_API_ORIGIN": {
                    "default": "http://api.scraperapi.com",
                    "help": "API URL provided by ScraperAPI",
                    "type": "string"
                }
            },
            "health": {
                "http": {
                    "path": "/health",
                    "port": 8080
                }
            },
            "info": {
                "description": "Retrieve the fully rendered HTML content via Scraper API.",
                "license": {
                    "name": "MIT",
                    "url": "https://opensource.org/licenses/MIT"
                },
                "title": "Scrape URL HTML",
                "version": "1.0.0"
            },
            "lifecycle": {
                "startup": {
                    "command": [
                        "node",
                        "/app/src/index.js"
                    ]
                }
            },
            "oms": 1
        },
        "readme": "# Microservice template for NodeJS\n\n![Microservice](https://img.shields.io/badge/microservice-ready-brightgreen.svg?style=for-the-badge)\n[![Build status](https://img.shields.io/travis/com/microservices/node/master.svg?style=for-the-badge)](https://travis-ci.com/microservices/node)\n\nAn OMS template for NodeJS + ExpressJS.\n\n## Setup\n\nMakLatest LTS version of Node.js 10.\n[See Releases](https://nodejs.org/en/about/releases/).\n\n```sh\nnpm i\n```\n\nFirst, install the [Commitizen cli](https://github.com/commitizen/cz-cli) tools:\n\n```shell\nnpm install commitizen -g\n```\n\nNext, initialize your project to use the `cz-conventional-changelog` adapter by\ntyping\n\n```sh\ncommitizen init cz-conventional-changelog --yarn --dev --exact\n```\n\nUse the following to replace `git commit`:\n\n```sh\nnpm run commit\n```\n\n## Example Usage\n\nCall the service from your terminal:\n\n``` sh\noms run scrape \\\n  -a url=https://httpbin.org/html \\\n  -e SCRAPER_API_ORIGIN=http://api.scraperapi.com \\\n  -e SCRAPER_API_KEY=XXXXXXXXXXXXXXXXXXXXX\n```\n\nAnd you should see output that looks like the following:\n\n```\n\u2139 Building Docker image\n\u2026\n\u2714 Built Docker image with name: oms/matthewhudson/oms-scrape-url-html\n\u2714 Started Docker container: 1c8a91688261\n\u2714 Health check passed\n\u2714 Ran action: `scrape` with output: ...\n\u2714 Stopped Docker container: 1c8a91688261\n```\n",
        "service": {
            "alias": null,
            "description": "An OMS service to scrape HTML from a URL.",
            "isCertified": false,
            "name": "oms-scrape-url-html",
            "owner": {
                "username": "matthewhudson"
            },
            "public": true,
            "topics": [
                "microservice",
                "nodejs",
                "oms",
                "open-microservice"
            ]
        },
        "serviceUuid": "669752e0-487e-4022-83b8-d6bf9cd238ce",
        "state": "BETA"
    },
    {
        "configuration": {
            "actions": {
                "remove": {
                    "arguments": {
                        "url": {
                            "in": "requestBody",
                            "required": true,
                            "type": "string"
                        }
                    },
                    "help": "Removes the background of the provided image (via URL)",
                    "http": {
                        "method": "post",
                        "path": "/remove",
                        "port": 5000
                    },
                    "output": {
                        "type": "any"
                    }
                }
            },
            "environment": {
                "AWS_ACCESS_KEY_ID": {
                    "type": "string"
                },
                "AWS_REGION": {
                    "type": "string"
                },
                "AWS_SECRET_ACCESS_KEY": {
                    "type": "string"
                },
                "REMOVE_BG_API_KEY": {
                    "required": true,
                    "type": "string"
                },
                "S3_BUCKET": {
                    "type": "string"
                },
                "S3_DIRECTORY": {
                    "type": "string"
                }
            },
            "health": {
                "http": {
                    "path": "/health",
                    "port": 5000
                }
            },
            "info": {
                "description": "Removes backgrounds from images",
                "license": {
                    "name": "Apache 2.0",
                    "url": "https://opensource.org/licenses/Apache-2.0"
                },
                "title": "Remove Background",
                "version": "1.0.0"
            },
            "lifecycle": {
                "startup": {
                    "command": [
                        "node",
                        "/app/src/index.js"
                    ]
                }
            },
            "omg": 1
        },
        "readme": "# Microservice template for NodeJS\n\n![Microservice](https://img.shields.io/badge/microservice-ready-brightgreen.svg?style=for-the-badge)\n[![Build status](https://img.shields.io/travis/com/microservices/node/master.svg?style=for-the-badge)](https://travis-ci.com/microservices/node)\n\nAn OMG template for NodeJS.\n\nUsage\n-----\n\n```coffee\n# Storyscript\nyour_service remove url: 'url-image.png'\n# Returns the image without its background\n```\n\nTest\n----\n\n```sh\n> omg run remove -a url=\"image-url.png\"\n\u2139 Building Docker image\n\u2026\n\u2714 Built Docker image with name: omg/l2hvbwuvc2vil2fzew5jes9ydwj5\n\u2714 Started Docker container: 1c8a91688261\n\u2714 Health check passed\n\u2714 Ran action: `remove` with output: ...\n\u2714 Stopped Docker container: 1c8a91688261\n```\n",
        "service": {
            "alias": null,
            "description": "Removes an image background",
            "isCertified": false,
            "name": "remove-bg",
            "owner": {
                "username": "Arinono"
            },
            "public": true,
            "topics": [
                "omg",
                "microservice",
                "image",
                "remove.bg",
                "png"
            ]
        },
        "serviceUuid": "ac02686b-11f9-47d0-9a14-7bba190b1e58",
        "state": "BETA"
    },
    {
        "configuration": {
            "actions": {
                "list": {
                    "arguments": {
                        "baseId": {
                            "in": "query",
                            "required": true,
                            "type": "string"
                        },
                        "fields": {
                            "help": "Only data for fields whose names are in this list will be included in the result. If you don't need every field, you can use this parameter to reduce the amount of data transferred.",
                            "in": "query",
                            "list": {
                                "elements": {
                                    "type": "string"
                                }
                            },
                            "required": false,
                            "type": "list"
                        },
                        "maxRecords": {
                            "default": 200,
                            "help": "The maximum total number of records that will be returned in your request.",
                            "in": "query",
                            "required": false,
                            "type": "int"
                        },
                        "tableName": {
                            "in": "query",
                            "required": true,
                            "type": "string"
                        },
                        "view": {
                            "default": "Grid view",
                            "in": "query",
                            "required": false,
                            "type": "string"
                        }
                    },
                    "help": "List records in a table.",
                    "http": {
                        "method": "get",
                        "path": "/list",
                        "port": 8080
                    },
                    "output": {
                        "contentType": "application/json",
                        "type": "map"
                    }
                }
            },
            "environment": {
                "AIRTABLE_API_KEY": {
                    "help": "API Key provided by Airtable",
                    "required": true,
                    "type": "string"
                }
            },
            "health": {
                "http": {
                    "path": "/health",
                    "port": 8080
                }
            },
            "info": {
                "description": "An Open Microservice wrapper for the Airtable API.",
                "license": {
                    "name": "MIT",
                    "url": "https://opensource.org/licenses/MIT"
                },
                "title": "Airtable",
                "version": "1.0.0"
            },
            "lifecycle": {
                "startup": {
                    "command": [
                        "node",
                        "/app/src/index.js"
                    ]
                }
            },
            "oms": 1
        },
        "readme": "# _Airtable_ Open Microservice\n\n> An Open Microservice wrapper for the Airtable API.\n\n[![Open Microservice Specification Version](https://img.shields.io/badge/Open%20Microservice-1.0-477bf3.svg)](https://openmicroservices.org) [![Open Microservices Spectrum Chat](https://withspectrum.github.io/badge/badge.svg)](https://spectrum.chat/open-microservices) [![Open Microservices Code of Conduct](https://img.shields.io/badge/Contributor%20Covenant-v1.4%20adopted-ff69b4.svg)](https://github.com/oms-services/.github/blob/master/CODE_OF_CONDUCT.md) [![Open Microservices Commitzen](https://img.shields.io/badge/commitizen-friendly-brightgreen.svg)](http://commitizen.github.io/cz-cli/) [![PRs Welcome](https://img.shields.io/badge/PRs-welcome-brightgreen.svg)](http://makeapullrequest.com)\n[![License: MIT](https://img.shields.io/badge/License-MIT-blue.svg)](https://opensource.org/licenses/MIT)\n\n## Introduction\n\nThis project is an example implementation of the [Open Microservice Specification](https://openmicroservices.org), a standard originally created at [Storyscript](https://storyscript.io) for building highly-portable \"microservices\" that expose the events, actions, and APIs inside containerized software.\n\n## Getting Started\n\nThe `oms` command-line interface allows you to interact with Open Microservices. If you're interested in creating an Open Microservice the CLI also helps validate, test, and debug your `oms.yml` implementation!\n\nSee the [oms-cli](https://github.com/microservices/oms) project to learn more!\n\n### Installation\n\n```\nnpm install -g @microservices/oms\n```\n\n## Usage\n\n### Open Microservices CLI Usage\n\nOnce you have the [oms-cli](https://github.com/microservices/oms) installed, you can run any of the following commands from within this project's root directory:\n\n#### Actions\n\n##### list\n\n> List records in a table.\n\n##### Action Arguments\n\n| Argument Name    | Type     | Required | Default | Description                                                                                                                                                                           |\n| :--------------- | :------- | :------- | :------ | :------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |\n| baseId           | `string` | `true`   | None    | No description provided.                                                                                                                                                              |\n| tableName        | `string` | `true`   | None    | No description provided.                                                                                                                                                              |\n| view             | `string` | `false`  | None    | No description provided.                                                                                                                                                              |\n| fields           | `list`   | `false`  | None    | Only data for fields whose names are in this list will be included in the result. If you don't need every field, you can use this parameter to reduce the amount of data transferred. |\n| maxRecords       | `int`    | `false`  | None    | The maximum total number of records that will be returned in your request.                                                                                                            |\n| AIRTABLE_API_KEY | `string` | `true`   | None    | API Key provided by Airtable                                                                                                                                                          |\n\n```shell\noms run list \\\n    -a baseId='*****' \\\n    -a tableName='*****' \\\n    -a view='*****' \\\n    -a fields='*****' \\\n    -a maxRecords='*****' \\\n    -e AIRTABLE_API_KEY=$AIRTABLE_API_KEY\n```\n\n## Contributing\n\nAll suggestions in how to improve the specification and this guide are very welcome. Feel free share your thoughts in the Issue tracker, or even better, fork the repository to implement your own ideas and submit a pull request.\n\n[![Edit oms-airtable on CodeSandbox](https://codesandbox.io/static/img/play-codesandbox.svg)](https://codesandbox.io/s/github/oms-services/oms-airtable)\n\nThis project is guided by [Contributor Covenant](https://github.com/oms-services/.github/blob/master/CODE_OF_CONDUCT.md). Please read out full [Contribution Guidelines](https://github.com/oms-services/.github/blob/master/CONTRIBUTING.md).\n\n## Additional Resources\n\n- [Install the CLI](https://github.com/microservices/oms) - The OMS CLI helps developers create, test, validate, and build microservices.\n- [Example OMS Services](https://github.com/oms-services) - Examples of OMS-compliant services written in a variety of languages.\n- [Example Language Implementations](https://github.com/microservices) - Find tooling & language implementations in Node, Python, Scala, Java, Clojure.\n- [Storyscript Hub](https://hub.storyscript.io) - A public registry of OMS services.\n- [Community Chat](https://spectrum.chat/open-microservices) - Have ideas? Questions? Join us on Spectrum.\n",
        "service": {
            "alias": null,
            "description": "An Open Microservice wrapper for the Airtable API.",
            "isCertified": false,
            "name": "oms-airtable",
            "owner": {
                "username": "matthewhudson"
            },
            "public": true,
            "topics": [
                "airtable",
                "spreadsheet"
            ]
        },
        "serviceUuid": "bcf32476-20b9-4895-b3d2-4c27fef8b685",
        "state": "BETA"
    },
    {
        "configuration": {
            "actions": {
                "exists": {
                    "arguments": {
                        "path": {
                            "in": "requestBody",
                            "required": true,
                            "type": "string"
                        }
                    },
                    "help": "Returns 'true' if 'path' exists either as a file or directory on the file systems, 'false' otherwise.",
                    "http": {
                        "method": "post",
                        "path": "/ignore",
                        "port": 8000
                    },
                    "output": {
                        "type": "boolean"
                    }
                },
                "isDir": {
                    "arguments": {
                        "path": {
                            "in": "requestBody",
                            "required": true,
                            "type": "string"
                        }
                    },
                    "help": "Returns 'true' if 'path' is a directory, 'false' otherwise.",
                    "http": {
                        "method": "post",
                        "path": "/ignore",
                        "port": 8000
                    },
                    "output": {
                        "type": "boolean"
                    }
                },
                "isFile": {
                    "arguments": {
                        "path": {
                            "in": "requestBody",
                            "required": true,
                            "type": "string"
                        }
                    },
                    "help": "Returns 'true' if 'path' is a file, 'false' otherwise.",
                    "http": {
                        "method": "post",
                        "path": "/ignore",
                        "port": 8000
                    },
                    "output": {
                        "type": "boolean"
                    }
                },
                "list": {
                    "arguments": {
                        "path": {
                            "in": "requestBody",
                            "required": false,
                            "type": "string"
                        },
                        "recursive": {
                            "in": "requestBody",
                            "required": false,
                            "type": "boolean"
                        }
                    },
                    "help": "Returns a list of all available files in a directory.\nErrors on a file or an non-existing path.\n",
                    "http": {
                        "method": "post",
                        "path": "/ignore",
                        "port": 8000
                    },
                    "output": {
                        "list": {
                            "elements": {
                                "type": "string"
                            }
                        },
                        "type": "list"
                    }
                },
                "mkdir": {
                    "arguments": {
                        "path": {
                            "in": "requestBody",
                            "required": true,
                            "type": "string"
                        }
                    },
                    "help": "Creates a new directory.\nErrors if a file or directory of 'path' already exists.\n",
                    "http": {
                        "method": "post",
                        "path": "/ignore",
                        "port": 8000
                    },
                    "output": {
                        "type": "none"
                    }
                },
                "read": {
                    "arguments": {
                        "binary": {
                            "in": "requestBody",
                            "required": false,
                            "type": "boolean"
                        },
                        "path": {
                            "in": "requestBody",
                            "required": true,
                            "type": "string"
                        }
                    },
                    "help": "Reads a file's content from the file system.",
                    "http": {
                        "method": "post",
                        "path": "/ignore",
                        "port": 8000
                    },
                    "output": {
                        "type": "any"
                    }
                },
                "removeDir": {
                    "arguments": {
                        "path": {
                            "in": "requestBody",
                            "required": true,
                            "type": "string"
                        }
                    },
                    "help": "Removes a directory recursively from the file system.\nErrors for files.\n",
                    "http": {
                        "method": "post",
                        "path": "/ignore",
                        "port": 8000
                    },
                    "output": {
                        "type": "none"
                    }
                },
                "removeFile": {
                    "arguments": {
                        "path": {
                            "in": "requestBody",
                            "required": true,
                            "type": "string"
                        }
                    },
                    "help": "Removes a file from the file system.\nErrors for directories.\n",
                    "http": {
                        "method": "post",
                        "path": "/ignore",
                        "port": 8000
                    },
                    "output": {
                        "type": "none"
                    }
                },
                "write": {
                    "arguments": {
                        "binary": {
                            "in": "requestBody",
                            "required": false,
                            "type": "boolean"
                        },
                        "content": {
                            "in": "requestBody",
                            "required": true,
                            "type": "any"
                        },
                        "encoding": {
                            "in": "requestBody",
                            "required": false,
                            "type": "boolean"
                        },
                        "path": {
                            "in": "requestBody",
                            "required": true,
                            "type": "string"
                        }
                    },
                    "help": "Writes a file to the file system.\nExisting files will be overwritten with the new content.\n",
                    "http": {
                        "method": "post",
                        "path": "/ignore",
                        "port": 8000
                    },
                    "output": {
                        "type": "none"
                    }
                }
            },
            "info": {
                "contact": {
                    "email": "infra@storyscript.io",
                    "name": "Storyscript",
                    "url": "https://storyscript.io"
                },
                "description": "This is the microservice.yml which corresponds to the native implementation of the file service",
                "license": {
                    "name": "Apache 2",
                    "url": "https://opensource.org/licenses/Apache-2.0"
                },
                "title": "Ephemeral file storage for Storyscript Cloud",
                "version": "1.0.0"
            },
            "omg": 1
        },
        "readme": "# File\n\nBasic file operations for use in Storyscript. This should be used for working\nwith files temporarily as files are deleted after an app is finished running.\n\n```\n# Create a directory\nfile mkdir path:\"/tmp\"\n\n# Write some content to a file.\nfile write path:\"/tmp/foo\" content:\"Hello world!\"\n\n# Read the file just written to.\nstr = file read path:\"/tmp/foo\"\n\n# Write some content to a file as raw bytes.\nfile write path:\"/tmp/foo\" content:\"Hello world!\" binary: true\n\n# Read the file just written to as a raw data\nstr = file read path:\"/tmp/foo\" binary: true\n\n# Read the file just written to as a string\nstr = file read path:\"/tmp/foo\" binary: false\n\n# Read and write raw bytes\nhttp server as client\n  when client listen method:\"post\" path:\"/\" as r\n    # the file service receives the zip file,\n    # and we write it to the filesystem using raw\n    # bytes.\n    if r.file and r.file[\"body\"]\n        file write path:\"/file.zip\" content: r.file[\"body\"]\n        # reads the content in raw form\n        r write content: (file read path:\"/file.zip\" raw: true)\n    else\n        r write content: \"Hello World\"\n\n# Check if foo exists.\nexists = file exists path:\"/tmp/foo\"\n\n# Create a directory\nfile mkdir path:\"/tmp\"\n\n# Check if tmp is a directory\nisdir = file isDir path: \"/tmp\"\n\n# Check if foo is a file\nisfile = file isFile path: \"/tmp/foo\"\n\n# Remove a file\nfile removeFile path: \"/tmp/foo\"\n\n# Remove a directory and it's contents\nfile removeDir path: \"/tmp\"\n```\n",
        "service": {
            "alias": "file",
            "description": "The microservice yaml for `file` -- An internal Asyncy service",
            "isCertified": true,
            "name": "file",
            "owner": {
                "username": "storyscript"
            },
            "public": true,
            "topics": []
        },
        "serviceUuid": "1b3a1a21-4083-4138-b708-7909663f5549",
        "state": "BETA"
    },
    {
        "configuration": {
            "actions": {
                "exists": {
                    "arguments": {
                        "path": {
                            "in": "requestBody",
                            "required": true,
                            "type": "string"
                        }
                    },
                    "help": "Returns 'true' if 'path' exists either as a file or directory on the file systems, 'false' otherwise.",
                    "http": {
                        "method": "post",
                        "path": "/ignore",
                        "port": 8000
                    },
                    "output": {
                        "type": "boolean"
                    }
                },
                "isDir": {
                    "arguments": {
                        "path": {
                            "in": "requestBody",
                            "required": true,
                            "type": "string"
                        }
                    },
                    "help": "Returns 'true' if 'path' is a directory, 'false' otherwise.",
                    "http": {
                        "method": "post",
                        "path": "/ignore",
                        "port": 8000
                    },
                    "output": {
                        "type": "boolean"
                    }
                },
                "isFile": {
                    "arguments": {
                        "path": {
                            "in": "requestBody",
                            "required": true,
                            "type": "string"
                        }
                    },
                    "help": "Returns 'true' if 'path' is a file, 'false' otherwise.",
                    "http": {
                        "method": "post",
                        "path": "/ignore",
                        "port": 8000
                    },
                    "output": {
                        "type": "boolean"
                    }
                },
                "list": {
                    "arguments": {
                        "path": {
                            "in": "requestBody",
                            "required": false,
                            "type": "string"
                        },
                        "recursive": {
                            "in": "requestBody",
                            "required": false,
                            "type": "boolean"
                        }
                    },
                    "help": "Returns a list of all available files in a directory.\nErrors on a file or an non-existing path.\n",
                    "http": {
                        "method": "post",
                        "path": "/ignore",
                        "port": 8000
                    },
                    "output": {
                        "list": {
                            "elements": {
                                "type": "string"
                            }
                        },
                        "type": "list"
                    }
                },
                "mkdir": {
                    "arguments": {
                        "path": {
                            "in": "requestBody",
                            "required": true,
                            "type": "string"
                        }
                    },
                    "help": "Creates a new directory.\nErrors if a file or directory of 'path' already exists.\n",
                    "http": {
                        "method": "post",
                        "path": "/ignore",
                        "port": 8000
                    },
                    "output": {
                        "type": "none"
                    }
                },
                "read": {
                    "arguments": {
                        "binary": {
                            "in": "requestBody",
                            "required": false,
                            "type": "boolean"
                        },
                        "path": {
                            "in": "requestBody",
                            "required": true,
                            "type": "string"
                        }
                    },
                    "help": "Reads a file's content from the file system.",
                    "http": {
                        "method": "post",
                        "path": "/ignore",
                        "port": 8000
                    },
                    "output": {
                        "type": "any"
                    }
                },
                "removeDir": {
                    "arguments": {
                        "path": {
                            "in": "requestBody",
                            "required": true,
                            "type": "string"
                        }
                    },
                    "help": "Removes a directory recursively from the file system.\nErrors for files.\n",
                    "http": {
                        "method": "post",
                        "path": "/ignore",
                        "port": 8000
                    },
                    "output": {
                        "type": "none"
                    }
                },
                "removeFile": {
                    "arguments": {
                        "path": {
                            "in": "requestBody",
                            "required": true,
                            "type": "string"
                        }
                    },
                    "help": "Removes a file from the file system.\nErrors for directories.\n",
                    "http": {
                        "method": "post",
                        "path": "/ignore",
                        "port": 8000
                    },
                    "output": {
                        "type": "none"
                    }
                },
                "write": {
                    "arguments": {
                        "binary": {
                            "in": "requestBody",
                            "required": false,
                            "type": "boolean"
                        },
                        "content": {
                            "in": "requestBody",
                            "required": true,
                            "type": "any"
                        },
                        "encoding": {
                            "in": "requestBody",
                            "required": false,
                            "type": "boolean"
                        },
                        "path": {
                            "in": "requestBody",
                            "required": true,
                            "type": "string"
                        }
                    },
                    "help": "Writes a file to the file system.\nExisting files will be overwritten with the new content.\n",
                    "http": {
                        "method": "post",
                        "path": "/ignore",
                        "port": 8000
                    },
                    "output": {
                        "type": "none"
                    }
                }
            },
            "info": {
                "contact": {
                    "email": "infra@storyscript.io",
                    "name": "Storyscript",
                    "url": "https://storyscript.io"
                },
                "description": "This is the microservice.yml which corresponds to the native implementation of the file service",
                "license": {
                    "name": "Apache 2",
                    "url": "https://opensource.org/licenses/Apache-2.0"
                },
                "title": "Ephemeral file storage for Storyscript Cloud",
                "version": "1.0.0"
            },
            "omg": 1
        },
        "readme": "# File\n\nBasic file operations for use in Storyscript. This should be used for working\nwith files temporarily as files are deleted after an app is finished running.\n\n```\n# Create a directory\nfile mkdir path:\"/tmp\"\n\n# Write some content to a file.\nfile write path:\"/tmp/foo\" content:\"Hello world!\"\n\n# Read the file just written to.\nstr = file read path:\"/tmp/foo\"\n\n# Write some content to a file as raw bytes.\nfile write path:\"/tmp/foo\" content:\"Hello world!\" binary: true\n\n# Read the file just written to as a raw data\nstr = file read path:\"/tmp/foo\" binary: true\n\n# Read the file just written to as a string\nstr = file read path:\"/tmp/foo\" binary: false\n\n# Read and write raw bytes\nhttp server as client\n  when client listen method:\"post\" path:\"/\" as r\n    # the file service receives the zip file,\n    # and we write it to the filesystem using raw\n    # bytes.\n    if r.file and r.file[\"body\"]\n        file write path:\"/file.zip\" content: r.file[\"body\"]\n        # reads the content in raw form\n        r write content: (file read path:\"/file.zip\" raw: true)\n    else\n        r write content: \"Hello World\"\n\n# Check if foo exists.\nexists = file exists path:\"/tmp/foo\"\n\n# Create a directory\nfile mkdir path:\"/tmp\"\n\n# Check if tmp is a directory\nisdir = file isDir path: \"/tmp\"\n\n# Check if foo is a file\nisfile = file isFile path: \"/tmp/foo\"\n\n# Remove a file\nfile removeFile path: \"/tmp/foo\"\n\n# Remove a directory and it's contents\nfile removeDir path: \"/tmp\"\n```\n",
        "service": {
            "alias": "file",
            "description": "The microservice yaml for `file` -- An internal Asyncy service",
            "isCertified": true,
            "name": "file",
            "owner": {
                "username": "storyscript"
            },
            "public": true,
            "topics": []
        },
        "serviceUuid": "1b3a1a21-4083-4138-b708-7909663f5549",
        "state": "BETA"
    },
    {
        "configuration": {
            "actions": {
                "content_type": {
                    "arguments": {
                        "method": {
                            "in": "requestBody",
                            "required": false,
                            "type": "string"
                        },
                        "path": {
                            "in": "requestBody",
                            "required": true,
                            "type": "string"
                        }
                    },
                    "help": "Retrieves the content type of a file or resource",
                    "http": {
                        "method": "post",
                        "path": "/content_type",
                        "port": 5555
                    },
                    "output": {
                        "type": "any"
                    }
                },
                "get_resource": {
                    "arguments": {
                        "method": {
                            "in": "requestBody",
                            "required": false,
                            "type": "string"
                        },
                        "path": {
                            "in": "requestBody",
                            "required": true,
                            "type": "string"
                        }
                    },
                    "help": "Retrieves a resource from the blog/filesystem, allowing you to serve it back via the http service",
                    "http": {
                        "method": "post",
                        "path": "/get_resource",
                        "port": 5555
                    },
                    "output": {
                        "type": "any"
                    }
                },
                "init": {
                    "arguments": {
                        "repo": {
                            "in": "requestBody",
                            "required": true,
                            "type": "string"
                        }
                    },
                    "help": "Initializes and builds the hexo based blog supplied git repo",
                    "http": {
                        "method": "post",
                        "path": "/deploy",
                        "port": 5555
                    },
                    "output": {
                        "type": "any"
                    }
                }
            },
            "health": {
                "http": {
                    "path": "/health",
                    "port": 5555
                }
            },
            "info": {
                "description": "A basic OMG service allowing you to deploy a static hexo based blog.",
                "license": {
                    "name": "Apache 2.0",
                    "url": "https://opensource.org/licenses/Apache-2.0"
                },
                "title": "Hexopod",
                "version": "0.0.1"
            },
            "lifecycle": {
                "startup": {
                    "command": [
                        "node",
                        "/app/src/index.js"
                    ]
                }
            },
            "omg": 1
        },
        "readme": "# Hexopod\n\n![Microservice](https://img.shields.io/badge/microservice-ready-brightgreen.svg?style=for-the-badge)\n[![Build status](https://img.shields.io/travis/com/microservices/node/master.svg?style=for-the-badge)](https://travis-ci.com/microservices/node)\n\nAn OMG Microservice for deploying a Hexo blog\n\nStoryscript Usage\n-----\n\n```coffee\n\nTonyRice/hexopod deploy\n\nhttp server as server\n    # Note: wildcards are currently not supported in the latest\n    # Storyscript Cloud\n    when server listen method: \"get\" path: \"/*\" as r\n\n        path = r.path.replace(item: \"/blog/\" by: \"/\")\n        \n        # we need to retrieve the content-type first\n        content_type = TonyRice/hexopod content_type path: r.path.replace(item: \"/blog/\" by: \"/\")\n        \n        if content_type == null\n             content_type = \"application/octet-stream\"\n\n        r set_header key: \"Content-Type\" value: content_type\n        \n        # this will allow us to write the data of the resource\n        r write content: TonyRice/hexopod get_resource path: r.path.replace(item: \"/blog/\" by: \"/\")\n\n\n```\n",
        "service": {
            "alias": null,
            "description": "An OMG Microservice for deploying a Hexo blog",
            "isCertified": false,
            "name": "hexopod",
            "owner": {
                "username": "TonyRice"
            },
            "public": true,
            "topics": [
                "microservice",
                "blog",
                "hexo",
                "http"
            ]
        },
        "serviceUuid": "bbead5b4-df8a-4c61-8025-8b9a477b93f1",
        "state": "BETA"
    },
    {
        "configuration": {
            "actions": {
                "createTable": {
                    "arguments": {
                        "columns": {
                            "help": "A map of the to be created columns with their respective types\nPlease refer to\nhttps://www.postgresql.org/docs/9.1/sql-createtable.html for more help.\n",
                            "in": "requestBody",
                            "required": true,
                            "type": "map"
                        },
                        "table": {
                            "help": "The table to create",
                            "in": "requestBody",
                            "required": true,
                            "type": "string"
                        }
                    },
                    "help": "Create a table",
                    "http": {
                        "contentType": "application/json",
                        "method": "post",
                        "path": "/tables/create",
                        "port": 8000
                    },
                    "output": {
                        "type": "none"
                    }
                },
                "delete": {
                    "arguments": {
                        "table": {
                            "help": "The table to delete entries from",
                            "in": "requestBody",
                            "required": true,
                            "type": "string"
                        },
                        "where": {
                            "help": "A query string of the parameters to filter on, e.g.\n`{'columnName1': 'value2', 'columnName2': 'value2'}`\nUse `{'$or': {cond1, cond2}} for `OR` chains.\nUse e.g. `{'columName': {'$gt': 20}}} for more advanced comparisons.\n",
                            "in": "requestBody",
                            "required": false,
                            "type": "map"
                        }
                    },
                    "help": "Delete entries from a table",
                    "http": {
                        "contentType": "application/json",
                        "method": "post",
                        "path": "/delete",
                        "port": 8000
                    },
                    "output": {
                        "type": "none"
                    }
                },
                "dropTable": {
                    "arguments": {
                        "table": {
                            "help": "The table to drop",
                            "in": "requestBody",
                            "required": true,
                            "type": "string"
                        }
                    },
                    "help": "Drop a table",
                    "http": {
                        "contentType": "application/json",
                        "method": "post",
                        "path": "/tables/drop",
                        "port": 8000
                    },
                    "output": {
                        "type": "none"
                    }
                },
                "exec": {
                    "arguments": {
                        "data": {
                            "help": "If your query contains named parameters, such as\nSELECT * from my_table where name=%(username)s\nthen specify \"data\" as {\"name\": \"foo\"}.\n",
                            "in": "requestBody",
                            "required": false,
                            "type": "map"
                        },
                        "query": {
                            "help": "The query",
                            "in": "requestBody",
                            "required": true,
                            "type": "string"
                        }
                    },
                    "help": "Run a SELECT statement",
                    "http": {
                        "contentType": "application/json",
                        "method": "post",
                        "path": "/execute",
                        "port": 8000
                    },
                    "output": {
                        "type": "any"
                    }
                },
                "insert": {
                    "arguments": {
                        "returning": {
                            "help": "Columns to be returned. By default all.",
                            "in": "requestBody",
                            "list": {
                                "elements": {
                                    "type": "string"
                                }
                            },
                            "required": false,
                            "type": "list"
                        },
                        "table": {
                            "help": "The table to insert entries into",
                            "in": "requestBody",
                            "required": true,
                            "type": "string"
                        },
                        "value": {
                            "help": "A map of the fields of the value to be inserted into the table.\n",
                            "in": "requestBody",
                            "map": {
                                "keys": {
                                    "type": "string"
                                },
                                "values": {
                                    "type": "any"
                                }
                            },
                            "required": true,
                            "type": "map"
                        },
                        "values": {
                            "help": "DEPRECATED. Use insertMany or 'value'.\n",
                            "in": "requestBody",
                            "type": "any"
                        }
                    },
                    "help": "Insert one entry into a table.",
                    "http": {
                        "contentType": "application/json",
                        "method": "post",
                        "path": "/insert",
                        "port": 8000
                    },
                    "output": {
                        "map": {
                            "keys": {
                                "type": "string"
                            },
                            "values": {
                                "type": "any"
                            }
                        },
                        "type": "map"
                    }
                },
                "insertMany": {
                    "arguments": {
                        "returning": {
                            "help": "Columns to be returned. By default all.",
                            "in": "requestBody",
                            "list": {
                                "elements": {
                                    "type": "string"
                                }
                            },
                            "required": false,
                            "type": "list"
                        },
                        "table": {
                            "help": "The table to insert entries into",
                            "in": "requestBody",
                            "required": true,
                            "type": "string"
                        },
                        "values": {
                            "help": "A list of maps with the values to insert into the table.\n",
                            "in": "requestBody",
                            "list": {
                                "elements": {
                                    "map": {
                                        "keys": {
                                            "type": "string"
                                        },
                                        "values": {
                                            "type": "any"
                                        }
                                    },
                                    "type": "map"
                                }
                            },
                            "required": true,
                            "type": "list"
                        }
                    },
                    "help": "Insert many entry into a table.",
                    "http": {
                        "contentType": "application/json",
                        "method": "post",
                        "path": "/insert",
                        "port": 8000
                    },
                    "output": {
                        "list": {
                            "elements": {
                                "map": {
                                    "keys": {
                                        "type": "string"
                                    },
                                    "values": {
                                        "type": "any"
                                    }
                                },
                                "type": "map"
                            }
                        },
                        "type": "list"
                    }
                },
                "select": {
                    "arguments": {
                        "columns": {
                            "help": "An optional list of columns to select.",
                            "in": "requestBody",
                            "list": {
                                "elements": {
                                    "type": "string"
                                }
                            },
                            "type": "list"
                        },
                        "table": {
                            "help": "The table to select entries from.",
                            "in": "requestBody",
                            "required": true,
                            "type": "string"
                        },
                        "where": {
                            "help": "A query string of the parameters to filter on, e.g.\n`{'columnName1': 'value2', 'columnName2': 'value2'}`\nUse `{'$or': {cond1, cond2}} for `OR` chains.\nUse e.g. `{'columName': {'$gt': 20}}} for more advanced comparisons.\n",
                            "in": "requestBody",
                            "required": false,
                            "type": "any"
                        }
                    },
                    "help": "Select entries from a table",
                    "http": {
                        "contentType": "application/json",
                        "method": "post",
                        "path": "/select",
                        "port": 8000
                    },
                    "output": {
                        "list": {
                            "elements": {
                                "type": "map"
                            }
                        },
                        "type": "list"
                    }
                },
                "update": {
                    "arguments": {
                        "table": {
                            "help": "The table to update entries in",
                            "in": "requestBody",
                            "required": true,
                            "type": "string"
                        },
                        "values": {
                            "help": "A map of values to update.\n",
                            "in": "requestBody",
                            "required": true,
                            "type": "map"
                        },
                        "where": {
                            "help": "A query string of the parameters to filter on, e.g.\n`{'columnName1': 'value2', 'columnName2': 'value2'}`\nUse `{'$or': {cond1, cond2}} for `OR` chains.\nUse e.g. `{'columName': {'$gt': 20}}} for more advanced comparisons.\n",
                            "in": "requestBody",
                            "required": false,
                            "type": "any"
                        }
                    },
                    "help": "Update entries in a table",
                    "http": {
                        "contentType": "application/json",
                        "method": "post",
                        "path": "/update",
                        "port": 8000
                    },
                    "output": {
                        "type": "none"
                    }
                }
            },
            "environment": {
                "POSTGRES_DSN": {
                    "help": "The DSN to connect to PostgresSQL.",
                    "required": true,
                    "type": "string"
                }
            },
            "health": {
                "http": {
                    "path": "/health",
                    "port": 8000
                }
            },
            "info": {
                "contact": {
                    "email": "core@openmicroservices.org",
                    "name": "Open Microservices",
                    "url": "https://openmicroservices.org"
                },
                "description": "Interact with a Postgres database",
                "license": {
                    "name": "Apache 2.0",
                    "url": "https://opensource.org/licenses/Apache-2.0"
                },
                "title": "PSQL",
                "version": "1.0.0"
            },
            "lifecycle": {
                "startup": {
                    "command": [
                        "python",
                        "/app/app.py"
                    ]
                }
            },
            "oms": 1
        },
        "readme": "# _PostgreSQL_ OMG Microservice\n\n> Interact with a Postgres database.\n\n[![Open Microservice Specification Version](https://img.shields.io/badge/Open%20Microservice-1.0-477bf3.svg)](https://openmicroservices.org)\n[![Open Microservices Spectrum Chat](https://withspectrum.github.io/badge/badge.svg)](https://spectrum.chat/open-microservices)\n[![Open Microservices Code of Conduct](https://img.shields.io/badge/Contributor%20Covenant-v1.4%20adopted-ff69b4.svg)](https://github.com/oms-services/.github/blob/master/CODE_OF_CONDUCT.md)\n[![Open Microservices Commitzen](https://img.shields.io/badge/commitizen-friendly-brightgreen.svg)](http://commitizen.github.io/cz-cli/)\n[![PRs Welcome](https://img.shields.io/badge/PRs-welcome-brightgreen.svg)](http://makeapullrequest.com)\n[![License: MIT](https://img.shields.io/badge/License-MIT-blue.svg)](https://opensource.org/licenses/MIT)\n\n## Direct usage in [Storyscript](https://storyscript.io/):\n\n### Create table\n\nA table can be created with `createTable`:\n\n```coffee\npsql createTable table: \"books\" columns: {\n  \"id\": \"serial primary key\",\n  \"title\": \"varchar(100)\"\n}\n```\n\n### Insert an entry\n\n```coffee\npsql insert table: \"books\" values: {\"title\": \"Ulysses\"}\n# result: {\"id\": 1, \"title\": \"Ulysses\"}\n```\n\n### Insert multiple entries\n\n```coffee\npsql insert table: \"books\" values: [{\"title\": \"Moby Dick\"}, {\"title\": \"War and Peace\"}]\n# result: [{\"id\": 2, \"title\": \"Ulysses\"}, {\"id\": 3, \"title\": \"War and Peace\"}]\n```\n\n### Select entries\n\n- `$and` and `$or` can be used to combine queries\n- `$lt`, `$lte`, `$gt`, `$gte` and `$eq` can be used as comparison operators\n- if no comparison operators is provided, the query will match on equality\n- `columns` can be used to filter the selected fields\n\n```coffee\npsql select table: \"books\" where: {\"title\": \"Moby Dick\"}\n# result: [{\"id\": 2, \"title\": \"Moby Dick\"}]\n```\n\n```coffee\npsql select table: \"books\" where: {\"$or\": {title: \"Moby Dick\", \"id\": {\"$lt\": 2}}}\n# result: [{\"id\": 1, \"title\": \"Ulysses\"}, {\"id\": 2, \"title\": \"Moby Dick\"}]\n```\n\n```coffee\npsql select table: \"books\" columns: [\"title\"] where: {\"title\": \"Moby Dick\"}\n# result: [{\"title\": \"Moby Dick\"}]\n```\n\n### Update entries\n\n```coffee\npsql update table: \"books\" values: {\"title\": \"UPDATED\"} where: {\"id\": {\"$gt\": 2}}\n# result: [{\"id\": 3, \"title\": \"UPDATED\"}]\n```\n\nThe where query is optional, but without it _all_ columns will be updated:\n\n```coffee\npsql update table: \"books\" values: {\"title\": \"UPDATED\"}\n# result: [\n#     {\"id\": 1, \"title\": \"Ulysses\"},\n#     {\"id\": 2, \"title\": \"Ulysses\"},\n#     {\"id\": 3, \"title\": \"War and Peace\"}\n# ]\n```\n\n### Delete entries\n\n`delete` uses a `where` select query and will return the deleted columns:\n\n```coffee\npsql delete table: \"books\" where: {\"title\": \"Moby Dick\"}\n# result: [{\"id\": 2, \"title\": \"Moby Dick\"}]\n```\n\nThe where query is optional, but without it _all_ rows will be deleted.\n\n### Drop table\n\nAn entire table can be dropped with `dropTable`:\n\n```coffee\npsql dropTable table: \"books\"\n```\n\n### Execute\n\n```storyscript\n# Storyscript\nresult = psql exec query: \"select * from my_table where name=%(username)s\" data: {\"username\": \"jill\"}\n# result is an array, with records as JSON objects inside it.\n```\n\nCurious to [learn more](https://docs.storyscript.io/)?\n\n\u2728\ud83c\udf70\u2728\n\n## Usage with [OMS CLI](https://www.npmjs.com/package/@microservices/oms)\n\n##### Create Table\n\n```shell\noms run createTable -a table=<TABLE_NAME> -a columns=<COLUMNS_DATA> -e POSTGRES_DSN=<POSTGRES_DSN>\n```\n\n##### Drop Table\n\n```shell\noms run dropTable -a table=<TABLE_NAME> -e POSTGRES_DSN=<POSTGRES_DSN>\n```\n\n##### Insert\n\n```shell\noms run insert -a table=<TABLE_NAME> -a values=<MAP/LIST_OF_MAP_VALUES> -e POSTGRES_DSN=<POSTGRES_DSN>\n```\n\n##### Select\n\n```shell\noms run select -a table=<TABLE_NAME> -a where=<WHERE_CONDITION> -e POSTGRES_DSN=<POSTGRES_DSN>\n```\n\n##### Update\n\n```shell\noms run update -a table=<TABLE_NAME> -a values=<MAP/LIST_OF_MAP_VALUES> -a where=<WHERE_CONDITION> -e POSTGRES_DSN=<POSTGRES_DSN>\n```\n\n##### Delete\n\n```shell\noms run delete -a table=<TABLE_NAME> -a where=<WHERE_CONDITION> -e POSTGRES_DSN=<POSTGRES_DSN>\n```\n\n##### Execute\n\n```shell\noms run exec -a query=<QUERY> -a data=<DATA_FOR_QUERY_FIELDS> -e POSTGRES_DSN=<POSTGRES_DSN>\n```\n\n## License\n\n[MIT License](https://github.com/oms-services/psql/blob/master/LICENSE).\n",
        "service": {
            "alias": "psql",
            "description": "psql as a microservice",
            "isCertified": true,
            "name": "psql",
            "owner": {
                "username": "oms-services"
            },
            "public": true,
            "topics": [
                "psql",
                "postgresql",
                "microservice",
                "open-microservice"
            ]
        },
        "serviceUuid": "4a87da92-fcd5-4471-8f8a-c428da2fc624",
        "state": "BETA"
    },
    {
        "configuration": {
            "actions": {
                "createTable": {
                    "arguments": {
                        "columns": {
                            "help": "A map of the to be created columns with their respective types\nPlease refer to\nhttps://www.postgresql.org/docs/9.1/sql-createtable.html for more help.\n",
                            "in": "requestBody",
                            "required": true,
                            "type": "map"
                        },
                        "table": {
                            "help": "The table to create",
                            "in": "requestBody",
                            "required": true,
                            "type": "string"
                        }
                    },
                    "help": "Create a table",
                    "http": {
                        "contentType": "application/json",
                        "method": "post",
                        "path": "/tables/create",
                        "port": 8000
                    },
                    "output": {
                        "type": "none"
                    }
                },
                "delete": {
                    "arguments": {
                        "table": {
                            "help": "The table to delete entries from",
                            "in": "requestBody",
                            "required": true,
                            "type": "string"
                        },
                        "where": {
                            "help": "A query string of the parameters to filter on, e.g.\n`{'columnName1': 'value2', 'columnName2': 'value2'}`\nUse `{'$or': {cond1, cond2}} for `OR` chains.\nUse e.g. `{'columName': {'$gt': 20}}} for more advanced comparisons.\n",
                            "in": "requestBody",
                            "required": false,
                            "type": "map"
                        }
                    },
                    "help": "Delete entries from a table",
                    "http": {
                        "contentType": "application/json",
                        "method": "post",
                        "path": "/delete",
                        "port": 8000
                    },
                    "output": {
                        "type": "none"
                    }
                },
                "dropTable": {
                    "arguments": {
                        "table": {
                            "help": "The table to drop",
                            "in": "requestBody",
                            "required": true,
                            "type": "string"
                        }
                    },
                    "help": "Drop a table",
                    "http": {
                        "contentType": "application/json",
                        "method": "post",
                        "path": "/tables/drop",
                        "port": 8000
                    },
                    "output": {
                        "type": "none"
                    }
                },
                "exec": {
                    "arguments": {
                        "data": {
                            "help": "If your query contains named parameters, such as\nSELECT * from my_table where name=%(username)s\nthen specify \"data\" as {\"name\": \"foo\"}.\n",
                            "in": "requestBody",
                            "required": false,
                            "type": "map"
                        },
                        "query": {
                            "help": "The query",
                            "in": "requestBody",
                            "required": true,
                            "type": "string"
                        }
                    },
                    "help": "Run a SELECT statement",
                    "http": {
                        "contentType": "application/json",
                        "method": "post",
                        "path": "/execute",
                        "port": 8000
                    },
                    "output": {
                        "type": "any"
                    }
                },
                "insert": {
                    "arguments": {
                        "returning": {
                            "help": "Columns to be returned. By default all.",
                            "in": "requestBody",
                            "list": {
                                "elements": {
                                    "type": "string"
                                }
                            },
                            "required": false,
                            "type": "list"
                        },
                        "table": {
                            "help": "The table to insert entries into",
                            "in": "requestBody",
                            "required": true,
                            "type": "string"
                        },
                        "value": {
                            "help": "A map of the fields of the value to be inserted into the table.\n",
                            "in": "requestBody",
                            "map": {
                                "keys": {
                                    "type": "string"
                                },
                                "values": {
                                    "type": "any"
                                }
                            },
                            "required": true,
                            "type": "map"
                        },
                        "values": {
                            "help": "DEPRECATED. Use insertMany or 'value'.\n",
                            "in": "requestBody",
                            "type": "any"
                        }
                    },
                    "help": "Insert one entry into a table.",
                    "http": {
                        "contentType": "application/json",
                        "method": "post",
                        "path": "/insert",
                        "port": 8000
                    },
                    "output": {
                        "map": {
                            "keys": {
                                "type": "string"
                            },
                            "values": {
                                "type": "any"
                            }
                        },
                        "type": "map"
                    }
                },
                "insertMany": {
                    "arguments": {
                        "returning": {
                            "help": "Columns to be returned. By default all.",
                            "in": "requestBody",
                            "list": {
                                "elements": {
                                    "type": "string"
                                }
                            },
                            "required": false,
                            "type": "list"
                        },
                        "table": {
                            "help": "The table to insert entries into",
                            "in": "requestBody",
                            "required": true,
                            "type": "string"
                        },
                        "values": {
                            "help": "A list of maps with the values to insert into the table.\n",
                            "in": "requestBody",
                            "list": {
                                "elements": {
                                    "map": {
                                        "keys": {
                                            "type": "string"
                                        },
                                        "values": {
                                            "type": "any"
                                        }
                                    },
                                    "type": "map"
                                }
                            },
                            "required": true,
                            "type": "list"
                        }
                    },
                    "help": "Insert many entry into a table.",
                    "http": {
                        "contentType": "application/json",
                        "method": "post",
                        "path": "/insert",
                        "port": 8000
                    },
                    "output": {
                        "list": {
                            "elements": {
                                "map": {
                                    "keys": {
                                        "type": "string"
                                    },
                                    "values": {
                                        "type": "any"
                                    }
                                },
                                "type": "map"
                            }
                        },
                        "type": "list"
                    }
                },
                "select": {
                    "arguments": {
                        "columns": {
                            "help": "An optional list of columns to select.",
                            "in": "requestBody",
                            "list": {
                                "elements": {
                                    "type": "string"
                                }
                            },
                            "type": "list"
                        },
                        "table": {
                            "help": "The table to select entries from.",
                            "in": "requestBody",
                            "required": true,
                            "type": "string"
                        },
                        "where": {
                            "help": "A query string of the parameters to filter on, e.g.\n`{'columnName1': 'value2', 'columnName2': 'value2'}`\nUse `{'$or': {cond1, cond2}} for `OR` chains.\nUse e.g. `{'columName': {'$gt': 20}}} for more advanced comparisons.\n",
                            "in": "requestBody",
                            "required": false,
                            "type": "any"
                        }
                    },
                    "help": "Select entries from a table",
                    "http": {
                        "contentType": "application/json",
                        "method": "post",
                        "path": "/select",
                        "port": 8000
                    },
                    "output": {
                        "list": {
                            "elements": {
                                "type": "map"
                            }
                        },
                        "type": "list"
                    }
                },
                "update": {
                    "arguments": {
                        "table": {
                            "help": "The table to update entries in",
                            "in": "requestBody",
                            "required": true,
                            "type": "string"
                        },
                        "values": {
                            "help": "A map of values to update.\n",
                            "in": "requestBody",
                            "required": true,
                            "type": "map"
                        },
                        "where": {
                            "help": "A query string of the parameters to filter on, e.g.\n`{'columnName1': 'value2', 'columnName2': 'value2'}`\nUse `{'$or': {cond1, cond2}} for `OR` chains.\nUse e.g. `{'columName': {'$gt': 20}}} for more advanced comparisons.\n",
                            "in": "requestBody",
                            "required": false,
                            "type": "any"
                        }
                    },
                    "help": "Update entries in a table",
                    "http": {
                        "contentType": "application/json",
                        "method": "post",
                        "path": "/update",
                        "port": 8000
                    },
                    "output": {
                        "type": "none"
                    }
                }
            },
            "environment": {
                "POSTGRES_DSN": {
                    "help": "The DSN to connect to PostgresSQL.",
                    "required": true,
                    "type": "string"
                }
            },
            "health": {
                "http": {
                    "path": "/health",
                    "port": 8000
                }
            },
            "info": {
                "contact": {
                    "email": "core@openmicroservices.org",
                    "name": "Open Microservices",
                    "url": "https://openmicroservices.org"
                },
                "description": "Interact with a Postgres database",
                "license": {
                    "name": "Apache 2.0",
                    "url": "https://opensource.org/licenses/Apache-2.0"
                },
                "title": "PSQL",
                "version": "1.0.0"
            },
            "lifecycle": {
                "startup": {
                    "command": [
                        "python",
                        "/app/app.py"
                    ]
                }
            },
            "oms": 1
        },
        "readme": "# _PostgreSQL_ OMG Microservice\n\n> Interact with a Postgres database.\n\n[![Open Microservice Specification Version](https://img.shields.io/badge/Open%20Microservice-1.0-477bf3.svg)](https://openmicroservices.org)\n[![Open Microservices Spectrum Chat](https://withspectrum.github.io/badge/badge.svg)](https://spectrum.chat/open-microservices)\n[![Open Microservices Code of Conduct](https://img.shields.io/badge/Contributor%20Covenant-v1.4%20adopted-ff69b4.svg)](https://github.com/oms-services/.github/blob/master/CODE_OF_CONDUCT.md)\n[![Open Microservices Commitzen](https://img.shields.io/badge/commitizen-friendly-brightgreen.svg)](http://commitizen.github.io/cz-cli/)\n[![PRs Welcome](https://img.shields.io/badge/PRs-welcome-brightgreen.svg)](http://makeapullrequest.com)\n[![License: MIT](https://img.shields.io/badge/License-MIT-blue.svg)](https://opensource.org/licenses/MIT)\n\n## Direct usage in [Storyscript](https://storyscript.io/):\n\n### Create table\n\nA table can be created with `createTable`:\n\n```coffee\npsql createTable table: \"books\" columns: {\n  \"id\": \"serial primary key\",\n  \"title\": \"varchar(100)\"\n}\n```\n\n### Insert an entry\n\n```coffee\npsql insert table: \"books\" values: {\"title\": \"Ulysses\"}\n# result: {\"id\": 1, \"title\": \"Ulysses\"}\n```\n\n### Insert multiple entries\n\n```coffee\npsql insert table: \"books\" values: [{\"title\": \"Moby Dick\"}, {\"title\": \"War and Peace\"}]\n# result: [{\"id\": 2, \"title\": \"Ulysses\"}, {\"id\": 3, \"title\": \"War and Peace\"}]\n```\n\n### Select entries\n\n- `$and` and `$or` can be used to combine queries\n- `$lt`, `$lte`, `$gt`, `$gte` and `$eq` can be used as comparison operators\n- if no comparison operators is provided, the query will match on equality\n- `columns` can be used to filter the selected fields\n\n```coffee\npsql select table: \"books\" where: {\"title\": \"Moby Dick\"}\n# result: [{\"id\": 2, \"title\": \"Moby Dick\"}]\n```\n\n```coffee\npsql select table: \"books\" where: {\"$or\": {title: \"Moby Dick\", \"id\": {\"$lt\": 2}}}\n# result: [{\"id\": 1, \"title\": \"Ulysses\"}, {\"id\": 2, \"title\": \"Moby Dick\"}]\n```\n\n```coffee\npsql select table: \"books\" columns: [\"title\"] where: {\"title\": \"Moby Dick\"}\n# result: [{\"title\": \"Moby Dick\"}]\n```\n\n### Update entries\n\n```coffee\npsql update table: \"books\" values: {\"title\": \"UPDATED\"} where: {\"id\": {\"$gt\": 2}}\n# result: [{\"id\": 3, \"title\": \"UPDATED\"}]\n```\n\nThe where query is optional, but without it _all_ columns will be updated:\n\n```coffee\npsql update table: \"books\" values: {\"title\": \"UPDATED\"}\n# result: [\n#     {\"id\": 1, \"title\": \"Ulysses\"},\n#     {\"id\": 2, \"title\": \"Ulysses\"},\n#     {\"id\": 3, \"title\": \"War and Peace\"}\n# ]\n```\n\n### Delete entries\n\n`delete` uses a `where` select query and will return the deleted columns:\n\n```coffee\npsql delete table: \"books\" where: {\"title\": \"Moby Dick\"}\n# result: [{\"id\": 2, \"title\": \"Moby Dick\"}]\n```\n\nThe where query is optional, but without it _all_ rows will be deleted.\n\n### Drop table\n\nAn entire table can be dropped with `dropTable`:\n\n```coffee\npsql dropTable table: \"books\"\n```\n\n### Execute\n\n```storyscript\n# Storyscript\nresult = psql exec query: \"select * from my_table where name=%(username)s\" data: {\"username\": \"jill\"}\n# result is an array, with records as JSON objects inside it.\n```\n\nCurious to [learn more](https://docs.storyscript.io/)?\n\n\u2728\ud83c\udf70\u2728\n\n## Usage with [OMS CLI](https://www.npmjs.com/package/@microservices/oms)\n\n##### Create Table\n\n```shell\noms run createTable -a table=<TABLE_NAME> -a columns=<COLUMNS_DATA> -e POSTGRES_DSN=<POSTGRES_DSN>\n```\n\n##### Drop Table\n\n```shell\noms run dropTable -a table=<TABLE_NAME> -e POSTGRES_DSN=<POSTGRES_DSN>\n```\n\n##### Insert\n\n```shell\noms run insert -a table=<TABLE_NAME> -a values=<MAP/LIST_OF_MAP_VALUES> -e POSTGRES_DSN=<POSTGRES_DSN>\n```\n\n##### Select\n\n```shell\noms run select -a table=<TABLE_NAME> -a where=<WHERE_CONDITION> -e POSTGRES_DSN=<POSTGRES_DSN>\n```\n\n##### Update\n\n```shell\noms run update -a table=<TABLE_NAME> -a values=<MAP/LIST_OF_MAP_VALUES> -a where=<WHERE_CONDITION> -e POSTGRES_DSN=<POSTGRES_DSN>\n```\n\n##### Delete\n\n```shell\noms run delete -a table=<TABLE_NAME> -a where=<WHERE_CONDITION> -e POSTGRES_DSN=<POSTGRES_DSN>\n```\n\n##### Execute\n\n```shell\noms run exec -a query=<QUERY> -a data=<DATA_FOR_QUERY_FIELDS> -e POSTGRES_DSN=<POSTGRES_DSN>\n```\n\n## License\n\n[MIT License](https://github.com/oms-services/psql/blob/master/LICENSE).\n",
        "service": {
            "alias": "psql",
            "description": "psql as a microservice",
            "isCertified": true,
            "name": "psql",
            "owner": {
                "username": "oms-services"
            },
            "public": true,
            "topics": [
                "psql",
                "postgresql",
                "microservice",
                "open-microservice"
            ]
        },
        "serviceUuid": "4a87da92-fcd5-4471-8f8a-c428da2fc624",
        "state": "BETA"
    },
    {
        "configuration": {
            "actions": {
                "api": {
                    "arguments": {
                        "data": {
                            "help": "The data to post in the API request body.",
                            "in": "requestBody",
                            "type": "map"
                        },
                        "headers": {
                            "in": "requestBody",
                            "type": "map"
                        },
                        "iid": {
                            "help": "The GitHub App installation ID to use during authentication.",
                            "in": "requestBody",
                            "type": "int"
                        },
                        "method": {
                            "default": "get",
                            "enum": [
                                "head",
                                "get",
                                "post",
                                "patch",
                                "put",
                                "delete"
                            ],
                            "in": "requestBody",
                            "type": "enum"
                        },
                        "params": {
                            "in": "requestBody",
                            "type": "map"
                        },
                        "token": {
                            "help": "A oauth user access token to use during the request for authentication.",
                            "in": "requestBody",
                            "type": "string"
                        },
                        "url": {
                            "in": "requestBody",
                            "required": true,
                            "type": "string"
                        }
                    },
                    "help": "Make an API request to the GitHub REST API",
                    "http": {
                        "contentType": "application/json",
                        "method": "post",
                        "path": "/api",
                        "port": 5042
                    },
                    "output": {
                        "type": "map"
                    }
                },
                "events": {
                    "events": {
                        "webhooks": {
                            "arguments": {
                                "events": {
                                    "help": "List of events to listen too\nSee https://developer.github.com/webhooks/#events for full list\n",
                                    "in": "requestBody",
                                    "type": "list"
                                }
                            },
                            "http": {
                                "port": 5042,
                                "subscribe": {
                                    "contentType": "application/json",
                                    "method": "post",
                                    "path": "/webhooks/subscribe"
                                },
                                "unsubscribe": {
                                    "contentType": "application/json",
                                    "method": "post",
                                    "path": "/webhooks/unsubscribe"
                                }
                            },
                            "output": {
                                "properties": {
                                    "event": {
                                        "type": "string"
                                    },
                                    "payload": {
                                        "map": {
                                            "keys": {
                                                "type": "string"
                                            },
                                            "values": {
                                                "type": "any"
                                            }
                                        },
                                        "type": "map"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    },
                    "help": "Server for GitHub webhooks"
                },
                "graphql": {
                    "arguments": {
                        "headers": {
                            "in": "requestBody",
                            "type": "map"
                        },
                        "iid": {
                            "help": "The GitHub App installation ID to use during authentication.",
                            "in": "requestBody",
                            "type": "int"
                        },
                        "query": {
                            "in": "requestBody",
                            "required": true,
                            "type": "string"
                        },
                        "token": {
                            "help": "A oauth user access token to use during the request for authentication.",
                            "in": "requestBody",
                            "type": "string"
                        }
                    },
                    "help": "Query GitHub GraphQL",
                    "http": {
                        "contentType": "application/json",
                        "method": "post",
                        "path": "/graphql",
                        "port": 5042
                    },
                    "output": {
                        "type": "map"
                    }
                }
            },
            "environment": {
                "API_HOSTNAME": {
                    "help": "The GitHub API Hostname (for GitHub Enterprise)\nDefault to \"api.HOSTNAME\"\n",
                    "type": "string"
                },
                "APP_ID": {
                    "help": "Your GitHub App ID",
                    "type": "int"
                },
                "APP_PRIVATE_KEY": {
                    "help": "Your GitHub App private key in PEM format",
                    "type": "string"
                },
                "CLIENT_ID": {
                    "help": "The GitHub Oauth Client ID",
                    "type": "string"
                },
                "CLIENT_SECRET": {
                    "help": "The GitHub Oauth Client Secret",
                    "type": "string"
                },
                "HOSTNAME": {
                    "help": "The GitHub Hostname (for GitHub Enterprise)",
                    "type": "string"
                },
                "OAUTH_TOKEN": {
                    "help": "A user oauth token to be used if not provided during an action.",
                    "type": "string"
                },
                "USER_AGENT": {
                    "default": "Undefined",
                    "help": "GitHub requires a the User-Agent header defined.",
                    "type": "string"
                },
                "WEBHOOK_SECRET": {
                    "help": "Used to check the webhook payload signature.",
                    "type": "string"
                }
            },
            "expose": {
                "webhooks": {
                    "http": {
                        "method": "post",
                        "path": "/webhooks",
                        "port": 5042
                    }
                }
            },
            "info": {
                "description": "GitHub API, GraphQL, Webhook and Login Server",
                "license": {
                    "name": "MIT",
                    "url": "https://opensource.org/licenses/MIT"
                },
                "title": "GitHub",
                "version": "0.1.0"
            },
            "lifecycle": {
                "startup": {
                    "command": [
                        "python",
                        "/app/main.py"
                    ]
                }
            },
            "omg": 1
        },
        "readme": "# _GitHub_ Open Microservice\n\n> GitHub API, GraphQL, Webhook and Login Server\n\n[![Open Microservice Specification Version](https://img.shields.io/badge/Open%20Microservice-1.0-477bf3.svg)](https://openmicroservices.org) [![Open Microservices Spectrum Chat](https://withspectrum.github.io/badge/badge.svg)](https://spectrum.chat/open-microservices) [![Open Microservices Code of Conduct](https://img.shields.io/badge/Contributor%20Covenant-v1.4%20adopted-ff69b4.svg)](https://github.com/oms-services/.github/blob/master/CODE_OF_CONDUCT.md) [![Open Microservices Commitzen](https://img.shields.io/badge/commitizen-friendly-brightgreen.svg)](http://commitizen.github.io/cz-cli/) [![PRs Welcome](https://img.shields.io/badge/PRs-welcome-brightgreen.svg)](http://makeapullrequest.com) \n[![License: MIT](https://img.shields.io/badge/License-MIT-blue.svg)](https://opensource.org/licenses/MIT)\n\n## Introduction\n\nThis project is an example implementation of the [Open Microservice Specification](https://openmicroservices.org), a standard originally created at [Storyscript](https://storyscript.io) for building highly-portable \"microservices\" that expose the events, actions, and APIs inside containerized software.\n\n## Getting Started\n\nThe `oms` command-line interface allows you to interact with Open Microservices. If you're interested in creating an Open Microservice the CLI also helps validate, test, and debug your `oms.yml` implementation!\n\nSee the [oms-cli](https://github.com/microservices/oms) project to learn more!\n\n### Installation\n\n```\nnpm install -g @microservices/oms\n```\n\n## Usage\n\n### Open Microservices CLI Usage\n\nOnce you have the [oms-cli](https://github.com/microservices/oms) installed, you can run any of the following commands from within this project's root directory:\n\n#### Actions\n\n##### api\n\n> Make an API request to the GitHub REST API\n##### Action Arguments\n\n| Argument Name | Type | Required | Default | Description |\n|:------------- |:---- |:-------- |:--------|:----------- |\n| method | `enum` | `false` | None | No description provided. |\n| url | `string` | `true` | None | No description provided. |\n| data | `map` | `false` | None | The data to post in the API request body. |\n| params | `map` | `false` | None | No description provided. |\n| headers | `map` | `false` | None | No description provided. |\n| token | `string` | `false` | None | A oauth user access token to use during the request for authentication. |\n| iid | `int` | `false` | None | The GitHub App installation ID to use during authentication. |\n| APP_ID | `int` | `false` | None | Your GitHub App ID |\n| APP_PRIVATE_KEY | `string` | `false` | None | Your GitHub App private key in PEM format |\n| HOSTNAME | `string` | `false` | None | The GitHub Hostname (for GitHub Enterprise) |\n| API_HOSTNAME | `string` | `false` | None | The GitHub API Hostname (for GitHub Enterprise) Default to \"api.HOSTNAME\"  |\n| CLIENT_ID | `string` | `false` | None | The GitHub Oauth Client ID |\n| CLIENT_SECRET | `string` | `false` | None | The GitHub Oauth Client Secret |\n| OAUTH_TOKEN | `string` | `false` | None | A user oauth token to be used if not provided during an action. |\n| WEBHOOK_SECRET | `string` | `false` | None | Used to check the webhook payload signature. |\n| USER_AGENT | `string` | `false` | None | GitHub requires a the User-Agent header defined. |\n\n``` shell\noms run api \\ \n    -a method='*****' \\ \n    -a url='*****' \\ \n    -a data='*****' \\ \n    -a params='*****' \\ \n    -a headers='*****' \\ \n    -a token='*****' \\ \n    -a iid='*****' \\ \n    -e APP_ID=$APP_ID \\ \n    -e APP_PRIVATE_KEY=$APP_PRIVATE_KEY \\ \n    -e HOSTNAME=$HOSTNAME \\ \n    -e API_HOSTNAME=$API_HOSTNAME \\ \n    -e CLIENT_ID=$CLIENT_ID \\ \n    -e CLIENT_SECRET=$CLIENT_SECRET \\ \n    -e OAUTH_TOKEN=$OAUTH_TOKEN \\ \n    -e WEBHOOK_SECRET=$WEBHOOK_SECRET \\ \n    -e USER_AGENT=$USER_AGENT\n```\n\n##### graphql\n\n> Query GitHub GraphQL\n##### Action Arguments\n\n| Argument Name | Type | Required | Default | Description |\n|:------------- |:---- |:-------- |:--------|:----------- |\n| query | `string` | `true` | None | No description provided. |\n| headers | `map` | `false` | None | No description provided. |\n| token | `string` | `false` | None | A oauth user access token to use during the request for authentication. |\n| iid | `int` | `false` | None | The GitHub App installation ID to use during authentication. |\n| APP_ID | `int` | `false` | None | Your GitHub App ID |\n| APP_PRIVATE_KEY | `string` | `false` | None | Your GitHub App private key in PEM format |\n| HOSTNAME | `string` | `false` | None | The GitHub Hostname (for GitHub Enterprise) |\n| API_HOSTNAME | `string` | `false` | None | The GitHub API Hostname (for GitHub Enterprise) Default to \"api.HOSTNAME\"  |\n| CLIENT_ID | `string` | `false` | None | The GitHub Oauth Client ID |\n| CLIENT_SECRET | `string` | `false` | None | The GitHub Oauth Client Secret |\n| OAUTH_TOKEN | `string` | `false` | None | A user oauth token to be used if not provided during an action. |\n| WEBHOOK_SECRET | `string` | `false` | None | Used to check the webhook payload signature. |\n| USER_AGENT | `string` | `false` | None | GitHub requires a the User-Agent header defined. |\n\n``` shell\noms run graphql \\ \n    -a query='*****' \\ \n    -a headers='*****' \\ \n    -a token='*****' \\ \n    -a iid='*****' \\ \n    -e APP_ID=$APP_ID \\ \n    -e APP_PRIVATE_KEY=$APP_PRIVATE_KEY \\ \n    -e HOSTNAME=$HOSTNAME \\ \n    -e API_HOSTNAME=$API_HOSTNAME \\ \n    -e CLIENT_ID=$CLIENT_ID \\ \n    -e CLIENT_SECRET=$CLIENT_SECRET \\ \n    -e OAUTH_TOKEN=$OAUTH_TOKEN \\ \n    -e WEBHOOK_SECRET=$WEBHOOK_SECRET \\ \n    -e USER_AGENT=$USER_AGENT\n```\n\n##### webhooks\n\n> \n##### Action Arguments\n\n| Argument Name | Type | Required | Default | Description |\n|:------------- |:---- |:-------- |:--------|:----------- |\n| events | `list` | `false` | None | List of events to listen too See https://developer.github.com/webhooks/#events for full list  |\n| APP_ID | `int` | `false` | None | Your GitHub App ID |\n| APP_PRIVATE_KEY | `string` | `false` | None | Your GitHub App private key in PEM format |\n| HOSTNAME | `string` | `false` | None | The GitHub Hostname (for GitHub Enterprise) |\n| API_HOSTNAME | `string` | `false` | None | The GitHub API Hostname (for GitHub Enterprise) Default to \"api.HOSTNAME\"  |\n| CLIENT_ID | `string` | `false` | None | The GitHub Oauth Client ID |\n| CLIENT_SECRET | `string` | `false` | None | The GitHub Oauth Client Secret |\n| OAUTH_TOKEN | `string` | `false` | None | A user oauth token to be used if not provided during an action. |\n| WEBHOOK_SECRET | `string` | `false` | None | Used to check the webhook payload signature. |\n| USER_AGENT | `string` | `false` | None | GitHub requires a the User-Agent header defined. |\n\n``` shell\noms subscribe webhooks \\ \n    -a events='*****' \\ \n    -e APP_ID=$APP_ID \\ \n    -e APP_PRIVATE_KEY=$APP_PRIVATE_KEY \\ \n    -e HOSTNAME=$HOSTNAME \\ \n    -e API_HOSTNAME=$API_HOSTNAME \\ \n    -e CLIENT_ID=$CLIENT_ID \\ \n    -e CLIENT_SECRET=$CLIENT_SECRET \\ \n    -e OAUTH_TOKEN=$OAUTH_TOKEN \\ \n    -e WEBHOOK_SECRET=$WEBHOOK_SECRET \\ \n    -e USER_AGENT=$USER_AGENT\n```\n\n## Contributing\n\nAll suggestions in how to improve the specification and this guide are very welcome. Feel free share your thoughts in the Issue tracker, or even better, fork the repository to implement your own ideas and submit a pull request.\n\n[![Edit github on CodeSandbox](https://codesandbox.io/static/img/play-codesandbox.svg)](https://codesandbox.io/s/github/oms-services/github)\n\nThis project is guided by [Contributor Covenant](https://github.com/oms-services/.github/blob/master/CODE_OF_CONDUCT.md). Please read out full [Contribution Guidelines](https://github.com/oms-services/.github/blob/master/CONTRIBUTING.md).\n\n## Additional Resources\n\n* [Install the CLI](https://github.com/microservices/oms) - The OMS CLI helps developers create, test, validate, and build microservices.\n* [Example OMS Services](https://github.com/oms-services) - Examples of OMS-compliant services written in a variety of languages.\n* [Example Language Implementations](https://github.com/microservices) - Find tooling & language implementations in Node, Python, Scala, Java, Clojure.\n* [Storyscript Hub](https://hub.storyscript.io) - A public registry of OMS services.\n* [Community Chat](https://spectrum.chat/open-microservices) - Have ideas? Questions? Join us on Spectrum.\n",
        "service": {
            "alias": null,
            "description": "",
            "isCertified": false,
            "name": "githubms",
            "owner": {
                "username": "adnrs96"
            },
            "public": true,
            "topics": []
        },
        "serviceUuid": "17ff4529-6e23-48e7-8f14-826050a1181f",
        "state": "BETA"
    },
    {
        "configuration": {
            "actions": {
                "copyObject": {
                    "arguments": {
                        "bucket": {
                            "in": "requestBody",
                            "required": true,
                            "type": "string"
                        },
                        "copySource": {
                            "in": "requestBody",
                            "required": true,
                            "type": "string"
                        },
                        "key": {
                            "in": "requestBody",
                            "required": true,
                            "type": "string"
                        }
                    },
                    "help": "https://docs.aws.amazon.com/AWSJavaScriptSDK/latest/AWS/S3.html#copyObject-property",
                    "http": {
                        "contentType": "application/json",
                        "method": "post",
                        "path": "/copyObject",
                        "port": 5000
                    },
                    "output": {
                        "type": "any"
                    }
                },
                "createBucket": {
                    "arguments": {
                        "bucket": {
                            "in": "requestBody",
                            "required": true,
                            "type": "string"
                        },
                        "locationConstraint": {
                            "in": "requestBody",
                            "required": false,
                            "type": "string"
                        }
                    },
                    "help": "https://docs.aws.amazon.com/AWSJavaScriptSDK/latest/AWS/S3.html#createBucket-property",
                    "http": {
                        "contentType": "application/json",
                        "method": "post",
                        "path": "/createBucket",
                        "port": 5000
                    },
                    "output": {
                        "type": "any"
                    }
                },
                "deleteBucket": {
                    "arguments": {
                        "bucket": {
                            "in": "requestBody",
                            "required": true,
                            "type": "string"
                        }
                    },
                    "help": "https://docs.aws.amazon.com/AWSJavaScriptSDK/latest/AWS/S3.html#deleteBucket-property",
                    "http": {
                        "contentType": "application/json",
                        "method": "delete",
                        "path": "/deleteBucket",
                        "port": 5000
                    },
                    "output": {
                        "type": "any"
                    }
                },
                "deleteObject": {
                    "arguments": {
                        "bucket": {
                            "in": "requestBody",
                            "required": true,
                            "type": "string"
                        },
                        "key": {
                            "in": "requestBody",
                            "required": true,
                            "type": "string"
                        }
                    },
                    "help": "https://docs.aws.amazon.com/AWSJavaScriptSDK/latest/AWS/S3.html#deleteObject-property",
                    "http": {
                        "contentType": "application/json",
                        "method": "delete",
                        "path": "/deleteObject",
                        "port": 5000
                    },
                    "output": {
                        "type": "any"
                    }
                },
                "deleteObjects": {
                    "arguments": {
                        "bucket": {
                            "in": "requestBody",
                            "required": true,
                            "type": "string"
                        },
                        "objects": {
                            "in": "requestBody",
                            "required": true,
                            "type": "list"
                        }
                    },
                    "help": "https://docs.aws.amazon.com/AWSJavaScriptSDK/latest/AWS/S3.html#deleteObjects-property",
                    "http": {
                        "contentType": "application/json",
                        "method": "delete",
                        "path": "/deleteObjects",
                        "port": 5000
                    },
                    "output": {
                        "type": "any"
                    }
                },
                "getObject": {
                    "arguments": {
                        "bucket": {
                            "in": "query",
                            "required": true,
                            "type": "string"
                        },
                        "key": {
                            "in": "query",
                            "required": true,
                            "type": "string"
                        }
                    },
                    "help": "https://docs.aws.amazon.com/AWSJavaScriptSDK/latest/AWS/S3.html#getObject-property",
                    "http": {
                        "contentType": "application/json",
                        "method": "get",
                        "path": "/getObject",
                        "port": 5000
                    },
                    "output": {
                        "type": "any"
                    }
                },
                "listBuckets": {
                    "help": "https://docs.aws.amazon.com/AWSJavaScriptSDK/latest/AWS/S3.html#listBuckets-property",
                    "http": {
                        "contentType": "application/json",
                        "method": "get",
                        "path": "/listBuckets",
                        "port": 5000
                    },
                    "output": {
                        "type": "any"
                    }
                },
                "listObjects": {
                    "arguments": {
                        "bucket": {
                            "in": "query",
                            "required": true,
                            "type": "string"
                        },
                        "limit": {
                            "in": "query",
                            "required": true,
                            "type": "number"
                        }
                    },
                    "help": "https://docs.aws.amazon.com/AWSJavaScriptSDK/latest/AWS/S3.html#listObjects-property",
                    "http": {
                        "contentType": "application/json",
                        "method": "get",
                        "path": "/listObjects",
                        "port": 5000
                    },
                    "output": {
                        "type": "any"
                    }
                },
                "upload": {
                    "arguments": {
                        "bucket": {
                            "in": "requestBody",
                            "required": true,
                            "type": "string"
                        },
                        "file": {
                            "in": "requestBody",
                            "required": true,
                            "type": "any"
                        },
                        "key": {
                            "in": "requestBody",
                            "required": true,
                            "type": "string"
                        },
                        "options": {
                            "in": "requestBody",
                            "required": false,
                            "type": "map"
                        }
                    },
                    "help": "https://docs.aws.amazon.com/AWSJavaScriptSDK/latest/AWS/S3.html#upload-property",
                    "http": {
                        "contentType": "multipart/form-data",
                        "method": "post",
                        "path": "/upload",
                        "port": 5000
                    },
                    "output": {
                        "type": "any"
                    }
                }
            },
            "environment": {
                "AWS_ACCESS_KEY_ID": {
                    "required": true,
                    "type": "string"
                },
                "AWS_SECRET_ACCESS_KEY": {
                    "required": true,
                    "type": "string"
                }
            },
            "health": {
                "http": {
                    "path": "/health",
                    "port": 5000
                }
            },
            "info": {
                "contact": {
                    "email": "aurelien@storyscript.io",
                    "name": "Aurelien ARINO",
                    "url": "git@github.com:Arinono/aws-s3.git"
                },
                "description": "AWS S3 SDK as microservice",
                "license": {
                    "name": "MIT",
                    "url": "https://opensource.org/licenses/MIT"
                },
                "title": "aws-s3",
                "version": "0.0.1"
            },
            "lifecycle": {
                "startup": {
                    "command": [
                        "node",
                        "/app/dist/index.js"
                    ]
                }
            },
            "oms": 1
        },
        "readme": null,
        "service": {
            "alias": null,
            "description": "AWS S3 SDK as a microservice",
            "isCertified": false,
            "name": "aws-s3",
            "owner": {
                "username": "Arinono"
            },
            "public": true,
            "topics": [
                "aws",
                "s3",
                "bucket",
                "file",
                "storage",
                "cloud"
            ]
        },
        "serviceUuid": "5ad21d56-3019-4042-8a54-17aa4950af83",
        "state": "BETA"
    },
    {
        "configuration": {
            "actions": {
                "count": {
                    "arguments": {
                        "collection": {
                            "help": "The MongoDB collection to use",
                            "in": "requestBody",
                            "required": true,
                            "type": "string"
                        },
                        "query": {
                            "help": "The MongoDB search query",
                            "in": "requestBody",
                            "map": {
                                "keys": {
                                    "type": "string"
                                },
                                "values": {
                                    "type": "any"
                                }
                            },
                            "required": true,
                            "type": "map"
                        }
                    },
                    "help": "Count number of matching entries in a collection.",
                    "http": {
                        "contentType": "application/json",
                        "method": "post",
                        "path": "/countDocuments",
                        "port": 8000
                    },
                    "output": {
                        "type": "int"
                    }
                },
                "deleteMany": {
                    "arguments": {
                        "collection": {
                            "help": "The MongoDB collection to use",
                            "in": "requestBody",
                            "required": true,
                            "type": "string"
                        },
                        "query": {
                            "help": "The MongoDB search query",
                            "in": "requestBody",
                            "map": {
                                "keys": {
                                    "type": "string"
                                },
                                "values": {
                                    "type": "any"
                                }
                            },
                            "required": true,
                            "type": "map"
                        }
                    },
                    "help": "Delete many entries from a collection.",
                    "http": {
                        "contentType": "application/json",
                        "method": "post",
                        "path": "/deleteMany",
                        "port": 8000
                    },
                    "output": {
                        "properties": {
                            "acknowledged": {
                                "type": "boolean"
                            },
                            "deletedCount": {
                                "type": "int"
                            }
                        },
                        "type": "object"
                    }
                },
                "deleteOne": {
                    "arguments": {
                        "collection": {
                            "help": "The MongoDB collection to use",
                            "in": "requestBody",
                            "required": true,
                            "type": "string"
                        },
                        "query": {
                            "help": "The MongoDB search query",
                            "in": "requestBody",
                            "map": {
                                "keys": {
                                    "type": "string"
                                },
                                "values": {
                                    "type": "any"
                                }
                            },
                            "required": true,
                            "type": "map"
                        }
                    },
                    "help": "Delete one entry from a collection.",
                    "http": {
                        "contentType": "application/json",
                        "method": "post",
                        "path": "/deleteOne",
                        "port": 8000
                    },
                    "output": {
                        "properties": {
                            "acknowledged": {
                                "type": "boolean"
                            },
                            "deletedCount": {
                                "type": "int"
                            }
                        },
                        "type": "object"
                    }
                },
                "drop": {
                    "arguments": {
                        "collection": {
                            "help": "The MongoDB collection to use",
                            "in": "requestBody",
                            "required": true,
                            "type": "string"
                        }
                    },
                    "help": "Drop an entire collection.",
                    "http": {
                        "contentType": "application/json",
                        "method": "post",
                        "path": "/drop",
                        "port": 8000
                    },
                    "output": {
                        "type": "boolean"
                    }
                },
                "findMany": {
                    "arguments": {
                        "collection": {
                            "help": "The MongoDB collection to use",
                            "in": "requestBody",
                            "required": true,
                            "type": "string"
                        },
                        "query": {
                            "help": "The MongoDB search query",
                            "in": "requestBody",
                            "map": {
                                "keys": {
                                    "type": "string"
                                },
                                "values": {
                                    "type": "any"
                                }
                            },
                            "required": true,
                            "type": "map"
                        }
                    },
                    "help": "Finds many entry in a collection.",
                    "http": {
                        "contentType": "application/json",
                        "method": "post",
                        "path": "/findMany",
                        "port": 8000
                    },
                    "output": {
                        "list": {
                            "elements": {
                                "map": {
                                    "keys": {
                                        "type": "string"
                                    },
                                    "values": {
                                        "type": "any"
                                    }
                                },
                                "type": "map"
                            }
                        },
                        "type": "list"
                    }
                },
                "findOne": {
                    "arguments": {
                        "collection": {
                            "help": "The MongoDB collection to use",
                            "in": "requestBody",
                            "required": true,
                            "type": "string"
                        },
                        "query": {
                            "help": "The MongoDB search query",
                            "in": "requestBody",
                            "map": {
                                "keys": {
                                    "type": "string"
                                },
                                "values": {
                                    "type": "any"
                                }
                            },
                            "required": true,
                            "type": "map"
                        }
                    },
                    "help": "Finds one entry in a collection.",
                    "http": {
                        "contentType": "application/json",
                        "method": "post",
                        "path": "/findOne",
                        "port": 8000
                    },
                    "output": {
                        "map": {
                            "keys": {
                                "type": "string"
                            },
                            "values": {
                                "type": "any"
                            }
                        },
                        "type": "map"
                    }
                },
                "insertMany": {
                    "arguments": {
                        "collection": {
                            "help": "The MongoDB collection to use",
                            "in": "requestBody",
                            "required": true,
                            "type": "string"
                        },
                        "values": {
                            "help": "The values to insert into MongoDB.",
                            "in": "requestBody",
                            "list": {
                                "elements": {
                                    "map": {
                                        "keys": {
                                            "type": "string"
                                        },
                                        "values": {
                                            "type": "any"
                                        }
                                    },
                                    "type": "map"
                                }
                            },
                            "required": true,
                            "type": "list"
                        }
                    },
                    "help": "Insert many entries into a collection.",
                    "http": {
                        "contentType": "application/json",
                        "method": "post",
                        "path": "/insertMany",
                        "port": 8000
                    },
                    "output": {
                        "properties": {
                            "acknowledged": {
                                "type": "boolean"
                            },
                            "insertedIds": {
                                "list": {
                                    "elements": {
                                        "type": "string"
                                    }
                                },
                                "type": "list"
                            }
                        },
                        "type": "object"
                    }
                },
                "insertOne": {
                    "arguments": {
                        "collection": {
                            "help": "The MongoDB collection to use",
                            "in": "requestBody",
                            "required": true,
                            "type": "string"
                        },
                        "value": {
                            "help": "The value to insert into MongoDB",
                            "in": "requestBody",
                            "required": true,
                            "type": "any"
                        }
                    },
                    "help": "Insert one entry into a collection.",
                    "http": {
                        "contentType": "application/json",
                        "method": "post",
                        "path": "/insertOne",
                        "port": 8000
                    },
                    "output": {
                        "properties": {
                            "acknowledged": {
                                "type": "boolean"
                            },
                            "insertedId": {
                                "type": "string"
                            }
                        },
                        "type": "object"
                    }
                },
                "listCollection": {
                    "arguments": {
                        "collection": {
                            "help": "The MongoDB collection to use",
                            "in": "requestBody",
                            "required": true,
                            "type": "string"
                        }
                    },
                    "help": "List all collections.",
                    "http": {
                        "contentType": "application/json",
                        "method": "get",
                        "path": "/listCollections",
                        "port": 8000
                    },
                    "output": {
                        "list": {
                            "elements": {
                                "type": "string"
                            }
                        },
                        "type": "list"
                    }
                },
                "updateMany": {
                    "arguments": {
                        "collection": {
                            "help": "The MongoDB collection to use",
                            "in": "requestBody",
                            "required": true,
                            "type": "string"
                        },
                        "query": {
                            "help": "The MongoDB search query",
                            "in": "requestBody",
                            "map": {
                                "keys": {
                                    "type": "string"
                                },
                                "values": {
                                    "type": "any"
                                }
                            },
                            "required": true,
                            "type": "map"
                        },
                        "upsert": {
                            "help": "If set to 'true', creates a new document when no document matches\nthe query criteria.\n",
                            "in": "requestBody",
                            "required": false,
                            "type": "boolean"
                        },
                        "value": {
                            "help": "The value to insert into MongoDB",
                            "in": "requestBody",
                            "required": true,
                            "type": "any"
                        }
                    },
                    "help": "Update many entry in a collection.",
                    "http": {
                        "contentType": "application/json",
                        "method": "post",
                        "path": "/updateMany",
                        "port": 8000
                    },
                    "output": {
                        "properties": {
                            "acknowledged": {
                                "type": "boolean"
                            },
                            "matchedCount": {
                                "type": "int"
                            },
                            "modifiedCount": {
                                "type": "int"
                            },
                            "upsertedId": {
                                "type": "string"
                            }
                        },
                        "type": "object"
                    }
                },
                "updateOne": {
                    "arguments": {
                        "collection": {
                            "help": "The MongoDB collection to use",
                            "in": "requestBody",
                            "required": true,
                            "type": "string"
                        },
                        "query": {
                            "help": "The MongoDB search query",
                            "in": "requestBody",
                            "map": {
                                "keys": {
                                    "type": "string"
                                },
                                "values": {
                                    "type": "any"
                                }
                            },
                            "required": true,
                            "type": "map"
                        },
                        "upsert": {
                            "help": "If set to 'true', creates a new document when no document matches\nthe query criteria.\n",
                            "in": "requestBody",
                            "required": false,
                            "type": "boolean"
                        },
                        "value": {
                            "help": "The value to insert into MongoDB",
                            "in": "requestBody",
                            "required": true,
                            "type": "any"
                        }
                    },
                    "help": "Updates one entry in a collection.",
                    "http": {
                        "contentType": "application/json",
                        "method": "post",
                        "path": "/updateOne",
                        "port": 8000
                    },
                    "output": {
                        "properties": {
                            "acknowledged": {
                                "type": "boolean"
                            },
                            "matchedCount": {
                                "type": "int"
                            },
                            "modifiedCount": {
                                "type": "int"
                            },
                            "upsertedId": {
                                "type": "string"
                            }
                        },
                        "type": "object"
                    }
                }
            },
            "environment": {
                "MONGODB_URI": {
                    "help": "The MongoDB URI to connect to.\n",
                    "required": false,
                    "type": "string"
                }
            },
            "health": {
                "http": {
                    "path": "/health",
                    "port": 8000
                }
            },
            "info": {
                "contact": {
                    "email": "core@openmicroservices.org",
                    "name": "Open Microservices",
                    "url": "https://openmicroservices.org"
                },
                "description": "Access a MongoDB server",
                "license": {
                    "name": "MIT",
                    "url": "https://opensource.org/licenses/MIT"
                },
                "title": "MongoDB",
                "version": "1.0.0"
            },
            "lifecycle": {
                "startup": {
                    "command": [
                        "python",
                        "-m",
                        "oms.mongodb.app"
                    ]
                }
            },
            "oms": 1,
            "volumes": {
                "db": {
                    "persist": true,
                    "target": "/db"
                }
            },
            "x-types": {
                "col": {
                    "collection": {
                        "help": "The MongoDB collection to use",
                        "in": "requestBody",
                        "required": true,
                        "type": "string"
                    }
                },
                "json": {
                    "contentType": "application/json",
                    "method": "post",
                    "port": 8000
                },
                "query": {
                    "query": {
                        "help": "The MongoDB search query",
                        "in": "requestBody",
                        "map": {
                            "keys": {
                                "type": "string"
                            },
                            "values": {
                                "type": "any"
                            }
                        },
                        "required": true,
                        "type": "map"
                    }
                },
                "updateOutput": {
                    "output": {
                        "properties": {
                            "acknowledged": {
                                "type": "boolean"
                            },
                            "matchedCount": {
                                "type": "int"
                            },
                            "modifiedCount": {
                                "type": "int"
                            },
                            "upsertedId": {
                                "type": "string"
                            }
                        },
                        "type": "object"
                    }
                },
                "upsert": {
                    "upsert": {
                        "help": "If set to 'true', creates a new document when no document matches\nthe query criteria.\n",
                        "in": "requestBody",
                        "required": false,
                        "type": "boolean"
                    }
                },
                "value": {
                    "value": {
                        "help": "The value to insert into MongoDB",
                        "in": "requestBody",
                        "required": true,
                        "type": "any"
                    }
                },
                "values": {
                    "values": {
                        "help": "The values to insert into MongoDB.",
                        "in": "requestBody",
                        "list": {
                            "elements": {
                                "map": {
                                    "keys": {
                                        "type": "string"
                                    },
                                    "values": {
                                        "type": "any"
                                    }
                                },
                                "type": "map"
                            }
                        },
                        "required": true,
                        "type": "list"
                    }
                }
            }
        },
        "readme": "# _MongoDB_ Open Microservice\n\n> Access a MongoDB server\n\n[![Open Microservice Specification Version](https://img.shields.io/badge/Open%20Microservice-1.0-477bf3.svg)](https://openmicroservices.org) [![Open Microservices Spectrum Chat](https://withspectrum.github.io/badge/badge.svg)](https://spectrum.chat/open-microservices) [![Open Microservices Code of Conduct](https://img.shields.io/badge/Contributor%20Covenant-v1.4%20adopted-ff69b4.svg)](https://github.com/oms-services/.github/blob/master/CODE_OF_CONDUCT.md) [![Open Microservices Commitzen](https://img.shields.io/badge/commitizen-friendly-brightgreen.svg)](http://commitizen.github.io/cz-cli/) [![PRs Welcome](https://img.shields.io/badge/PRs-welcome-brightgreen.svg)](http://makeapullrequest.com)\n\n## Introduction\n\nThis project is an example implementation of the [Open Microservice Specification](https://openmicroservices.org), a standard originally created at [Storyscript](https://storyscript.io) for building highly-portable \"microservices\" that expose the events, actions, and APIs inside containerized software.\n\n## Getting Started\n\nThe `oms` command-line interface allows you to interact with Open Microservices. If you're interested in creating an Open Microservice the CLI also helps validate, test, and debug your `oms.yml` implementation!\n\nSee the [oms-cli](https://github.com/microservices/oms) project to learn more!\n\n### Installation\n\n```\nnpm install -g @microservices/oms\n```\n\n## Usage\n\n### Open Microservices CLI Usage\n\nOnce you have the [oms-cli](https://github.com/microservices/oms) installed, you can run any of the following commands from within this project's root directory:\n\n#### Actions\n\n##### insertOne\n\n> Insert one entry into a collection.\n##### Action Arguments\n\n| Argument Name | Type | Required | Default | Description |\n|:------------- |:---- |:-------- |:--------|:----------- |\n| collection | `string` | `true` | None | The MongoDB collection to use |\n| value | `any` | `true` | None | The value to insert into MongoDB |\n| MONGODB_URI | `string` | `false` | None | The MongoDB URI to connect to.  |\n\n``` shell\noms run insertOne \\ \n    -a collection='*****' \\ \n    -a value='*****' \\ \n    -e MONGODB_URI=$MONGODB_URI\n```\n\n##### insertMany\n\n> Insert many entries into a collection.\n##### Action Arguments\n\n| Argument Name | Type | Required | Default | Description |\n|:------------- |:---- |:-------- |:--------|:----------- |\n| collection | `string` | `true` | None | The MongoDB collection to use |\n| values | `list` | `true` | None | The values to insert into MongoDB. |\n| MONGODB_URI | `string` | `false` | None | The MongoDB URI to connect to.  |\n\n``` shell\noms run insertMany \\ \n    -a collection='*****' \\ \n    -a values='*****' \\ \n    -e MONGODB_URI=$MONGODB_URI\n```\n\n##### findOne\n\n> Finds one entry in a collection.\n##### Action Arguments\n\n| Argument Name | Type | Required | Default | Description |\n|:------------- |:---- |:-------- |:--------|:----------- |\n| collection | `string` | `true` | None | The MongoDB collection to use |\n| query | `map` | `true` | None | The MongoDB search query |\n| MONGODB_URI | `string` | `false` | None | The MongoDB URI to connect to.  |\n\n``` shell\noms run findOne \\ \n    -a collection='*****' \\ \n    -a query='*****' \\ \n    -e MONGODB_URI=$MONGODB_URI\n```\n\n##### findMany\n\n> Finds many entry in a collection.\n##### Action Arguments\n\n| Argument Name | Type | Required | Default | Description |\n|:------------- |:---- |:-------- |:--------|:----------- |\n| collection | `string` | `true` | None | The MongoDB collection to use |\n| query | `map` | `true` | None | The MongoDB search query |\n| MONGODB_URI | `string` | `false` | None | The MongoDB URI to connect to.  |\n\n``` shell\noms run findMany \\ \n    -a collection='*****' \\ \n    -a query='*****' \\ \n    -e MONGODB_URI=$MONGODB_URI\n```\n\n##### count\n\n> Count number of matching entries in a collection.\n##### Action Arguments\n\n| Argument Name | Type | Required | Default | Description |\n|:------------- |:---- |:-------- |:--------|:----------- |\n| collection | `string` | `true` | None | The MongoDB collection to use |\n| query | `map` | `true` | None | The MongoDB search query |\n| MONGODB_URI | `string` | `false` | None | The MongoDB URI to connect to.  |\n\n``` shell\noms run count \\ \n    -a collection='*****' \\ \n    -a query='*****' \\ \n    -e MONGODB_URI=$MONGODB_URI\n```\n\n##### updateOne\n\n> Updates one entry in a collection.\n##### Action Arguments\n\n| Argument Name | Type | Required | Default | Description |\n|:------------- |:---- |:-------- |:--------|:----------- |\n| collection | `string` | `true` | None | The MongoDB collection to use |\n| query | `map` | `true` | None | The MongoDB search query |\n| value | `any` | `true` | None | The value to insert into MongoDB |\n| upsert | `boolean` | `false` | None | If set to 'true', creates a new document when no document matches the query criteria.  |\n| MONGODB_URI | `string` | `false` | None | The MongoDB URI to connect to.  |\n\n``` shell\noms run updateOne \\ \n    -a collection='*****' \\ \n    -a query='*****' \\ \n    -a value='*****' \\ \n    -a upsert='*****' \\ \n    -e MONGODB_URI=$MONGODB_URI\n```\n\n##### updateMany\n\n> Update many entry in a collection.\n##### Action Arguments\n\n| Argument Name | Type | Required | Default | Description |\n|:------------- |:---- |:-------- |:--------|:----------- |\n| collection | `string` | `true` | None | The MongoDB collection to use |\n| query | `map` | `true` | None | The MongoDB search query |\n| value | `any` | `true` | None | The value to insert into MongoDB |\n| upsert | `boolean` | `false` | None | If set to 'true', creates a new document when no document matches the query criteria.  |\n| MONGODB_URI | `string` | `false` | None | The MongoDB URI to connect to.  |\n\n``` shell\noms run updateMany \\ \n    -a collection='*****' \\ \n    -a query='*****' \\ \n    -a value='*****' \\ \n    -a upsert='*****' \\ \n    -e MONGODB_URI=$MONGODB_URI\n```\n\n##### deleteOne\n\n> Delete one entry from a collection.\n##### Action Arguments\n\n| Argument Name | Type | Required | Default | Description |\n|:------------- |:---- |:-------- |:--------|:----------- |\n| collection | `string` | `true` | None | The MongoDB collection to use |\n| query | `map` | `true` | None | The MongoDB search query |\n| MONGODB_URI | `string` | `false` | None | The MongoDB URI to connect to.  |\n\n``` shell\noms run deleteOne \\ \n    -a collection='*****' \\ \n    -a query='*****' \\ \n    -e MONGODB_URI=$MONGODB_URI\n```\n\n##### deleteMany\n\n> Delete many entries from a collection.\n##### Action Arguments\n\n| Argument Name | Type | Required | Default | Description |\n|:------------- |:---- |:-------- |:--------|:----------- |\n| collection | `string` | `true` | None | The MongoDB collection to use |\n| query | `map` | `true` | None | The MongoDB search query |\n| MONGODB_URI | `string` | `false` | None | The MongoDB URI to connect to.  |\n\n``` shell\noms run deleteMany \\ \n    -a collection='*****' \\ \n    -a query='*****' \\ \n    -e MONGODB_URI=$MONGODB_URI\n```\n\n##### drop\n\n> Drop an entire collection.\n##### Action Arguments\n\n| Argument Name | Type | Required | Default | Description |\n|:------------- |:---- |:-------- |:--------|:----------- |\n| collection | `string` | `true` | None | The MongoDB collection to use |\n| MONGODB_URI | `string` | `false` | None | The MongoDB URI to connect to.  |\n\n``` shell\noms run drop \\ \n    -a collection='*****' \\ \n    -e MONGODB_URI=$MONGODB_URI\n```\n\n##### listCollection\n\n> List all collections.\n##### Action Arguments\n\n| Argument Name | Type | Required | Default | Description |\n|:------------- |:---- |:-------- |:--------|:----------- |\n| collection | `string` | `true` | None | The MongoDB collection to use |\n| MONGODB_URI | `string` | `false` | None | The MongoDB URI to connect to.  |\n\n``` shell\noms run listCollection \\ \n    -a collection='*****' \\ \n    -e MONGODB_URI=$MONGODB_URI\n```\n\n## Contributing\n\nAll suggestions in how to improve the specification and this guide are very welcome. Feel free share your thoughts in the Issue tracker, or even better, fork the repository to implement your own ideas and submit a pull request.\n\n[![Edit mongodb on CodeSandbox](https://codesandbox.io/static/img/play-codesandbox.svg)](https://codesandbox.io/s/github/oms-services/mongodb)\n\nThis project is guided by [Contributor Covenant](https://github.com/oms-services/.github/blob/master/CODE_OF_CONDUCT.md). Please read out full [Contribution Guidelines](https://github.com/oms-services/.github/blob/master/CONTRIBUTING.md).\n\n## Additional Resources\n\n* [Install the CLI](https://github.com/microservices/oms) - The OMS CLI helps developers create, test, validate, and build microservices.\n* [Example OMS Services](https://github.com/oms-services) - Examples of OMS-compliant services written in a variety of languages.\n* [Example Language Implementations](https://github.com/microservices) - Find tooling & language implementations in Node, Python, Scala, Java, Clojure.\n* [Storyscript Hub](https://hub.storyscript.io) - A public registry of OMS services.\n* [Community Chat](https://spectrum.chat/open-microservices) - Have ideas? Questions? Join us on Spectrum.\n",
        "service": {
            "alias": null,
            "description": "MongoDB database service",
            "isCertified": false,
            "name": "mongodb",
            "owner": {
                "username": "wilzbach"
            },
            "public": true,
            "topics": [
                "database",
                "mongodb",
                "mongo",
                "nosql"
            ]
        },
        "serviceUuid": "2ef5502a-bb7f-4324-b2a2-8b75306a963f",
        "state": "BETA"
    },
    {
        "configuration": {
            "actions": {
                "sendMany": {
                    "arguments": {
                        "asm": {
                            "in": "requestBody",
                            "properties": {
                                "group": {
                                    "required": true,
                                    "type": "int"
                                },
                                "groups_to_display": {
                                    "required": false,
                                    "type": "list"
                                }
                            },
                            "type": "object"
                        },
                        "attachments": {
                            "in": "requestBody",
                            "type": "list"
                        },
                        "batch_id": {
                            "in": "requestBody",
                            "type": "string"
                        },
                        "categories": {
                            "in": "requestBody",
                            "type": "list"
                        },
                        "content": {
                            "in": "requestBody",
                            "required": true,
                            "type": "list"
                        },
                        "custom_args": {
                            "in": "requestBody",
                            "type": "any"
                        },
                        "from": {
                            "in": "requestBody",
                            "properties": {
                                "email": {
                                    "required": true,
                                    "type": "string"
                                },
                                "name": {
                                    "required": false,
                                    "type": "string"
                                }
                            },
                            "required": true,
                            "type": "object"
                        },
                        "headers": {
                            "in": "requestBody",
                            "type": "any"
                        },
                        "ip_pool_name": {
                            "in": "requestBody",
                            "type": "string"
                        },
                        "mail_settings": {
                            "in": "requestBody",
                            "properties": {
                                "bcc": {
                                    "properties": {
                                        "email": {
                                            "required": false,
                                            "type": "string"
                                        },
                                        "enable": {
                                            "required": false,
                                            "type": "boolean"
                                        }
                                    },
                                    "required": false,
                                    "type": "object"
                                },
                                "bypass_list_management": {
                                    "properties": {
                                        "enable": {
                                            "required": false,
                                            "type": "boolean"
                                        }
                                    },
                                    "required": false,
                                    "type": "object"
                                },
                                "footer": {
                                    "properties": {
                                        "enable": {
                                            "required": false,
                                            "type": "boolean"
                                        },
                                        "html": {
                                            "required": false,
                                            "type": "string"
                                        },
                                        "text": {
                                            "required": false,
                                            "type": "string"
                                        }
                                    },
                                    "required": false,
                                    "type": "object"
                                },
                                "sandbox_mode": {
                                    "properties": {
                                        "enable": {
                                            "type": "boolean"
                                        }
                                    },
                                    "required": false,
                                    "type": "object"
                                },
                                "spam_check": {
                                    "properties": {
                                        "enable": {
                                            "required": false,
                                            "type": "boolean"
                                        },
                                        "post_to_url": {
                                            "required": false,
                                            "type": "string"
                                        },
                                        "threshold": {
                                            "required": false,
                                            "type": "int"
                                        }
                                    },
                                    "required": false,
                                    "type": "object"
                                }
                            },
                            "type": "object"
                        },
                        "personalizations": {
                            "in": "requestBody",
                            "required": true,
                            "type": "list"
                        },
                        "reply_to": {
                            "in": "requestBody",
                            "properties": {
                                "email": {
                                    "required": true,
                                    "type": "string"
                                },
                                "name": {
                                    "required": false,
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        },
                        "sections": {
                            "in": "requestBody",
                            "type": "any"
                        },
                        "send_at": {
                            "in": "requestBody",
                            "type": "int"
                        },
                        "subject": {
                            "in": "requestBody",
                            "type": "string"
                        },
                        "template_id": {
                            "in": "requestBody",
                            "type": "string"
                        },
                        "tracking_settings": {
                            "in": "requestBody",
                            "type": "any"
                        }
                    },
                    "http": {
                        "method": "post",
                        "path": "/send_many",
                        "port": 8080
                    },
                    "output": {
                        "contentType": "application/json",
                        "properties": {
                            "message_id": {
                                "type": "string"
                            }
                        },
                        "type": "object"
                    }
                },
                "sendOne": {
                    "arguments": {
                        "content": {
                            "in": "requestBody",
                            "required": true,
                            "type": "string"
                        },
                        "content_type": {
                            "in": "requestBody",
                            "required": true,
                            "type": "string"
                        },
                        "from": {
                            "in": "requestBody",
                            "required": true,
                            "type": "string"
                        },
                        "subject": {
                            "in": "requestBody",
                            "required": true,
                            "type": "string"
                        },
                        "to": {
                            "in": "requestBody",
                            "required": true,
                            "type": "string"
                        }
                    },
                    "http": {
                        "method": "post",
                        "path": "/send_one",
                        "port": 8080
                    },
                    "output": {
                        "contentType": "application/json",
                        "properties": {
                            "message_id": {
                                "type": "string"
                            }
                        },
                        "type": "object"
                    }
                }
            },
            "environment": {
                "SENDGRID_API_TOKEN": {
                    "help": "Create a Sendgrid account and register an API key at https://app.sendgrid.com/settings/api_keys\n",
                    "required": true,
                    "type": "string"
                }
            },
            "info": {
                "contact": {
                    "email": "core@openmicroservices.org",
                    "name": "Open Microservices",
                    "url": "https://openmicroservices.org"
                },
                "description": "Access to the Sendgrid email API",
                "license": {
                    "name": "MIT",
                    "url": "https://opensource.org/licenses/MIT"
                },
                "title": "Sendgrid",
                "version": "0.1.0"
            },
            "lifecycle": {
                "startup": {
                    "command": [
                        "/app/bin/oms-sendgrid"
                    ]
                }
            },
            "oms": 1
        },
        "readme": "# _Sendgrid_ Open Microservice\n\n> Access to the Sendgrid email API\n\n[![Open Microservice Specification Version](https://img.shields.io/badge/Open%20Microservice-1.0-477bf3.svg)](https://openmicroservices.org)\n[![Open Microservices Spectrum Chat](https://withspectrum.github.io/badge/badge.svg)](https://spectrum.chat/open-microservices)\n[![Open Microservices Code of Conduct](https://img.shields.io/badge/Contributor%20Covenant-v1.4%20adopted-ff69b4.svg)](https://github.com/oms-services/.github/blob/master/CODE_OF_CONDUCT.md)\n[![Open Microservices Commitzen](https://img.shields.io/badge/commitizen-friendly-brightgreen.svg)](http://commitizen.github.io/cz-cli/)\n[![PRs Welcome](https://img.shields.io/badge/PRs-welcome-brightgreen.svg)](http://makeapullrequest.com)\n[![License: MIT](https://img.shields.io/badge/License-MIT-blue.svg)](https://opensource.org/licenses/MIT)\n\n## Introduction\n\nThis project is an example implementation of the [Open Microservice Specification](https://openmicroservices.org), a standard\noriginally created at [Storyscript](https://storyscript.io) for building highly-portable \"microservices\" that expose the\nevents, actions, and APIs inside containerized software.\n\n## Getting Started\n\nThe `oms` command-line interface allows you to interact with Open Microservices. If you're interested in creating an Open\nMicroservice the CLI also helps validate, test, and debug your `oms.yml` implementation!\n\nSee the [oms-cli](https://github.com/microservices/oms) project to learn more!\n\n### Installation\n\n```\nnpm install -g @microservices/oms\n```\n\n## Usage\n\n### Open Microservices CLI Usage\n\nOnce you have the [oms-cli](https://github.com/microservices/oms) installed, you can run any of the following commands from\nwithin this project's root directory:\n\n#### Actions\n\n##### sendOne\n\n>\n\n##### Action Arguments\n\n| Argument Name      | Type     | Required | Default | Description                                                                                     |\n| :----------------- | :------- | :------- | :------ | :---------------------------------------------------------------------------------------------- |\n| from               | `string` | `true`   | None    | No description provided.                                                                        |\n| to                 | `string` | `true`   | None    | No description provided.                                                                        |\n| subject            | `string` | `true`   | None    | No description provided.                                                                        |\n| content            | `string` | `true`   | None    | No description provided.                                                                        |\n| content_type       | `string` | `true`   | None    | No description provided.                                                                        |\n| SENDGRID_API_TOKEN | `string` | `true`   | None    | Create a Sendgrid account and register an API key at https://app.sendgrid.com/settings/api_keys |\n\n```shell\noms run sendOne \\\n    -a from='*****' \\\n    -a to='*****' \\\n    -a subject='*****' \\\n    -a content='*****' \\\n    -a content_type='*****' \\\n    -e SENDGRID_API_TOKEN=$SENDGRID_API_TOKEN\n```\n\n##### sendMany\n\n>\n\n##### Action Arguments\n\n| Argument Name      | Type     | Required | Default | Description                                                                                     |\n| :----------------- | :------- | :------- | :------ | :---------------------------------------------------------------------------------------------- |\n| personalizations   | `list`   | `true`   | None    | No description provided.                                                                        |\n| from               | `object` | `true`   | None    | No description provided.                                                                        |\n| subject            | `string` | `false`  | None    | No description provided.                                                                        |\n| content            | `list`   | `true`   | None    | No description provided.                                                                        |\n| reply_to           | `object` | `false`  | None    | No description provided.                                                                        |\n| attachments        | `list`   | `false`  | None    | No description provided.                                                                        |\n| template_id        | `string` | `false`  | None    | No description provided.                                                                        |\n| sections           | `any`    | `false`  | None    | No description provided.                                                                        |\n| headers            | `any`    | `false`  | None    | No description provided.                                                                        |\n| categories         | `list`   | `false`  | None    | No description provided.                                                                        |\n| custom_args        | `any`    | `false`  | None    | No description provided.                                                                        |\n| send_at            | `int`    | `false`  | None    | No description provided.                                                                        |\n| batch_id           | `string` | `false`  | None    | No description provided.                                                                        |\n| asm                | `object` | `false`  | None    | No description provided.                                                                        |\n| ip_pool_name       | `string` | `false`  | None    | No description provided.                                                                        |\n| mail_settings      | `object` | `false`  | None    | No description provided.                                                                        |\n| tracking_settings  | `any`    | `false`  | None    | No description provided.                                                                        |\n| SENDGRID_API_TOKEN | `string` | `true`   | None    | Create a Sendgrid account and register an API key at https://app.sendgrid.com/settings/api_keys |\n\n```shell\noms run sendMany \\\n    -a personalizations='*****' \\\n    -a from='*****' \\\n    -a subject='*****' \\\n    -a content='*****' \\\n    -a reply_to='*****' \\\n    -a attachments='*****' \\\n    -a template_id='*****' \\\n    -a sections='*****' \\\n    -a headers='*****' \\\n    -a categories='*****' \\\n    -a custom_args='*****' \\\n    -a send_at='*****' \\\n    -a batch_id='*****' \\\n    -a asm='*****' \\\n    -a ip_pool_name='*****' \\\n    -a mail_settings='*****' \\\n    -a tracking_settings='*****' \\\n    -e SENDGRID_API_TOKEN=$SENDGRID_API_TOKEN\n```\n\n## Contributing\n\nAll suggestions in how to improve the specification and this guide are very welcome. Feel free share your thoughts in the\nIssue tracker, or even better, fork the repository to implement your own ideas and submit a pull request.\n\n[![Edit sendgrid on CodeSandbox](https://codesandbox.io/static/img/play-codesandbox.svg)](https://codesandbox.io/s/github/oms-services/sendgrid)\n\nThis project is guided by [Contributor Covenant](https://github.com/oms-services/.github/blob/master/CODE_OF_CONDUCT.md).\nPlease read out full [Contribution Guidelines](https://github.com/oms-services/.github/blob/master/CONTRIBUTING.md).\n\n## Additional Resources\n\n- [Install the CLI](https://github.com/microservices/oms) - The OMS CLI helps developers create, test, validate, and build\n  microservices.\n- [Example OMS Services](https://github.com/oms-services) - Examples of OMS-compliant services written in a variety of\n  languages.\n- [Example Language Implementations](https://github.com/microservices) - Find tooling & language implementations in Node,\n  Python, Scala, Java, Clojure.\n- [Storyscript Hub](https://hub.storyscript.io) - A public registry of OMS services.\n- [Community Chat](https://spectrum.chat/open-microservices) - Have ideas? Questions? Join us on Spectrum.\n",
        "service": {
            "alias": "sendgrid",
            "description": "An OMG service to access the Sendgrid email API",
            "isCertified": true,
            "name": "sendgrid",
            "owner": {
                "username": "oms-services"
            },
            "public": true,
            "topics": [
                "microservice",
                "sendgrid",
                "sendgrid-api",
                "sendgrid-api-wrapper",
                "open-microservice"
            ]
        },
        "serviceUuid": "e9175cb5-c925-460b-b4cd-d4248a6a7cd7",
        "state": "BETA"
    },
    {
        "configuration": {
            "actions": {
                "sendMany": {
                    "arguments": {
                        "asm": {
                            "in": "requestBody",
                            "properties": {
                                "group": {
                                    "required": true,
                                    "type": "int"
                                },
                                "groups_to_display": {
                                    "required": false,
                                    "type": "list"
                                }
                            },
                            "type": "object"
                        },
                        "attachments": {
                            "in": "requestBody",
                            "type": "list"
                        },
                        "batch_id": {
                            "in": "requestBody",
                            "type": "string"
                        },
                        "categories": {
                            "in": "requestBody",
                            "type": "list"
                        },
                        "content": {
                            "in": "requestBody",
                            "required": true,
                            "type": "list"
                        },
                        "custom_args": {
                            "in": "requestBody",
                            "type": "any"
                        },
                        "from": {
                            "in": "requestBody",
                            "properties": {
                                "email": {
                                    "required": true,
                                    "type": "string"
                                },
                                "name": {
                                    "required": false,
                                    "type": "string"
                                }
                            },
                            "required": true,
                            "type": "object"
                        },
                        "headers": {
                            "in": "requestBody",
                            "type": "any"
                        },
                        "ip_pool_name": {
                            "in": "requestBody",
                            "type": "string"
                        },
                        "mail_settings": {
                            "in": "requestBody",
                            "properties": {
                                "bcc": {
                                    "properties": {
                                        "email": {
                                            "required": false,
                                            "type": "string"
                                        },
                                        "enable": {
                                            "required": false,
                                            "type": "boolean"
                                        }
                                    },
                                    "required": false,
                                    "type": "object"
                                },
                                "bypass_list_management": {
                                    "properties": {
                                        "enable": {
                                            "required": false,
                                            "type": "boolean"
                                        }
                                    },
                                    "required": false,
                                    "type": "object"
                                },
                                "footer": {
                                    "properties": {
                                        "enable": {
                                            "required": false,
                                            "type": "boolean"
                                        },
                                        "html": {
                                            "required": false,
                                            "type": "string"
                                        },
                                        "text": {
                                            "required": false,
                                            "type": "string"
                                        }
                                    },
                                    "required": false,
                                    "type": "object"
                                },
                                "sandbox_mode": {
                                    "properties": {
                                        "enable": {
                                            "type": "boolean"
                                        }
                                    },
                                    "required": false,
                                    "type": "object"
                                },
                                "spam_check": {
                                    "properties": {
                                        "enable": {
                                            "required": false,
                                            "type": "boolean"
                                        },
                                        "post_to_url": {
                                            "required": false,
                                            "type": "string"
                                        },
                                        "threshold": {
                                            "required": false,
                                            "type": "int"
                                        }
                                    },
                                    "required": false,
                                    "type": "object"
                                }
                            },
                            "type": "object"
                        },
                        "personalizations": {
                            "in": "requestBody",
                            "required": true,
                            "type": "list"
                        },
                        "reply_to": {
                            "in": "requestBody",
                            "properties": {
                                "email": {
                                    "required": true,
                                    "type": "string"
                                },
                                "name": {
                                    "required": false,
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        },
                        "sections": {
                            "in": "requestBody",
                            "type": "any"
                        },
                        "send_at": {
                            "in": "requestBody",
                            "type": "int"
                        },
                        "subject": {
                            "in": "requestBody",
                            "type": "string"
                        },
                        "template_id": {
                            "in": "requestBody",
                            "type": "string"
                        },
                        "tracking_settings": {
                            "in": "requestBody",
                            "type": "any"
                        }
                    },
                    "http": {
                        "method": "post",
                        "path": "/send_many",
                        "port": 8080
                    },
                    "output": {
                        "contentType": "application/json",
                        "properties": {
                            "message_id": {
                                "type": "string"
                            }
                        },
                        "type": "object"
                    }
                },
                "sendOne": {
                    "arguments": {
                        "content": {
                            "in": "requestBody",
                            "required": true,
                            "type": "string"
                        },
                        "content_type": {
                            "in": "requestBody",
                            "required": true,
                            "type": "string"
                        },
                        "from": {
                            "in": "requestBody",
                            "required": true,
                            "type": "string"
                        },
                        "subject": {
                            "in": "requestBody",
                            "required": true,
                            "type": "string"
                        },
                        "to": {
                            "in": "requestBody",
                            "required": true,
                            "type": "string"
                        }
                    },
                    "http": {
                        "method": "post",
                        "path": "/send_one",
                        "port": 8080
                    },
                    "output": {
                        "contentType": "application/json",
                        "properties": {
                            "message_id": {
                                "type": "string"
                            }
                        },
                        "type": "object"
                    }
                }
            },
            "environment": {
                "SENDGRID_API_TOKEN": {
                    "help": "Create a Sendgrid account and register an API key at https://app.sendgrid.com/settings/api_keys\n",
                    "required": true,
                    "type": "string"
                }
            },
            "info": {
                "contact": {
                    "email": "core@openmicroservices.org",
                    "name": "Open Microservices",
                    "url": "https://openmicroservices.org"
                },
                "description": "Access to the Sendgrid email API",
                "license": {
                    "name": "MIT",
                    "url": "https://opensource.org/licenses/MIT"
                },
                "title": "Sendgrid",
                "version": "0.1.0"
            },
            "lifecycle": {
                "startup": {
                    "command": [
                        "/app/bin/oms-sendgrid"
                    ]
                }
            },
            "oms": 1
        },
        "readme": "# _Sendgrid_ Open Microservice\n\n> Access to the Sendgrid email API\n\n[![Open Microservice Specification Version](https://img.shields.io/badge/Open%20Microservice-1.0-477bf3.svg)](https://openmicroservices.org)\n[![Open Microservices Spectrum Chat](https://withspectrum.github.io/badge/badge.svg)](https://spectrum.chat/open-microservices)\n[![Open Microservices Code of Conduct](https://img.shields.io/badge/Contributor%20Covenant-v1.4%20adopted-ff69b4.svg)](https://github.com/oms-services/.github/blob/master/CODE_OF_CONDUCT.md)\n[![Open Microservices Commitzen](https://img.shields.io/badge/commitizen-friendly-brightgreen.svg)](http://commitizen.github.io/cz-cli/)\n[![PRs Welcome](https://img.shields.io/badge/PRs-welcome-brightgreen.svg)](http://makeapullrequest.com)\n[![License: MIT](https://img.shields.io/badge/License-MIT-blue.svg)](https://opensource.org/licenses/MIT)\n\n## Introduction\n\nThis project is an example implementation of the [Open Microservice Specification](https://openmicroservices.org), a standard\noriginally created at [Storyscript](https://storyscript.io) for building highly-portable \"microservices\" that expose the\nevents, actions, and APIs inside containerized software.\n\n## Getting Started\n\nThe `oms` command-line interface allows you to interact with Open Microservices. If you're interested in creating an Open\nMicroservice the CLI also helps validate, test, and debug your `oms.yml` implementation!\n\nSee the [oms-cli](https://github.com/microservices/oms) project to learn more!\n\n### Installation\n\n```\nnpm install -g @microservices/oms\n```\n\n## Usage\n\n### Open Microservices CLI Usage\n\nOnce you have the [oms-cli](https://github.com/microservices/oms) installed, you can run any of the following commands from\nwithin this project's root directory:\n\n#### Actions\n\n##### sendOne\n\n>\n\n##### Action Arguments\n\n| Argument Name      | Type     | Required | Default | Description                                                                                     |\n| :----------------- | :------- | :------- | :------ | :---------------------------------------------------------------------------------------------- |\n| from               | `string` | `true`   | None    | No description provided.                                                                        |\n| to                 | `string` | `true`   | None    | No description provided.                                                                        |\n| subject            | `string` | `true`   | None    | No description provided.                                                                        |\n| content            | `string` | `true`   | None    | No description provided.                                                                        |\n| content_type       | `string` | `true`   | None    | No description provided.                                                                        |\n| SENDGRID_API_TOKEN | `string` | `true`   | None    | Create a Sendgrid account and register an API key at https://app.sendgrid.com/settings/api_keys |\n\n```shell\noms run sendOne \\\n    -a from='*****' \\\n    -a to='*****' \\\n    -a subject='*****' \\\n    -a content='*****' \\\n    -a content_type='*****' \\\n    -e SENDGRID_API_TOKEN=$SENDGRID_API_TOKEN\n```\n\n##### sendMany\n\n>\n\n##### Action Arguments\n\n| Argument Name      | Type     | Required | Default | Description                                                                                     |\n| :----------------- | :------- | :------- | :------ | :---------------------------------------------------------------------------------------------- |\n| personalizations   | `list`   | `true`   | None    | No description provided.                                                                        |\n| from               | `object` | `true`   | None    | No description provided.                                                                        |\n| subject            | `string` | `false`  | None    | No description provided.                                                                        |\n| content            | `list`   | `true`   | None    | No description provided.                                                                        |\n| reply_to           | `object` | `false`  | None    | No description provided.                                                                        |\n| attachments        | `list`   | `false`  | None    | No description provided.                                                                        |\n| template_id        | `string` | `false`  | None    | No description provided.                                                                        |\n| sections           | `any`    | `false`  | None    | No description provided.                                                                        |\n| headers            | `any`    | `false`  | None    | No description provided.                                                                        |\n| categories         | `list`   | `false`  | None    | No description provided.                                                                        |\n| custom_args        | `any`    | `false`  | None    | No description provided.                                                                        |\n| send_at            | `int`    | `false`  | None    | No description provided.                                                                        |\n| batch_id           | `string` | `false`  | None    | No description provided.                                                                        |\n| asm                | `object` | `false`  | None    | No description provided.                                                                        |\n| ip_pool_name       | `string` | `false`  | None    | No description provided.                                                                        |\n| mail_settings      | `object` | `false`  | None    | No description provided.                                                                        |\n| tracking_settings  | `any`    | `false`  | None    | No description provided.                                                                        |\n| SENDGRID_API_TOKEN | `string` | `true`   | None    | Create a Sendgrid account and register an API key at https://app.sendgrid.com/settings/api_keys |\n\n```shell\noms run sendMany \\\n    -a personalizations='*****' \\\n    -a from='*****' \\\n    -a subject='*****' \\\n    -a content='*****' \\\n    -a reply_to='*****' \\\n    -a attachments='*****' \\\n    -a template_id='*****' \\\n    -a sections='*****' \\\n    -a headers='*****' \\\n    -a categories='*****' \\\n    -a custom_args='*****' \\\n    -a send_at='*****' \\\n    -a batch_id='*****' \\\n    -a asm='*****' \\\n    -a ip_pool_name='*****' \\\n    -a mail_settings='*****' \\\n    -a tracking_settings='*****' \\\n    -e SENDGRID_API_TOKEN=$SENDGRID_API_TOKEN\n```\n\n## Contributing\n\nAll suggestions in how to improve the specification and this guide are very welcome. Feel free share your thoughts in the\nIssue tracker, or even better, fork the repository to implement your own ideas and submit a pull request.\n\n[![Edit sendgrid on CodeSandbox](https://codesandbox.io/static/img/play-codesandbox.svg)](https://codesandbox.io/s/github/oms-services/sendgrid)\n\nThis project is guided by [Contributor Covenant](https://github.com/oms-services/.github/blob/master/CODE_OF_CONDUCT.md).\nPlease read out full [Contribution Guidelines](https://github.com/oms-services/.github/blob/master/CONTRIBUTING.md).\n\n## Additional Resources\n\n- [Install the CLI](https://github.com/microservices/oms) - The OMS CLI helps developers create, test, validate, and build\n  microservices.\n- [Example OMS Services](https://github.com/oms-services) - Examples of OMS-compliant services written in a variety of\n  languages.\n- [Example Language Implementations](https://github.com/microservices) - Find tooling & language implementations in Node,\n  Python, Scala, Java, Clojure.\n- [Storyscript Hub](https://hub.storyscript.io) - A public registry of OMS services.\n- [Community Chat](https://spectrum.chat/open-microservices) - Have ideas? Questions? Join us on Spectrum.\n",
        "service": {
            "alias": "sendgrid",
            "description": "An OMG service to access the Sendgrid email API",
            "isCertified": true,
            "name": "sendgrid",
            "owner": {
                "username": "oms-services"
            },
            "public": true,
            "topics": [
                "microservice",
                "sendgrid",
                "sendgrid-api",
                "sendgrid-api-wrapper",
                "open-microservice"
            ]
        },
        "serviceUuid": "e9175cb5-c925-460b-b4cd-d4248a6a7cd7",
        "state": "BETA"
    },
    {
        "configuration": {
            "actions": {
                "parse": {
                    "arguments": {
                        "url": {
                            "default": "https://www.npr.org/rss/podcast.php?id=510333",
                            "help": "The target RSS feed to parse.",
                            "in": "requestBody",
                            "required": true,
                            "type": "string"
                        }
                    },
                    "http": {
                        "method": "post",
                        "path": "/parse",
                        "port": 8080
                    },
                    "output": {
                        "contentType": "application/json",
                        "type": "map"
                    }
                }
            },
            "health": {
                "http": {
                    "path": "/health",
                    "port": 8080
                }
            },
            "info": {
                "description": "An Open Microservice that parses RSS.",
                "license": {
                    "name": "MIT",
                    "url": "https://opensource.org/licenses/MIT"
                },
                "title": "oms-parse-rss",
                "version": "1.0.0"
            },
            "lifecycle": {
                "startup": {
                    "command": [
                        "node",
                        "/app/src/index.js"
                    ]
                }
            },
            "oms": 1
        },
        "readme": "# Microservice template for NodeJS\n\n![Microservice](https://img.shields.io/badge/microservice-ready-brightgreen.svg?style=for-the-badge)\n[![Build status](https://img.shields.io/travis/com/microservices/node/master.svg?style=for-the-badge)](https://travis-ci.com/microservices/node)\n\nAn OMS template for NodeJS + ExpressJS.\n\n## Setup\n\nLatest LTS version of Node.js 10.\n[See Releases](https://nodejs.org/en/about/releases/).\n\n```sh\nyarn\n```\n\nFirst, install the [Commitizen cli](https://github.com/commitizen/cz-cli) tools:\n\n```shell\nnpm install commitizen -g\n```\n\nNext, initialize your project to use the `cz-conventional-changelog` adapter by\ntyping\n\n```sh\ncommitizen init cz-conventional-changelog --yarn --dev --exact\n```\n\nUse the following to replace `git commit`:\n\n```sh\nyarn run commit\n```\n\n## Test\n\n## OMS Test Runner\n\n```sh\n> omg run message -a name=Service\n\u2139 Building Docker image\n\u2026\n\u2714 Built Docker image with name: omg/l2hvbwuvc2vil2fzew5jes9ydwj5\n\u2714 Started Docker container: 1c8a91688261\n\u2714 Health check passed\n\u2714 Ran action: `message` with output: {\"message\":\"Hello Service\"}\n\u2714 Stopped Docker container: 1c8a91688261\n```\n",
        "service": {
            "alias": null,
            "description": "An Open Microservice that parses RSS.",
            "isCertified": false,
            "name": "oms-parse-rss",
            "owner": {
                "username": "matthewhudson"
            },
            "public": true,
            "topics": [
                "oms",
                "open-microservice"
            ]
        },
        "serviceUuid": "5729bd03-706a-4694-a3c0-a14b736f458e",
        "state": "BETA"
    },
    {
        "configuration": {
            "actions": {
                "write": {
                    "arguments": {
                        "text": {
                            "required": true,
                            "type": "string"
                        }
                    }
                }
            },
            "lifecycle": {
                "startup": {
                    "command": [
                        "python",
                        "/app/app.py"
                    ]
                }
            },
            "omg": 1
        },
        "readme": "Execute a kubectl command\n\nExample:\nkubectl apply -f pvc.yaml\n",
        "service": {
            "alias": null,
            "description": null,
            "isCertified": false,
            "name": "volumeadd",
            "owner": {
                "username": "rashmi43"
            },
            "public": true,
            "topics": []
        },
        "serviceUuid": "cc3128d3-c009-4a07-848c-5bf28b69543c",
        "state": "BETA"
    },
    {
        "configuration": {
            "actions": {
                "isValid": {
                    "arguments": {
                        "uri": {
                            "in": "query",
                            "required": true,
                            "type": "string"
                        }
                    },
                    "help": "Is the given URI valid?\n",
                    "http": {
                        "method": "get",
                        "path": "/validate",
                        "port": 8080
                    },
                    "output": {
                        "type": "boolean"
                    }
                },
                "parse": {
                    "arguments": {
                        "uri": {
                            "in": "query",
                            "required": true,
                            "type": "string"
                        }
                    },
                    "help": "Parse a given URI into its parts.\n",
                    "http": {
                        "method": "get",
                        "path": "/parse",
                        "port": 8080
                    },
                    "output": {
                        "type": "map"
                    }
                },
                "query": {
                    "arguments": {
                        "uri": {
                            "in": "query",
                            "required": true,
                            "type": "string"
                        }
                    },
                    "help": "Parse a given URI's query fragment.\n",
                    "http": {
                        "method": "get",
                        "path": "/query",
                        "port": 8080
                    },
                    "output": {
                        "type": "map"
                    }
                }
            },
            "info": {
                "contact": {
                    "email": "core@openmicroservices.org",
                    "name": "Open Microservices",
                    "url": "https://openmicroservices.org"
                },
                "description": "URI Tools",
                "license": {
                    "name": "MIT",
                    "url": "https://opensource.org/licenses/MIT"
                },
                "title": "URI Tools",
                "version": "0.1.3"
            },
            "lifecycle": {
                "startup": {
                    "command": [
                        "python3",
                        "/app/service.py"
                    ]
                }
            },
            "oms": 1
        },
        "readme": "# _URI Tools_ Open Microservice\n\n> URI Tools\n\n[![Open Microservice Specification Version](https://img.shields.io/badge/Open%20Microservice-1.0-477bf3.svg)](https://openmicroservices.org)\n[![Open Microservices Spectrum Chat](https://withspectrum.github.io/badge/badge.svg)](https://spectrum.chat/open-microservices)\n[![Open Microservices Code of Conduct](https://img.shields.io/badge/Contributor%20Covenant-v1.4%20adopted-ff69b4.svg)](https://github.com/oms-services/.github/blob/master/CODE_OF_CONDUCT.md)\n[![Open Microservices Commitzen](https://img.shields.io/badge/commitizen-friendly-brightgreen.svg)](http://commitizen.github.io/cz-cli/)\n[![PRs Welcome](https://img.shields.io/badge/PRs-welcome-brightgreen.svg)](http://makeapullrequest.com)\n[![License: MIT](https://img.shields.io/badge/License-MIT-blue.svg)](https://opensource.org/licenses/MIT)\n\n## Introduction\n\nThis project is an example implementation of the\n[Open Microservice Specification](https://openmicroservices.org), a standard\noriginally created at [Storyscript](https://storyscript.io) for building\nhighly-portable \"microservices\" that expose the events, actions, and APIs inside\ncontainerized software.\n\n## Getting Started\n\nThe `oms` command-line interface allows you to interact with Open Microservices.\nIf you're interested in creating an Open Microservice the CLI also helps\nvalidate, test, and debug your `oms.yml` implementation!\n\nSee the [oms-cli](https://github.com/microservices/oms) project to learn more!\n\n### Installation\n\n```\nnpm install -g @microservices/oms\n```\n\n## Usage\n\n### Open Microservices CLI Usage\n\nOnce you have the [oms-cli](https://github.com/microservices/oms) installed, you\ncan run any of the following commands from within this project's root directory:\n\n#### Actions\n\n##### parse\n\n> Parse a given URI into its parts.\n\n##### Action Arguments\n\n| Argument Name | Type     | Required | Default | Description              |\n| :------------ | :------- | :------- | :------ | :----------------------- |\n| uri           | `string` | `true`   | None    | No description provided. |\n\n```shell\noms run parse \\\n    -a uri='*****'\n```\n\n##### query\n\n> Parse a given URI's query fragment.\n\n##### Action Arguments\n\n| Argument Name | Type     | Required | Default | Description              |\n| :------------ | :------- | :------- | :------ | :----------------------- |\n| uri           | `string` | `true`   | None    | No description provided. |\n\n```shell\noms run query \\\n    -a uri='*****'\n```\n\n##### isValid\n\n> Is the given URI valid?\n\n##### Action Arguments\n\n| Argument Name | Type     | Required | Default | Description              |\n| :------------ | :------- | :------- | :------ | :----------------------- |\n| uri           | `string` | `true`   | None    | No description provided. |\n\n```shell\noms run isValid \\\n    -a uri='*****'\n```\n\n## Contributing\n\nAll suggestions in how to improve the specification and this guide are very\nwelcome. Feel free share your thoughts in the Issue tracker, or even better,\nfork the repository to implement your own ideas and submit a pull request.\n\n[![Edit uritool on CodeSandbox](https://codesandbox.io/static/img/play-codesandbox.svg)](https://codesandbox.io/s/github/oms-services/uritool)\n\nThis project is guided by\n[Contributor Covenant](https://github.com/oms-services/.github/blob/master/CODE_OF_CONDUCT.md).\nPlease read out full\n[Contribution Guidelines](https://github.com/oms-services/.github/blob/master/CONTRIBUTING.md).\n\n## Additional Resources\n\n- [Install the CLI](https://github.com/microservices/oms) - The OMS CLI helps\n  developers create, test, validate, and build microservices.\n- [Example OMS Services](https://github.com/oms-services) - Examples of\n  OMS-compliant services written in a variety of languages.\n- [Example Language Implementations](https://github.com/microservices) - Find\n  tooling & language implementations in Node, Python, Scala, Java, Clojure.\n- [Storyscript Hub](https://hub.storyscript.io) - A public registry of OMS\n  services.\n- [Community Chat](https://spectrum.chat/open-microservices) - Have ideas?\n  Questions? Join us on Spectrum.\n",
        "service": {
            "alias": "uritool",
            "description": null,
            "isCertified": false,
            "name": "uritool",
            "owner": {
                "username": "kennethreitz"
            },
            "public": true,
            "topics": [
                "microservice",
                "oms",
                "open-microservice"
            ]
        },
        "serviceUuid": "2ca50510-7964-4efe-89aa-b9ea63b5e4c8",
        "state": "BETA"
    },
    {
        "configuration": {
            "actions": {
                "isValid": {
                    "arguments": {
                        "uri": {
                            "in": "query",
                            "required": true,
                            "type": "string"
                        }
                    },
                    "help": "Is the given URI valid?\n",
                    "http": {
                        "method": "get",
                        "path": "/validate",
                        "port": 8080
                    },
                    "output": {
                        "type": "boolean"
                    }
                },
                "parse": {
                    "arguments": {
                        "uri": {
                            "in": "query",
                            "required": true,
                            "type": "string"
                        }
                    },
                    "help": "Parse a given URI into its parts.\n",
                    "http": {
                        "method": "get",
                        "path": "/parse",
                        "port": 8080
                    },
                    "output": {
                        "type": "map"
                    }
                },
                "query": {
                    "arguments": {
                        "uri": {
                            "in": "query",
                            "required": true,
                            "type": "string"
                        }
                    },
                    "help": "Parse a given URI's query fragment.\n",
                    "http": {
                        "method": "get",
                        "path": "/query",
                        "port": 8080
                    },
                    "output": {
                        "type": "map"
                    }
                }
            },
            "info": {
                "contact": {
                    "email": "core@openmicroservices.org",
                    "name": "Open Microservices",
                    "url": "https://openmicroservices.org"
                },
                "description": "URI Tools",
                "license": {
                    "name": "MIT",
                    "url": "https://opensource.org/licenses/MIT"
                },
                "title": "URI Tools",
                "version": "0.1.3"
            },
            "lifecycle": {
                "startup": {
                    "command": [
                        "python3",
                        "/app/service.py"
                    ]
                }
            },
            "oms": 1
        },
        "readme": "# _URI Tools_ Open Microservice\n\n> URI Tools\n\n[![Open Microservice Specification Version](https://img.shields.io/badge/Open%20Microservice-1.0-477bf3.svg)](https://openmicroservices.org)\n[![Open Microservices Spectrum Chat](https://withspectrum.github.io/badge/badge.svg)](https://spectrum.chat/open-microservices)\n[![Open Microservices Code of Conduct](https://img.shields.io/badge/Contributor%20Covenant-v1.4%20adopted-ff69b4.svg)](https://github.com/oms-services/.github/blob/master/CODE_OF_CONDUCT.md)\n[![Open Microservices Commitzen](https://img.shields.io/badge/commitizen-friendly-brightgreen.svg)](http://commitizen.github.io/cz-cli/)\n[![PRs Welcome](https://img.shields.io/badge/PRs-welcome-brightgreen.svg)](http://makeapullrequest.com)\n[![License: MIT](https://img.shields.io/badge/License-MIT-blue.svg)](https://opensource.org/licenses/MIT)\n\n## Introduction\n\nThis project is an example implementation of the\n[Open Microservice Specification](https://openmicroservices.org), a standard\noriginally created at [Storyscript](https://storyscript.io) for building\nhighly-portable \"microservices\" that expose the events, actions, and APIs inside\ncontainerized software.\n\n## Getting Started\n\nThe `oms` command-line interface allows you to interact with Open Microservices.\nIf you're interested in creating an Open Microservice the CLI also helps\nvalidate, test, and debug your `oms.yml` implementation!\n\nSee the [oms-cli](https://github.com/microservices/oms) project to learn more!\n\n### Installation\n\n```\nnpm install -g @microservices/oms\n```\n\n## Usage\n\n### Open Microservices CLI Usage\n\nOnce you have the [oms-cli](https://github.com/microservices/oms) installed, you\ncan run any of the following commands from within this project's root directory:\n\n#### Actions\n\n##### parse\n\n> Parse a given URI into its parts.\n\n##### Action Arguments\n\n| Argument Name | Type     | Required | Default | Description              |\n| :------------ | :------- | :------- | :------ | :----------------------- |\n| uri           | `string` | `true`   | None    | No description provided. |\n\n```shell\noms run parse \\\n    -a uri='*****'\n```\n\n##### query\n\n> Parse a given URI's query fragment.\n\n##### Action Arguments\n\n| Argument Name | Type     | Required | Default | Description              |\n| :------------ | :------- | :------- | :------ | :----------------------- |\n| uri           | `string` | `true`   | None    | No description provided. |\n\n```shell\noms run query \\\n    -a uri='*****'\n```\n\n##### isValid\n\n> Is the given URI valid?\n\n##### Action Arguments\n\n| Argument Name | Type     | Required | Default | Description              |\n| :------------ | :------- | :------- | :------ | :----------------------- |\n| uri           | `string` | `true`   | None    | No description provided. |\n\n```shell\noms run isValid \\\n    -a uri='*****'\n```\n\n## Contributing\n\nAll suggestions in how to improve the specification and this guide are very\nwelcome. Feel free share your thoughts in the Issue tracker, or even better,\nfork the repository to implement your own ideas and submit a pull request.\n\n[![Edit uritool on CodeSandbox](https://codesandbox.io/static/img/play-codesandbox.svg)](https://codesandbox.io/s/github/oms-services/uritool)\n\nThis project is guided by\n[Contributor Covenant](https://github.com/oms-services/.github/blob/master/CODE_OF_CONDUCT.md).\nPlease read out full\n[Contribution Guidelines](https://github.com/oms-services/.github/blob/master/CONTRIBUTING.md).\n\n## Additional Resources\n\n- [Install the CLI](https://github.com/microservices/oms) - The OMS CLI helps\n  developers create, test, validate, and build microservices.\n- [Example OMS Services](https://github.com/oms-services) - Examples of\n  OMS-compliant services written in a variety of languages.\n- [Example Language Implementations](https://github.com/microservices) - Find\n  tooling & language implementations in Node, Python, Scala, Java, Clojure.\n- [Storyscript Hub](https://hub.storyscript.io) - A public registry of OMS\n  services.\n- [Community Chat](https://spectrum.chat/open-microservices) - Have ideas?\n  Questions? Join us on Spectrum.\n",
        "service": {
            "alias": "uritool",
            "description": null,
            "isCertified": false,
            "name": "uritool",
            "owner": {
                "username": "kennethreitz"
            },
            "public": true,
            "topics": [
                "microservice",
                "oms",
                "open-microservice"
            ]
        },
        "serviceUuid": "2ca50510-7964-4efe-89aa-b9ea63b5e4c8",
        "state": "BETA"
    },
    {
        "configuration": {
            "actions": {
                "geocode": {
                    "arguments": {
                        "address": {
                            "in": "requestBody",
                            "required": true,
                            "type": "string"
                        }
                    },
                    "http": {
                        "method": "post",
                        "path": "/geocode",
                        "port": 8000
                    },
                    "output": {
                        "contentType": "application/json",
                        "properties": {
                            "lat": {
                                "type": "float"
                            },
                            "lon": {
                                "type": "float"
                            }
                        },
                        "type": "object"
                    }
                },
                "reverse_geocode": {
                    "arguments": {
                        "lat": {
                            "in": "requestBody",
                            "required": true,
                            "type": "float"
                        },
                        "lon": {
                            "in": "requestBody",
                            "required": true,
                            "type": "float"
                        }
                    },
                    "http": {
                        "method": "post",
                        "path": "/reverse_geocode",
                        "port": 8000
                    },
                    "output": {
                        "contentType": "application/json",
                        "properties": {
                            "city": {
                                "type": "string"
                            },
                            "country": {
                                "type": "string"
                            },
                            "full_response": {
                                "type": "list"
                            },
                            "state": {
                                "type": "string"
                            }
                        },
                        "type": "object"
                    }
                }
            },
            "environment": {
                "API_KEY": {
                    "help": "Create an API key for using the Google Maps API from\nhttps://console.developers.google.com/apis/credentials\n",
                    "required": true,
                    "type": "string"
                }
            },
            "info": {
                "contact": {
                    "email": "core@openmicroservices.org",
                    "name": "Open Microservices",
                    "url": "https://openmicroservices.org"
                },
                "description": "A wrapper for the Google Maps API",
                "title": "Google Maps",
                "version": "1.0.0"
            },
            "lifecycle": {
                "startup": {
                    "command": [
                        "python",
                        "/app/app.py"
                    ]
                }
            },
            "oms": 1
        },
        "readme": "# _gmaps_ Open Microservice\n\n> This is a gmaps service\n\n[![Open Microservice Specification Version](https://img.shields.io/badge/Open%20Microservice-1.0-477bf3.svg)](https://openmicroservices.org) [![Open Microservices Spectrum Chat](https://withspectrum.github.io/badge/badge.svg)](https://spectrum.chat/open-microservices) [![Open Microservices Code of Conduct](https://img.shields.io/badge/Contributor%20Covenant-v1.4%20adopted-ff69b4.svg)](https://github.com/oms-services/.github/blob/master/CODE_OF_CONDUCT.md) [![Open Microservices Commitzen](https://img.shields.io/badge/commitizen-friendly-brightgreen.svg)](http://commitizen.github.io/cz-cli/) [![PRs Welcome](https://img.shields.io/badge/PRs-welcome-brightgreen.svg)](http://makeapullrequest.com)\n\n## Introduction\n\nThis project is an example implementation of the [Open Microservice Specification](https://openmicroservices.org), a standard originally created at [Storyscript](https://storyscript.io) for building highly-portable \"microservices\" that expose the events, actions, and APIs inside containerized software.\n\n## Getting Started\n\nThe `oms` command-line interface allows you to interact with Open Microservices. If you're interested in creating an Open Microservice the CLI also helps validate, test, and debug your `oms.yml` implementation!\n\nSee the [oms-cli](https://github.com/microservices/oms) project to learn more!\n\n### Installation\n\n```\nnpm install -g @microservices/oms\n```\n\n## Usage\n\n### Open Microservices CLI Usage\n\nOnce you have the [oms-cli](https://github.com/microservices/oms) installed, you can run any of the following commands from within this project's root directory:\n\n#### Actions\n\n##### geocode\n\n> \n##### Action Arguments\n\n| Argument Name | Type | Required | Default | Description |\n|:------------- |:---- |:-------- |:--------|:----------- |\n| address | `string` | `true` | None | No description provided. |\n| API_KEY | `string` | `true` | None | Create an API key for using the Google Maps API from https://console.developers.google.com/apis/credentials  |\n\n``` shell\noms run geocode \\ \n    -a address='*****' \\ \n    -e API_KEY=$API_KEY\n```\n\n##### reverse_geocode\n\n> \n##### Action Arguments\n\n| Argument Name | Type | Required | Default | Description |\n|:------------- |:---- |:-------- |:--------|:----------- |\n| lat | `float` | `true` | None | No description provided. |\n| lon | `float` | `true` | None | No description provided. |\n| API_KEY | `string` | `true` | None | Create an API key for using the Google Maps API from https://console.developers.google.com/apis/credentials  |\n\n``` shell\noms run reverse_geocode \\ \n    -a lat='*****' \\ \n    -a lon='*****' \\ \n    -e API_KEY=$API_KEY\n```\n\n## Contributing\n\nAll suggestions in how to improve the specification and this guide are very welcome. Feel free share your thoughts in the Issue tracker, or even better, fork the repository to implement your own ideas and submit a pull request.\n\n[![Edit gmaps on CodeSandbox](https://codesandbox.io/static/img/play-codesandbox.svg)](https://codesandbox.io/s/github/oms-services/gmaps)\n\nThis project is guided by [Contributor Covenant](https://github.com/oms-services/.github/blob/master/CODE_OF_CONDUCT.md). Please read out full [Contribution Guidelines](https://github.com/oms-services/.github/blob/master/CONTRIBUTING.md).\n\n## Additional Resources\n\n* [Install the CLI](https://github.com/microservices/oms) - The OMS CLI helps developers create, test, validate, and build microservices.\n* [Example OMS Services](https://github.com/oms-services) - Examples of OMS-compliant services written in a variety of languages.\n* [Example Language Implementations](https://github.com/microservices) - Find tooling & language implementations in Node, Python, Scala, Java, Clojure.\n* [Storyscript Hub](https://hub.storyscript.io) - A public registry of OMS services.\n* [Community Chat](https://spectrum.chat/open-microservices) - Have ideas? Questions? Join us on Spectrum.\n",
        "service": {
            "alias": "gmaps",
            "description": "Google Maps API exposed as an OMG service",
            "isCertified": true,
            "name": "gmaps",
            "owner": {
                "username": "oms-services"
            },
            "public": true,
            "topics": [
                "google-maps-api",
                "google-maps-geocoding-api",
                "google-maps",
                "microservice",
                "open-microservice",
                "oms"
            ]
        },
        "serviceUuid": "692c8c3e-821d-410a-9b98-3bb94dda2c81",
        "state": "BETA"
    },
    {
        "configuration": {
            "actions": {
                "geocode": {
                    "arguments": {
                        "address": {
                            "in": "requestBody",
                            "required": true,
                            "type": "string"
                        }
                    },
                    "http": {
                        "method": "post",
                        "path": "/geocode",
                        "port": 8000
                    },
                    "output": {
                        "contentType": "application/json",
                        "properties": {
                            "lat": {
                                "type": "float"
                            },
                            "lon": {
                                "type": "float"
                            }
                        },
                        "type": "object"
                    }
                },
                "reverse_geocode": {
                    "arguments": {
                        "lat": {
                            "in": "requestBody",
                            "required": true,
                            "type": "float"
                        },
                        "lon": {
                            "in": "requestBody",
                            "required": true,
                            "type": "float"
                        }
                    },
                    "http": {
                        "method": "post",
                        "path": "/reverse_geocode",
                        "port": 8000
                    },
                    "output": {
                        "contentType": "application/json",
                        "properties": {
                            "city": {
                                "type": "string"
                            },
                            "country": {
                                "type": "string"
                            },
                            "full_response": {
                                "type": "list"
                            },
                            "state": {
                                "type": "string"
                            }
                        },
                        "type": "object"
                    }
                }
            },
            "environment": {
                "API_KEY": {
                    "help": "Create an API key for using the Google Maps API from\nhttps://console.developers.google.com/apis/credentials\n",
                    "required": true,
                    "type": "string"
                }
            },
            "info": {
                "contact": {
                    "email": "core@openmicroservices.org",
                    "name": "Open Microservices",
                    "url": "https://openmicroservices.org"
                },
                "description": "A wrapper for the Google Maps API",
                "title": "Google Maps",
                "version": "1.0.0"
            },
            "lifecycle": {
                "startup": {
                    "command": [
                        "python",
                        "/app/app.py"
                    ]
                }
            },
            "oms": 1
        },
        "readme": "# _gmaps_ Open Microservice\n\n> This is a gmaps service\n\n[![Open Microservice Specification Version](https://img.shields.io/badge/Open%20Microservice-1.0-477bf3.svg)](https://openmicroservices.org) [![Open Microservices Spectrum Chat](https://withspectrum.github.io/badge/badge.svg)](https://spectrum.chat/open-microservices) [![Open Microservices Code of Conduct](https://img.shields.io/badge/Contributor%20Covenant-v1.4%20adopted-ff69b4.svg)](https://github.com/oms-services/.github/blob/master/CODE_OF_CONDUCT.md) [![Open Microservices Commitzen](https://img.shields.io/badge/commitizen-friendly-brightgreen.svg)](http://commitizen.github.io/cz-cli/) [![PRs Welcome](https://img.shields.io/badge/PRs-welcome-brightgreen.svg)](http://makeapullrequest.com)\n\n## Introduction\n\nThis project is an example implementation of the [Open Microservice Specification](https://openmicroservices.org), a standard originally created at [Storyscript](https://storyscript.io) for building highly-portable \"microservices\" that expose the events, actions, and APIs inside containerized software.\n\n## Getting Started\n\nThe `oms` command-line interface allows you to interact with Open Microservices. If you're interested in creating an Open Microservice the CLI also helps validate, test, and debug your `oms.yml` implementation!\n\nSee the [oms-cli](https://github.com/microservices/oms) project to learn more!\n\n### Installation\n\n```\nnpm install -g @microservices/oms\n```\n\n## Usage\n\n### Open Microservices CLI Usage\n\nOnce you have the [oms-cli](https://github.com/microservices/oms) installed, you can run any of the following commands from within this project's root directory:\n\n#### Actions\n\n##### geocode\n\n> \n##### Action Arguments\n\n| Argument Name | Type | Required | Default | Description |\n|:------------- |:---- |:-------- |:--------|:----------- |\n| address | `string` | `true` | None | No description provided. |\n| API_KEY | `string` | `true` | None | Create an API key for using the Google Maps API from https://console.developers.google.com/apis/credentials  |\n\n``` shell\noms run geocode \\ \n    -a address='*****' \\ \n    -e API_KEY=$API_KEY\n```\n\n##### reverse_geocode\n\n> \n##### Action Arguments\n\n| Argument Name | Type | Required | Default | Description |\n|:------------- |:---- |:-------- |:--------|:----------- |\n| lat | `float` | `true` | None | No description provided. |\n| lon | `float` | `true` | None | No description provided. |\n| API_KEY | `string` | `true` | None | Create an API key for using the Google Maps API from https://console.developers.google.com/apis/credentials  |\n\n``` shell\noms run reverse_geocode \\ \n    -a lat='*****' \\ \n    -a lon='*****' \\ \n    -e API_KEY=$API_KEY\n```\n\n## Contributing\n\nAll suggestions in how to improve the specification and this guide are very welcome. Feel free share your thoughts in the Issue tracker, or even better, fork the repository to implement your own ideas and submit a pull request.\n\n[![Edit gmaps on CodeSandbox](https://codesandbox.io/static/img/play-codesandbox.svg)](https://codesandbox.io/s/github/oms-services/gmaps)\n\nThis project is guided by [Contributor Covenant](https://github.com/oms-services/.github/blob/master/CODE_OF_CONDUCT.md). Please read out full [Contribution Guidelines](https://github.com/oms-services/.github/blob/master/CONTRIBUTING.md).\n\n## Additional Resources\n\n* [Install the CLI](https://github.com/microservices/oms) - The OMS CLI helps developers create, test, validate, and build microservices.\n* [Example OMS Services](https://github.com/oms-services) - Examples of OMS-compliant services written in a variety of languages.\n* [Example Language Implementations](https://github.com/microservices) - Find tooling & language implementations in Node, Python, Scala, Java, Clojure.\n* [Storyscript Hub](https://hub.storyscript.io) - A public registry of OMS services.\n* [Community Chat](https://spectrum.chat/open-microservices) - Have ideas? Questions? Join us on Spectrum.\n",
        "service": {
            "alias": "gmaps",
            "description": "Google Maps API exposed as an OMG service",
            "isCertified": true,
            "name": "gmaps",
            "owner": {
                "username": "oms-services"
            },
            "public": true,
            "topics": [
                "google-maps-api",
                "google-maps-geocoding-api",
                "google-maps",
                "microservice",
                "open-microservice",
                "oms"
            ]
        },
        "serviceUuid": "692c8c3e-821d-410a-9b98-3bb94dda2c81",
        "state": "BETA"
    },
    {
        "configuration": {
            "actions": {
                "fetch": {
                    "arguments": {
                        "body": {
                            "in": "requestBody",
                            "type": "any"
                        },
                        "headers": {
                            "in": "requestBody",
                            "type": "map"
                        },
                        "method": {
                            "default": "get",
                            "enum": [
                                "get",
                                "post",
                                "patch",
                                "delete",
                                "put",
                                "options"
                            ],
                            "in": "requestBody",
                            "type": "enum"
                        },
                        "query": {
                            "help": "Set an optional map of query parameters.\nQuery parameters are automatically appended to the url specified (/url?foo=bar&john=doe)\n",
                            "in": "requestBody",
                            "type": "map"
                        },
                        "url": {
                            "in": "requestBody",
                            "required": true,
                            "type": "string"
                        }
                    },
                    "help": "Make a HTTP request to the outside world.\nThis command is native to the platform for performance reasons.\n",
                    "http": {
                        "method": "post",
                        "path": "/ignore",
                        "port": 8000
                    },
                    "output": {
                        "type": "any"
                    }
                },
                "server": {
                    "events": {
                        "listen": {
                            "arguments": {
                                "method": {
                                    "default": "get",
                                    "enum": [
                                        "get",
                                        "post",
                                        "patch",
                                        "delete",
                                        "put",
                                        "options"
                                    ],
                                    "in": "requestBody",
                                    "type": "enum"
                                },
                                "path": {
                                    "in": "requestBody",
                                    "required": true,
                                    "type": "string"
                                }
                            },
                            "help": "Listen and respond to http connections by\nregistering with the Storyscript Gateway resulting in a serverless function.\n",
                            "http": {
                                "port": 8889,
                                "subscribe": {
                                    "contentType": "application/json",
                                    "method": "post",
                                    "path": "/register"
                                },
                                "unsubscribe": {
                                    "contentType": "application/json",
                                    "method": "post",
                                    "path": "/unregister"
                                }
                            },
                            "output": {
                                "actions": {
                                    "addHeader": {
                                        "arguments": {
                                            "name": {
                                                "in": "responseBody",
                                                "required": true,
                                                "type": "string"
                                            },
                                            "value": {
                                                "in": "responseBody",
                                                "required": true,
                                                "type": "string"
                                            }
                                        },
                                        "help": "Add an HTTP header.",
                                        "http": {
                                            "contentType": "application/json",
                                            "use_event_conn": true
                                        }
                                    },
                                    "finish": {
                                        "help": "Finish a response and send it to the client.",
                                        "http": {
                                            "contentType": "application/json",
                                            "use_event_conn": true
                                        }
                                    },
                                    "flush": {
                                        "help": "Flushes the current output buffer to the network.",
                                        "http": {
                                            "contentType": "application/json",
                                            "use_event_conn": true
                                        }
                                    },
                                    "redirect": {
                                        "arguments": {
                                            "query": {
                                                "help": "These query parameters are appended to the URL specified.",
                                                "in": "responseBody",
                                                "type": "map"
                                            },
                                            "url": {
                                                "in": "responseBody",
                                                "required": true,
                                                "type": "string"
                                            }
                                        },
                                        "help": "Redirect the incoming URL. No additional actions may be used after executing this command.",
                                        "http": {
                                            "contentType": "application/json",
                                            "use_event_conn": true
                                        }
                                    },
                                    "setStatus": {
                                        "arguments": {
                                            "code": {
                                                "in": "responseBody",
                                                "required": true,
                                                "type": "int"
                                            }
                                        },
                                        "help": "Set an HTTP status code.",
                                        "http": {
                                            "contentType": "application/json",
                                            "use_event_conn": true
                                        }
                                    },
                                    "set_header": {
                                        "arguments": {
                                            "key": {
                                                "in": "responseBody",
                                                "required": true,
                                                "type": "string"
                                            },
                                            "value": {
                                                "in": "responseBody",
                                                "required": true,
                                                "type": "string"
                                            }
                                        },
                                        "help": "DEPRECATED. Use 'header'.",
                                        "http": {
                                            "contentType": "application/json",
                                            "use_event_conn": true
                                        }
                                    },
                                    "set_status": {
                                        "arguments": {
                                            "code": {
                                                "in": "responseBody",
                                                "required": true,
                                                "type": "int"
                                            }
                                        },
                                        "help": "DEPRECATED. Use 'status'.",
                                        "http": {
                                            "contentType": "application/json",
                                            "use_event_conn": true
                                        }
                                    },
                                    "write": {
                                        "arguments": {
                                            "content": {
                                                "help": "The response content.",
                                                "in": "responseBody",
                                                "required": true,
                                                "type": "string"
                                            },
                                            "flush": {
                                                "help": "Parameter which decides whether to flush the response.",
                                                "in": "responseBody",
                                                "required": false,
                                                "type": "boolean"
                                            }
                                        },
                                        "http": {
                                            "contentType": "application/json",
                                            "use_event_conn": true
                                        }
                                    },
                                    "writeJSON": {
                                        "arguments": {
                                            "content": {
                                                "help": "The content from which the JSON response will be built.",
                                                "in": "responseBody",
                                                "required": true,
                                                "type": "any"
                                            }
                                        },
                                        "help": "Write a JSON response body.",
                                        "http": {
                                            "contentType": "application/json",
                                            "use_event_conn": true
                                        }
                                    }
                                },
                                "contentType": "application/json",
                                "properties": {
                                    "body": {
                                        "help": "The JSON body of the incoming HTTP request",
                                        "type": "map"
                                    },
                                    "files": {
                                        "map": {
                                            "keys": {
                                                "help": "File name in the request",
                                                "type": "string"
                                            },
                                            "values": {
                                                "help": "Individual file object",
                                                "properties": {
                                                    "body": {
                                                        "help": "Raw source of this file",
                                                        "type": "string"
                                                    },
                                                    "contentType": {
                                                        "help": "Content-Type of the file object",
                                                        "type": "string"
                                                    },
                                                    "filename": {
                                                        "help": "Original local file name",
                                                        "type": "string"
                                                    },
                                                    "name": {
                                                        "help": "File name in the request",
                                                        "type": "string"
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        },
                                        "type": "map"
                                    },
                                    "formFields": {
                                        "help": "The form fields of the incoming HTTP request",
                                        "map": {
                                            "keys": {
                                                "type": "string"
                                            },
                                            "values": {
                                                "type": "string"
                                            }
                                        },
                                        "type": "map"
                                    },
                                    "headers": {
                                        "help": "The HTTP headers of the incoming HTTP request",
                                        "type": "map"
                                    },
                                    "path": {
                                        "help": "The path portion of the URI of the incoming HTTP request",
                                        "type": "string"
                                    },
                                    "queryParams": {
                                        "help": "The parsed query parameters of the HTTP request",
                                        "map": {
                                            "keys": {
                                                "type": "string"
                                            },
                                            "values": {
                                                "type": "string"
                                            }
                                        },
                                        "type": "map"
                                    },
                                    "query_params": {
                                        "help": "DEPRECATED. Use 'queryParams'.\n",
                                        "map": {
                                            "keys": {
                                                "type": "string"
                                            },
                                            "values": {
                                                "type": "string"
                                            }
                                        },
                                        "type": "map"
                                    },
                                    "uri": {
                                        "help": "The URI of the incoming HTTP request",
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                }
            },
            "info": {
                "contact": {
                    "email": "infra@storyscript.io",
                    "name": "Storyscript",
                    "url": "https://storyscript.io"
                },
                "description": "This is the HTTP service for Storyscript Cloud, which allows stories to be triggered via HTTP from the outside world.",
                "license": {
                    "name": "Apache 2",
                    "url": "http://opensource.org/licenses/Apache-2.0"
                },
                "title": "HTTP gateway for Storyscript Cloud",
                "version": "1.0.0"
            },
            "omg": 1
        },
        "readme": "# Storyscript HTTP Gateway\n\nAPI gateway server for executing Stories via HTTP.\n\n```coffee\nhttp server as server\n  when server listen method:\"post\" path:\"/\" as r\n    log info msg:(r.body to string)\n    log info msg:(r.headers to string)\n    log info msg:r.headers[\"Host\"]\n    r write content:\"Hello World\"\n    r setStatus code:200\n    r finish\n```\n\n```sh\n$ curl https://foobar.storyscriptapp.com/\nHello World\n```\n\n\n## Development\n\nSetup virtual environment and install dependencies\n```\nvirtualenv -p python3.6 venv\nsource venv/bin/activate\npip install -r requirements.txt\n```\n\nYou may need to tell pycurl the path to your openssl installation\n```\npip install --install-option=\"--with-openssl\" --install-option=\"--openssl-dir=/usr/local/opt/openssl\" pycurl\n```\nSee https://github.com/nahamsec/JSParser/issues/22\n\n\nRun locally by calling\n\n```\npython -m app.main --logging=debug --debug\n```\n\n### Register an endpoint\n\n```shell\ncurl --data '{\"endpoint\": \"http://localhost:9000/story/foo\", \"data\":{\"path\":\"/ping\", \"method\": \"post\", \"host\": \"a\"}}' \\\n     -H \"Content-Type: application/json\" \\\n     localhost:8889/register\n```\n\nNow access that endpoint\n\n```shell\ncurl -X POST -d 'foobar' -H \"Host: a.storyscriptapp.com\" http://localhost:8888/ping\n```\n\n### Unregister an endpoint\n\n```shell\ncurl --data '{\"endpoint\": \"http://localhost:9000/story/foo\", \"data\":{\"path\":\"/ping\", \"method\": \"post\", \"host\": \"a\"}}' \\\n     -H \"Content-Type: application/json\" \\\n     localhost:8889/unregister\n```\n",
        "service": {
            "alias": "http",
            "description": "The Asyncy API gateway server for executing Stories via HTTP.",
            "isCertified": true,
            "name": "http",
            "owner": {
                "username": "storyscript"
            },
            "public": true,
            "topics": [
                "omg",
                "storyscript",
                "microservice"
            ]
        },
        "serviceUuid": "18564840-7551-4bb7-9ba7-bb9c9e2d92b4",
        "state": "BETA"
    },
    {
        "configuration": {
            "actions": {
                "fetch": {
                    "arguments": {
                        "body": {
                            "in": "requestBody",
                            "type": "any"
                        },
                        "headers": {
                            "in": "requestBody",
                            "type": "map"
                        },
                        "method": {
                            "default": "get",
                            "enum": [
                                "get",
                                "post",
                                "patch",
                                "delete",
                                "put",
                                "options"
                            ],
                            "in": "requestBody",
                            "type": "enum"
                        },
                        "query": {
                            "help": "Set an optional map of query parameters.\nQuery parameters are automatically appended to the url specified (/url?foo=bar&john=doe)\n",
                            "in": "requestBody",
                            "type": "map"
                        },
                        "url": {
                            "in": "requestBody",
                            "required": true,
                            "type": "string"
                        }
                    },
                    "help": "Make a HTTP request to the outside world.\nThis command is native to the platform for performance reasons.\n",
                    "http": {
                        "method": "post",
                        "path": "/ignore",
                        "port": 8000
                    },
                    "output": {
                        "type": "any"
                    }
                },
                "server": {
                    "events": {
                        "listen": {
                            "arguments": {
                                "method": {
                                    "default": "get",
                                    "enum": [
                                        "get",
                                        "post",
                                        "patch",
                                        "delete",
                                        "put",
                                        "options"
                                    ],
                                    "in": "requestBody",
                                    "type": "enum"
                                },
                                "path": {
                                    "in": "requestBody",
                                    "required": true,
                                    "type": "string"
                                }
                            },
                            "help": "Listen and respond to http connections by\nregistering with the Storyscript Gateway resulting in a serverless function.\n",
                            "http": {
                                "port": 8889,
                                "subscribe": {
                                    "contentType": "application/json",
                                    "method": "post",
                                    "path": "/register"
                                },
                                "unsubscribe": {
                                    "contentType": "application/json",
                                    "method": "post",
                                    "path": "/unregister"
                                }
                            },
                            "output": {
                                "actions": {
                                    "addHeader": {
                                        "arguments": {
                                            "name": {
                                                "in": "responseBody",
                                                "required": true,
                                                "type": "string"
                                            },
                                            "value": {
                                                "in": "responseBody",
                                                "required": true,
                                                "type": "string"
                                            }
                                        },
                                        "help": "Add an HTTP header.",
                                        "http": {
                                            "contentType": "application/json",
                                            "use_event_conn": true
                                        }
                                    },
                                    "finish": {
                                        "help": "Finish a response and send it to the client.",
                                        "http": {
                                            "contentType": "application/json",
                                            "use_event_conn": true
                                        }
                                    },
                                    "flush": {
                                        "help": "Flushes the current output buffer to the network.",
                                        "http": {
                                            "contentType": "application/json",
                                            "use_event_conn": true
                                        }
                                    },
                                    "redirect": {
                                        "arguments": {
                                            "query": {
                                                "help": "These query parameters are appended to the URL specified.",
                                                "in": "responseBody",
                                                "type": "map"
                                            },
                                            "url": {
                                                "in": "responseBody",
                                                "required": true,
                                                "type": "string"
                                            }
                                        },
                                        "help": "Redirect the incoming URL. No additional actions may be used after executing this command.",
                                        "http": {
                                            "contentType": "application/json",
                                            "use_event_conn": true
                                        }
                                    },
                                    "setStatus": {
                                        "arguments": {
                                            "code": {
                                                "in": "responseBody",
                                                "required": true,
                                                "type": "int"
                                            }
                                        },
                                        "help": "Set an HTTP status code.",
                                        "http": {
                                            "contentType": "application/json",
                                            "use_event_conn": true
                                        }
                                    },
                                    "set_header": {
                                        "arguments": {
                                            "key": {
                                                "in": "responseBody",
                                                "required": true,
                                                "type": "string"
                                            },
                                            "value": {
                                                "in": "responseBody",
                                                "required": true,
                                                "type": "string"
                                            }
                                        },
                                        "help": "DEPRECATED. Use 'header'.",
                                        "http": {
                                            "contentType": "application/json",
                                            "use_event_conn": true
                                        }
                                    },
                                    "set_status": {
                                        "arguments": {
                                            "code": {
                                                "in": "responseBody",
                                                "required": true,
                                                "type": "int"
                                            }
                                        },
                                        "help": "DEPRECATED. Use 'status'.",
                                        "http": {
                                            "contentType": "application/json",
                                            "use_event_conn": true
                                        }
                                    },
                                    "write": {
                                        "arguments": {
                                            "content": {
                                                "help": "The response content.",
                                                "in": "responseBody",
                                                "required": true,
                                                "type": "string"
                                            },
                                            "flush": {
                                                "help": "Parameter which decides whether to flush the response.",
                                                "in": "responseBody",
                                                "required": false,
                                                "type": "boolean"
                                            }
                                        },
                                        "http": {
                                            "contentType": "application/json",
                                            "use_event_conn": true
                                        }
                                    },
                                    "writeJSON": {
                                        "arguments": {
                                            "content": {
                                                "help": "The content from which the JSON response will be built.",
                                                "in": "responseBody",
                                                "required": true,
                                                "type": "any"
                                            }
                                        },
                                        "help": "Write a JSON response body.",
                                        "http": {
                                            "contentType": "application/json",
                                            "use_event_conn": true
                                        }
                                    }
                                },
                                "contentType": "application/json",
                                "properties": {
                                    "body": {
                                        "help": "The JSON body of the incoming HTTP request",
                                        "type": "map"
                                    },
                                    "files": {
                                        "map": {
                                            "keys": {
                                                "help": "File name in the request",
                                                "type": "string"
                                            },
                                            "values": {
                                                "help": "Individual file object",
                                                "properties": {
                                                    "body": {
                                                        "help": "Raw source of this file",
                                                        "type": "string"
                                                    },
                                                    "contentType": {
                                                        "help": "Content-Type of the file object",
                                                        "type": "string"
                                                    },
                                                    "filename": {
                                                        "help": "Original local file name",
                                                        "type": "string"
                                                    },
                                                    "name": {
                                                        "help": "File name in the request",
                                                        "type": "string"
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        },
                                        "type": "map"
                                    },
                                    "formFields": {
                                        "help": "The form fields of the incoming HTTP request",
                                        "map": {
                                            "keys": {
                                                "type": "string"
                                            },
                                            "values": {
                                                "type": "string"
                                            }
                                        },
                                        "type": "map"
                                    },
                                    "headers": {
                                        "help": "The HTTP headers of the incoming HTTP request",
                                        "type": "map"
                                    },
                                    "path": {
                                        "help": "The path portion of the URI of the incoming HTTP request",
                                        "type": "string"
                                    },
                                    "queryParams": {
                                        "help": "The parsed query parameters of the HTTP request",
                                        "map": {
                                            "keys": {
                                                "type": "string"
                                            },
                                            "values": {
                                                "type": "string"
                                            }
                                        },
                                        "type": "map"
                                    },
                                    "query_params": {
                                        "help": "DEPRECATED. Use 'queryParams'.\n",
                                        "map": {
                                            "keys": {
                                                "type": "string"
                                            },
                                            "values": {
                                                "type": "string"
                                            }
                                        },
                                        "type": "map"
                                    },
                                    "uri": {
                                        "help": "The URI of the incoming HTTP request",
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                }
            },
            "info": {
                "contact": {
                    "email": "infra@storyscript.io",
                    "name": "Storyscript",
                    "url": "https://storyscript.io"
                },
                "description": "This is the HTTP service for Storyscript Cloud, which allows stories to be triggered via HTTP from the outside world.",
                "license": {
                    "name": "Apache 2",
                    "url": "http://opensource.org/licenses/Apache-2.0"
                },
                "title": "HTTP gateway for Storyscript Cloud",
                "version": "1.0.0"
            },
            "omg": 1
        },
        "readme": "# Storyscript HTTP Gateway\n\nAPI gateway server for executing Stories via HTTP.\n\n```coffee\nhttp server as server\n  when server listen method:\"post\" path:\"/\" as r\n    log info msg:(r.body to string)\n    log info msg:(r.headers to string)\n    log info msg:r.headers[\"Host\"]\n    r write content:\"Hello World\"\n    r setStatus code:200\n    r finish\n```\n\n```sh\n$ curl https://foobar.storyscriptapp.com/\nHello World\n```\n\n\n## Development\n\nSetup virtual environment and install dependencies\n```\nvirtualenv -p python3.6 venv\nsource venv/bin/activate\npip install -r requirements.txt\n```\n\nYou may need to tell pycurl the path to your openssl installation\n```\npip install --install-option=\"--with-openssl\" --install-option=\"--openssl-dir=/usr/local/opt/openssl\" pycurl\n```\nSee https://github.com/nahamsec/JSParser/issues/22\n\n\nRun locally by calling\n\n```\npython -m app.main --logging=debug --debug\n```\n\n### Register an endpoint\n\n```shell\ncurl --data '{\"endpoint\": \"http://localhost:9000/story/foo\", \"data\":{\"path\":\"/ping\", \"method\": \"post\", \"host\": \"a\"}}' \\\n     -H \"Content-Type: application/json\" \\\n     localhost:8889/register\n```\n\nNow access that endpoint\n\n```shell\ncurl -X POST -d 'foobar' -H \"Host: a.storyscriptapp.com\" http://localhost:8888/ping\n```\n\n### Unregister an endpoint\n\n```shell\ncurl --data '{\"endpoint\": \"http://localhost:9000/story/foo\", \"data\":{\"path\":\"/ping\", \"method\": \"post\", \"host\": \"a\"}}' \\\n     -H \"Content-Type: application/json\" \\\n     localhost:8889/unregister\n```\n",
        "service": {
            "alias": "http",
            "description": "The Asyncy API gateway server for executing Stories via HTTP.",
            "isCertified": true,
            "name": "http",
            "owner": {
                "username": "storyscript"
            },
            "public": true,
            "topics": [
                "omg",
                "storyscript",
                "microservice"
            ]
        },
        "serviceUuid": "18564840-7551-4bb7-9ba7-bb9c9e2d92b4",
        "state": "BETA"
    },
    {
        "configuration": {
            "actions": {
                "add": {
                    "help": "Adds two integers",
                    "http": {
                        "method": "get",
                        "path": "/",
                        "port": 5678
                    },
                    "output": {
                        "type": "string"
                    }
                }
            },
            "info": {
                "description": "This is a sample calculator",
                "license": {
                    "name": "MIT",
                    "url": "https://opensource.org/licenses/MIT"
                },
                "title": "Calculator",
                "version": "1.0.1"
            },
            "lifecycle": {
                "startup": {
                    "command": [
                        "ruby",
                        "./exp.rb"
                    ]
                }
            },
            "omg": 1
        },
        "readme": "# ss-test\n",
        "service": {
            "alias": null,
            "description": "",
            "isCertified": false,
            "name": "ss-test",
            "owner": {
                "username": "t2013anurag"
            },
            "public": true,
            "topics": []
        },
        "serviceUuid": "815ba478-baab-4b06-91c4-e3128444827f",
        "state": "BETA"
    },
    {
        "configuration": {
            "actions": {
                "answer": {
                    "arguments": {
                        "query": {
                            "help": "For instance, here is a query for \"How far is Los Angeles from New York?\"",
                            "in": "requestBody",
                            "required": true,
                            "type": "string"
                        },
                        "units": {
                            "enum": [
                                "metric",
                                "imperial"
                            ],
                            "help": "Use this parameter to manually select what system of units to use for measurements and quantities (either \"metric\" or \"imperial\").",
                            "in": "requestBody",
                            "required": false,
                            "type": "enum"
                        }
                    },
                    "help": "The Short Answers API returns a single plain text result directly from Wolfram|Alpha.",
                    "http": {
                        "contentType": "application/json",
                        "method": "post",
                        "path": "/shortanswer",
                        "port": 8000
                    },
                    "output": {
                        "contentType": "application/json",
                        "properties": {
                            "answer": {
                                "help": "The response from the Wolfram API",
                                "type": "string"
                            }
                        },
                        "type": "object"
                    }
                }
            },
            "environment": {
                "WOLFRAM_APP_ID": {
                    "help": "Please create an app ID from https://products.wolframalpha.com/short-answers-api/documentation/",
                    "required": true,
                    "type": "string"
                }
            },
            "info": {
                "contact": {
                    "email": "core@openmicroservices.org",
                    "name": "Open Microservices",
                    "url": "https://openmicroservices.org"
                },
                "description": "Access the Wolfram|Alpha API",
                "title": "Wolfram",
                "version": "1.0.0"
            },
            "lifecycle": {
                "startup": {
                    "command": [
                        "python",
                        "/app/app.py"
                    ]
                }
            },
            "oms": 1
        },
        "readme": "# _Wolfram_ Open Microservice\n\n> Access the Wolfram|Alpha API\n\n[![Open Microservice Specification Version](https://img.shields.io/badge/Open%20Microservice-1.0-477bf3.svg)](https://openmicroservices.org) [![Open Microservices Spectrum Chat](https://withspectrum.github.io/badge/badge.svg)](https://spectrum.chat/open-microservices) [![Open Microservices Code of Conduct](https://img.shields.io/badge/Contributor%20Covenant-v1.4%20adopted-ff69b4.svg)](https://github.com/oms-services/.github/blob/master/CODE_OF_CONDUCT.md) [![Open Microservices Commitzen](https://img.shields.io/badge/commitizen-friendly-brightgreen.svg)](http://commitizen.github.io/cz-cli/) [![PRs Welcome](https://img.shields.io/badge/PRs-welcome-brightgreen.svg)](http://makeapullrequest.com)\n\n## Introduction\n\nThis project is an example implementation of the [Open Microservice Specification](https://openmicroservices.org), a standard originally created at [Storyscript](https://storyscript.io) for building highly-portable \"microservices\" that expose the events, actions, and APIs inside containerized software.\n\n## Getting Started\n\nThe `oms` command-line interface allows you to interact with Open Microservices. If you're interested in creating an Open Microservice the CLI also helps validate, test, and debug your `oms.yml` implementation!\n\nSee the [oms-cli](https://github.com/microservices/oms) project to learn more!\n\n### Installation\n\n```\nnpm install -g @microservices/oms\n```\n\n## Usage\n\n### Open Microservices CLI Usage\n\nOnce you have the [oms-cli](https://github.com/microservices/oms) installed, you can run any of the following commands from within this project's root directory:\n\n#### Actions\n\n##### answer\n\n> The Short Answers API returns a single plain text result directly from Wolfram|Alpha.\n##### Action Arguments\n\n| Argument Name | Type | Required | Default | Description |\n|:------------- |:---- |:-------- |:--------|:----------- |\n| query | `string` | `true` | None | For instance, here is a query for \"How far is Los Angeles from New York?\" |\n| units | `enum` | `false` | None | Use this parameter to manually select what system of units to use for measurements and quantities (either \"metric\" or \"imperial\"). |\n| WOLFRAM_APP_ID | `string` | `true` | None | Please create an app ID from https://products.wolframalpha.com/short-answers-api/documentation/ |\n\n``` shell\noms run answer \\ \n    -a query='*****' \\ \n    -a units='*****' \\ \n    -e WOLFRAM_APP_ID=$WOLFRAM_APP_ID\n```\n\n## Contributing\n\nAll suggestions in how to improve the specification and this guide are very welcome. Feel free share your thoughts in the Issue tracker, or even better, fork the repository to implement your own ideas and submit a pull request.\n\n[![Edit wolfram on CodeSandbox](https://codesandbox.io/static/img/play-codesandbox.svg)](https://codesandbox.io/s/github/oms-services/wolfram)\n\nThis project is guided by [Contributor Covenant](https://github.com/oms-services/.github/blob/master/CODE_OF_CONDUCT.md). Please read out full [Contribution Guidelines](https://github.com/oms-services/.github/blob/master/CONTRIBUTING.md).\n\n## Additional Resources\n\n* [Install the CLI](https://github.com/microservices/oms) - The OMS CLI helps developers create, test, validate, and build microservices.\n* [Example OMS Services](https://github.com/oms-services) - Examples of OMS-compliant services written in a variety of languages.\n* [Example Language Implementations](https://github.com/microservices) - Find tooling & language implementations in Node, Python, Scala, Java, Clojure.\n* [Storyscript Hub](https://hub.storyscript.io) - A public registry of OMS services.\n* [Community Chat](https://spectrum.chat/open-microservices) - Have ideas? Questions? Join us on Spectrum.\n",
        "service": {
            "alias": "wolfram",
            "description": "Wolfram as a microservice",
            "isCertified": false,
            "name": "wolfram",
            "owner": {
                "username": "oms-services"
            },
            "public": true,
            "topics": [
                "microservice",
                "wolfram-alpha",
                "wolfram",
                "oms",
                "open-microservice"
            ]
        },
        "serviceUuid": "89670e21-6c01-4afa-8f9f-d6753af15273",
        "state": "BETA"
    },
    {
        "configuration": {
            "actions": {
                "answer": {
                    "arguments": {
                        "query": {
                            "help": "For instance, here is a query for \"How far is Los Angeles from New York?\"",
                            "in": "requestBody",
                            "required": true,
                            "type": "string"
                        },
                        "units": {
                            "enum": [
                                "metric",
                                "imperial"
                            ],
                            "help": "Use this parameter to manually select what system of units to use for measurements and quantities (either \"metric\" or \"imperial\").",
                            "in": "requestBody",
                            "required": false,
                            "type": "enum"
                        }
                    },
                    "help": "The Short Answers API returns a single plain text result directly from Wolfram|Alpha.",
                    "http": {
                        "contentType": "application/json",
                        "method": "post",
                        "path": "/shortanswer",
                        "port": 8000
                    },
                    "output": {
                        "contentType": "application/json",
                        "properties": {
                            "answer": {
                                "help": "The response from the Wolfram API",
                                "type": "string"
                            }
                        },
                        "type": "object"
                    }
                }
            },
            "environment": {
                "WOLFRAM_APP_ID": {
                    "help": "Please create an app ID from https://products.wolframalpha.com/short-answers-api/documentation/",
                    "required": true,
                    "type": "string"
                }
            },
            "info": {
                "contact": {
                    "email": "core@openmicroservices.org",
                    "name": "Open Microservices",
                    "url": "https://openmicroservices.org"
                },
                "description": "Access the Wolfram|Alpha API",
                "title": "Wolfram",
                "version": "1.0.0"
            },
            "lifecycle": {
                "startup": {
                    "command": [
                        "python",
                        "/app/app.py"
                    ]
                }
            },
            "oms": 1
        },
        "readme": "# _Wolfram_ Open Microservice\n\n> Access the Wolfram|Alpha API\n\n[![Open Microservice Specification Version](https://img.shields.io/badge/Open%20Microservice-1.0-477bf3.svg)](https://openmicroservices.org) [![Open Microservices Spectrum Chat](https://withspectrum.github.io/badge/badge.svg)](https://spectrum.chat/open-microservices) [![Open Microservices Code of Conduct](https://img.shields.io/badge/Contributor%20Covenant-v1.4%20adopted-ff69b4.svg)](https://github.com/oms-services/.github/blob/master/CODE_OF_CONDUCT.md) [![Open Microservices Commitzen](https://img.shields.io/badge/commitizen-friendly-brightgreen.svg)](http://commitizen.github.io/cz-cli/) [![PRs Welcome](https://img.shields.io/badge/PRs-welcome-brightgreen.svg)](http://makeapullrequest.com)\n\n## Introduction\n\nThis project is an example implementation of the [Open Microservice Specification](https://openmicroservices.org), a standard originally created at [Storyscript](https://storyscript.io) for building highly-portable \"microservices\" that expose the events, actions, and APIs inside containerized software.\n\n## Getting Started\n\nThe `oms` command-line interface allows you to interact with Open Microservices. If you're interested in creating an Open Microservice the CLI also helps validate, test, and debug your `oms.yml` implementation!\n\nSee the [oms-cli](https://github.com/microservices/oms) project to learn more!\n\n### Installation\n\n```\nnpm install -g @microservices/oms\n```\n\n## Usage\n\n### Open Microservices CLI Usage\n\nOnce you have the [oms-cli](https://github.com/microservices/oms) installed, you can run any of the following commands from within this project's root directory:\n\n#### Actions\n\n##### answer\n\n> The Short Answers API returns a single plain text result directly from Wolfram|Alpha.\n##### Action Arguments\n\n| Argument Name | Type | Required | Default | Description |\n|:------------- |:---- |:-------- |:--------|:----------- |\n| query | `string` | `true` | None | For instance, here is a query for \"How far is Los Angeles from New York?\" |\n| units | `enum` | `false` | None | Use this parameter to manually select what system of units to use for measurements and quantities (either \"metric\" or \"imperial\"). |\n| WOLFRAM_APP_ID | `string` | `true` | None | Please create an app ID from https://products.wolframalpha.com/short-answers-api/documentation/ |\n\n``` shell\noms run answer \\ \n    -a query='*****' \\ \n    -a units='*****' \\ \n    -e WOLFRAM_APP_ID=$WOLFRAM_APP_ID\n```\n\n## Contributing\n\nAll suggestions in how to improve the specification and this guide are very welcome. Feel free share your thoughts in the Issue tracker, or even better, fork the repository to implement your own ideas and submit a pull request.\n\n[![Edit wolfram on CodeSandbox](https://codesandbox.io/static/img/play-codesandbox.svg)](https://codesandbox.io/s/github/oms-services/wolfram)\n\nThis project is guided by [Contributor Covenant](https://github.com/oms-services/.github/blob/master/CODE_OF_CONDUCT.md). Please read out full [Contribution Guidelines](https://github.com/oms-services/.github/blob/master/CONTRIBUTING.md).\n\n## Additional Resources\n\n* [Install the CLI](https://github.com/microservices/oms) - The OMS CLI helps developers create, test, validate, and build microservices.\n* [Example OMS Services](https://github.com/oms-services) - Examples of OMS-compliant services written in a variety of languages.\n* [Example Language Implementations](https://github.com/microservices) - Find tooling & language implementations in Node, Python, Scala, Java, Clojure.\n* [Storyscript Hub](https://hub.storyscript.io) - A public registry of OMS services.\n* [Community Chat](https://spectrum.chat/open-microservices) - Have ideas? Questions? Join us on Spectrum.\n",
        "service": {
            "alias": "wolfram",
            "description": "Wolfram as a microservice",
            "isCertified": false,
            "name": "wolfram",
            "owner": {
                "username": "oms-services"
            },
            "public": true,
            "topics": [
                "microservice",
                "wolfram-alpha",
                "wolfram",
                "oms",
                "open-microservice"
            ]
        },
        "serviceUuid": "89670e21-6c01-4afa-8f9f-d6753af15273",
        "state": "BETA"
    },
    {
        "configuration": {
            "actions": {
                "hello": {
                    "http": {
                        "method": "get",
                        "path": "/",
                        "port": 8000
                    }
                }
            },
            "info": {
                "description": "hello world",
                "title": "hello world",
                "version": "1.0.1"
            },
            "lifecycle": {
                "startup": {
                    "command": [
                        "python",
                        "app.py"
                    ]
                }
            },
            "omg": 1
        },
        "readme": "# ians-omg\n",
        "service": {
            "alias": null,
            "description": "",
            "isCertified": false,
            "name": "ians-omg",
            "owner": {
                "username": "iansheridan"
            },
            "public": true,
            "topics": []
        },
        "serviceUuid": "ab11aa10-21e7-405c-a15c-3d20ab76d197",
        "state": "BETA"
    },
    {
        "configuration": {
            "actions": {
                "launches": {
                    "arguments": {
                        "launch": {
                            "help": "past, upcomming, latest or next for now. Will support fligth number later",
                            "in": "query",
                            "required": true,
                            "type": "string"
                        }
                    },
                    "help": "Gets launches information",
                    "http": {
                        "method": "get",
                        "path": "/launches",
                        "port": 5000
                    },
                    "output": {
                        "type": "map"
                    }
                },
                "roadster": {
                    "help": "Gets Elon's roadster information",
                    "http": {
                        "method": "get",
                        "path": "/roadster",
                        "port": 5000
                    },
                    "output": {
                        "type": "map"
                    }
                }
            },
            "health": {
                "http": {
                    "path": "/health",
                    "port": 5000
                }
            },
            "info": {
                "description": "SpaceX API as a microservice",
                "license": {
                    "name": "Apache 2.0",
                    "url": "https://opensource.org/licenses/Apache-2.0"
                },
                "title": "SpaceX API as a microservice",
                "version": "1.0.0"
            },
            "lifecycle": {
                "startup": {
                    "command": [
                        "node",
                        "app.js"
                    ]
                }
            },
            "omg": 1
        },
        "readme": "# SpaceX\n\nhttps://docs.spacexdata.com/#intro\n",
        "service": {
            "alias": null,
            "description": null,
            "isCertified": false,
            "name": "spacex",
            "owner": {
                "username": "Arinono"
            },
            "public": true,
            "topics": [
                "spacex",
                "elon",
                "musk"
            ]
        },
        "serviceUuid": "69a35d4f-dbf3-4247-bbe2-068bab1273a4",
        "state": "BETA"
    },
    {
        "configuration": {
            "actions": {
                "add": {
                    "arguments": {
                        "x": {
                            "in": "requestBody",
                            "required": true,
                            "type": "int"
                        },
                        "y": {
                            "in": "requestBody",
                            "required": true,
                            "type": "int"
                        }
                    },
                    "help": "Adds two integers",
                    "http": {
                        "method": "post",
                        "path": "/add",
                        "port": 5000
                    },
                    "output": {
                        "type": "int"
                    }
                }
            },
            "health": {
                "http": {
                    "path": "/health",
                    "port": 5000
                }
            },
            "info": {
                "description": "This is a sample calculator",
                "license": {
                    "name": "MIT",
                    "url": "https://opensource.org/licenses/MIT"
                },
                "title": "Calculator",
                "version": "1.0.1"
            },
            "lifecycle": {
                "startup": {
                    "command": [
                        "flask",
                        "run",
                        "--host=0.0.0.0"
                    ]
                }
            },
            "omg": 1
        },
        "readme": "",
        "service": {
            "alias": null,
            "description": "testing out the storyscript hub",
            "isCertified": false,
            "name": "add_sum_ms",
            "owner": {
                "username": "joaoh82"
            },
            "public": true,
            "topics": [
                "math"
            ]
        },
        "serviceUuid": "9c60fa5c-2490-498d-b50f-d5e4e23d4c95",
        "state": "BETA"
    },
    {
        "configuration": {
            "actions": {
                "company": {
                    "arguments": {
                        "domain": {
                            "in": "requestBody",
                            "required": true,
                            "type": "string"
                        }
                    },
                    "help": "Search for a company",
                    "http": {
                        "contentType": "application/json",
                        "method": "post",
                        "path": "/company",
                        "port": 8000
                    },
                    "output": {
                        "contentType": "application/json",
                        "type": "map"
                    }
                },
                "person": {
                    "arguments": {
                        "email": {
                            "in": "requestBody",
                            "type": "string"
                        },
                        "phone": {
                            "in": "requestBody",
                            "type": "string"
                        },
                        "twitter": {
                            "in": "requestBody",
                            "type": "string"
                        }
                    },
                    "help": "Search for a person",
                    "http": {
                        "contentType": "application/json",
                        "method": "post",
                        "path": "/person",
                        "port": 8000
                    },
                    "output": {
                        "contentType": "application/json",
                        "type": "map"
                    }
                }
            },
            "environment": {
                "API_KEY": {
                    "help": "Get from https://dashboard.fullcontact.com/\n",
                    "pattern": "[\\w\\d]{32}",
                    "type": "string"
                },
                "USER_AGENT": {
                    "default": "Undefined",
                    "help": "When making http requests the user agent is required.\n",
                    "type": "string"
                }
            },
            "info": {
                "contact": {
                    "email": "core@openmicroservices.org",
                    "name": "Open Microservices",
                    "url": "https://openmicroservices.org"
                },
                "description": "This is a fullcontact service",
                "title": "FullContact",
                "version": "1.0.0"
            },
            "lifecycle": {
                "startup": {
                    "command": [
                        "python",
                        "/app/app.py"
                    ]
                }
            },
            "oms": 1
        },
        "readme": "# _FullContact_ OMG Microservice\n\n[![Open Microservice Guide](https://img.shields.io/badge/OMG%20Enabled-\ud83d\udc4d-green.svg?)](https://microservice.guide)\n<!-- [![Docker Build Status](https://img.shields.io/docker/build/microservices/fullcontact.svg?style=for-the-badge)](https://hub.docker.com/r/microservice/fullcontact/) -->\n\nFullContact is a contact management software designed for individuals and teams. It has the capability to collect contact data and information of companies, enterprises, and professionals; and organizes them into a centralized location.\n\n## Direct usage in [Storyscript](https://storyscript.io/):\n\n##### Query a person\n```coffee\ndata = fullcontact person email:\"bart@fullcontact.com\"\n```\n```js\ndata = {\n  \"email\": \"bart@fullcontact.com\",\n  \"emailHash\": \"d77ff8a9f4d2d4fea4153c81ba5d39a2\",\n  \"twitter\": \"@bartlorang\",\n  \"phone\": \"+13035551234\",\n  \"fullName\": \"Bart Lorang\",\n  ...\n}\n```\n\n##### Query a company\n```coffee\ndata = fullcontact company domain:'fullcontact.com'\n```\n```js\ndata = {\n  \"name\": \"FullContact, Inc.\",\n  \"location\": \"1755 Blake Street, Suite 450, Denver, Colorado, United States\",\n  \"twitter\": \"@fullcontact\",\n  \"linkedin\": \"https://www.linkedin.com/company/fullcontact-inc-\",\n  \"facebook\": \"https://www.facebook.com/fullcontact\",\n  \"bio\": \"FullContact is the ... contacts and be awesome with people.\",\n  ...\n```\n\nCurious to [learn more](https://docs.storyscript.io/)?\n\n\u2728\ud83c\udf70\u2728\n\n## Usage with [OMG CLI](https://www.npmjs.com/package/omg)\n\n##### Query a person\n```shell\n$ omg run person -a email=<EMAIL_ADDRESS> -a twitter=<TWITTER> -a phone=<PHONE_NUMBER> -e API_KEY=<API_KEY> -e USER_AGENT=<USER_AGENT>\n```\n##### Query a company\n```shell\n$ omg run company -a domain=<DOMAIN> -e API_KEY=<API_KEY> -e USER_AGENT=<USER_AGENT>\n```\n\n**Note**: The OMG CLI requires [Docker](https://docs.docker.com/install/) to be installed.\n\n## License\n[MIT License](https://github.com/omg-services/fullcontact/blob/master/LICENSE).\n",
        "service": {
            "alias": "fullcontact",
            "description": "FullContact",
            "isCertified": false,
            "name": "fullcontact",
            "owner": {
                "username": "oms-services"
            },
            "public": true,
            "topics": [
                "fullcontact",
                "fullcontact-api",
                "microservice",
                "open-microservice",
                "oms"
            ]
        },
        "serviceUuid": "443c2bc3-5d42-4103-9466-f56e6be128cb",
        "state": "BETA"
    },
    {
        "configuration": {
            "actions": {
                "company": {
                    "arguments": {
                        "domain": {
                            "in": "requestBody",
                            "required": true,
                            "type": "string"
                        }
                    },
                    "help": "Search for a company",
                    "http": {
                        "contentType": "application/json",
                        "method": "post",
                        "path": "/company",
                        "port": 8000
                    },
                    "output": {
                        "contentType": "application/json",
                        "type": "map"
                    }
                },
                "person": {
                    "arguments": {
                        "email": {
                            "in": "requestBody",
                            "type": "string"
                        },
                        "phone": {
                            "in": "requestBody",
                            "type": "string"
                        },
                        "twitter": {
                            "in": "requestBody",
                            "type": "string"
                        }
                    },
                    "help": "Search for a person",
                    "http": {
                        "contentType": "application/json",
                        "method": "post",
                        "path": "/person",
                        "port": 8000
                    },
                    "output": {
                        "contentType": "application/json",
                        "type": "map"
                    }
                }
            },
            "environment": {
                "API_KEY": {
                    "help": "Get from https://dashboard.fullcontact.com/\n",
                    "pattern": "[\\w\\d]{32}",
                    "type": "string"
                },
                "USER_AGENT": {
                    "default": "Undefined",
                    "help": "When making http requests the user agent is required.\n",
                    "type": "string"
                }
            },
            "info": {
                "contact": {
                    "email": "core@openmicroservices.org",
                    "name": "Open Microservices",
                    "url": "https://openmicroservices.org"
                },
                "description": "This is a fullcontact service",
                "title": "FullContact",
                "version": "1.0.0"
            },
            "lifecycle": {
                "startup": {
                    "command": [
                        "python",
                        "/app/app.py"
                    ]
                }
            },
            "oms": 1
        },
        "readme": "# _FullContact_ OMG Microservice\n\n[![Open Microservice Guide](https://img.shields.io/badge/OMG%20Enabled-\ud83d\udc4d-green.svg?)](https://microservice.guide)\n<!-- [![Docker Build Status](https://img.shields.io/docker/build/microservices/fullcontact.svg?style=for-the-badge)](https://hub.docker.com/r/microservice/fullcontact/) -->\n\nFullContact is a contact management software designed for individuals and teams. It has the capability to collect contact data and information of companies, enterprises, and professionals; and organizes them into a centralized location.\n\n## Direct usage in [Storyscript](https://storyscript.io/):\n\n##### Query a person\n```coffee\ndata = fullcontact person email:\"bart@fullcontact.com\"\n```\n```js\ndata = {\n  \"email\": \"bart@fullcontact.com\",\n  \"emailHash\": \"d77ff8a9f4d2d4fea4153c81ba5d39a2\",\n  \"twitter\": \"@bartlorang\",\n  \"phone\": \"+13035551234\",\n  \"fullName\": \"Bart Lorang\",\n  ...\n}\n```\n\n##### Query a company\n```coffee\ndata = fullcontact company domain:'fullcontact.com'\n```\n```js\ndata = {\n  \"name\": \"FullContact, Inc.\",\n  \"location\": \"1755 Blake Street, Suite 450, Denver, Colorado, United States\",\n  \"twitter\": \"@fullcontact\",\n  \"linkedin\": \"https://www.linkedin.com/company/fullcontact-inc-\",\n  \"facebook\": \"https://www.facebook.com/fullcontact\",\n  \"bio\": \"FullContact is the ... contacts and be awesome with people.\",\n  ...\n```\n\nCurious to [learn more](https://docs.storyscript.io/)?\n\n\u2728\ud83c\udf70\u2728\n\n## Usage with [OMG CLI](https://www.npmjs.com/package/omg)\n\n##### Query a person\n```shell\n$ omg run person -a email=<EMAIL_ADDRESS> -a twitter=<TWITTER> -a phone=<PHONE_NUMBER> -e API_KEY=<API_KEY> -e USER_AGENT=<USER_AGENT>\n```\n##### Query a company\n```shell\n$ omg run company -a domain=<DOMAIN> -e API_KEY=<API_KEY> -e USER_AGENT=<USER_AGENT>\n```\n\n**Note**: The OMG CLI requires [Docker](https://docs.docker.com/install/) to be installed.\n\n## License\n[MIT License](https://github.com/omg-services/fullcontact/blob/master/LICENSE).\n",
        "service": {
            "alias": "fullcontact",
            "description": "FullContact",
            "isCertified": false,
            "name": "fullcontact",
            "owner": {
                "username": "oms-services"
            },
            "public": true,
            "topics": [
                "fullcontact",
                "fullcontact-api",
                "microservice",
                "open-microservice",
                "oms"
            ]
        },
        "serviceUuid": "443c2bc3-5d42-4103-9466-f56e6be128cb",
        "state": "BETA"
    },
    {
        "configuration": {
            "actions": {
                "delete": {
                    "arguments": {
                        "url": {
                            "help": "URL to delete data from",
                            "in": "requestBody",
                            "required": true,
                            "type": "string"
                        }
                    },
                    "http": {
                        "contentType": "application/json",
                        "method": "delete",
                        "path": "/",
                        "port": 3000
                    },
                    "output": {
                        "contentType": "application/json",
                        "type": "map"
                    }
                },
                "get": {
                    "arguments": {
                        "url": {
                            "help": "URL to get data from",
                            "in": "requestBody",
                            "required": true,
                            "type": "string"
                        }
                    },
                    "http": {
                        "contentType": "application/json",
                        "method": "get",
                        "path": "/",
                        "port": 3000
                    },
                    "output": {
                        "contentType": "application/json",
                        "type": "map"
                    }
                },
                "post": {
                    "arguments": {
                        "data": {
                            "help": "The data you want to post",
                            "in": "requestBody",
                            "required": true,
                            "type": "map"
                        },
                        "url": {
                            "help": "URL to post data to",
                            "in": "requestBody",
                            "required": true,
                            "type": "string"
                        }
                    },
                    "http": {
                        "contentType": "application/json",
                        "method": "post",
                        "path": "/",
                        "port": 3000
                    },
                    "output": {
                        "contentType": "application/json",
                        "type": "map"
                    }
                },
                "put": {
                    "arguments": {
                        "data": {
                            "help": "The data you want to put",
                            "in": "requestBody",
                            "required": true,
                            "type": "map"
                        },
                        "url": {
                            "help": "URL to put data to",
                            "in": "requestBody",
                            "required": true,
                            "type": "string"
                        }
                    },
                    "http": {
                        "contentType": "application/json",
                        "method": "put",
                        "path": "/",
                        "port": 3000
                    },
                    "output": {
                        "contentType": "application/json",
                        "type": "map"
                    }
                }
            },
            "environment": {
                "ELASTICSEARCH_URL": {
                    "type": "string"
                }
            },
            "info": {
                "contact": {
                    "email": "core@openmicroservices.org",
                    "name": "Open Microservices",
                    "url": "https://openmicroservices.org"
                },
                "description": "Elasticsearch is a search engine that provides full-text search with schema-free JSON documents.",
                "title": "Elasticsearch",
                "version": "1.0.0"
            },
            "oms": 1
        },
        "readme": "# _Elasticsearch_ Open Microservice\n\n> Elasticsearch is a search engine that provides full-text search with schema-free JSON documents.\n\n[![Open Microservice Specification Version](https://img.shields.io/badge/Open%20Microservice-1.0-477bf3.svg)](https://openmicroservices.org)\n[![Open Microservices Spectrum Chat](https://withspectrum.github.io/badge/badge.svg)](https://spectrum.chat/open-microservices)\n[![Open Microservices Code of Conduct](https://img.shields.io/badge/Contributor%20Covenant-v1.4%20adopted-ff69b4.svg)](https://github.com/oms-services/.github/blob/master/CODE_OF_CONDUCT.md)\n[![Open Microservices Commitzen](https://img.shields.io/badge/commitizen-friendly-brightgreen.svg)](http://commitizen.github.io/cz-cli/)\n[![PRs Welcome](https://img.shields.io/badge/PRs-welcome-brightgreen.svg)](http://makeapullrequest.com)\n\n## Introduction\n\nThis project is an example implementation of the [Open Microservice Specification](https://openmicroservices.org), a standard\noriginally created at [Storyscript](https://storyscript.io) for building highly-portable \"microservices\" that expose the\nevents, actions, and APIs inside containerized software.\n\n## Getting Started\n\nThe `oms` command-line interface allows you to interact with Open Microservices. If you're interested in creating an Open\nMicroservice the CLI also helps validate, test, and debug your `oms.yml` implementation!\n\nSee the [oms-cli](https://github.com/microservices/oms) project to learn more!\n\n### Installation\n\n```\nnpm install -g @microservices/oms\n```\n\n## Usage\n\n### Open Microservices CLI Usage\n\nOnce you have the [oms-cli](https://github.com/microservices/oms) installed, you can run any of the following commands from\nwithin this project's root directory:\n\n#### Actions\n\n##### get\n\n>\n\n##### Action Arguments\n\n| Argument Name     | Type     | Required | Default | Description              |\n| :---------------- | :------- | :------- | :------ | :----------------------- |\n| url               | `string` | `true`   | None    | URL to get data from     |\n| ELASTICSEARCH_URL | `string` | `false`  | None    | No description provided. |\n\n```shell\noms run get \\\n    -a url='*****' \\\n    -e ELASTICSEARCH_URL=$ELASTICSEARCH_URL\n```\n\n##### post\n\n>\n\n##### Action Arguments\n\n| Argument Name     | Type     | Required | Default | Description               |\n| :---------------- | :------- | :------- | :------ | :------------------------ |\n| url               | `string` | `true`   | None    | URL to post data to       |\n| data              | `object` | `true`   | None    | The data you want to post |\n| ELASTICSEARCH_URL | `string` | `false`  | None    | No description provided.  |\n\n```shell\noms run post \\\n    -a url='*****' \\\n    -a data='*****' \\\n    -e ELASTICSEARCH_URL=$ELASTICSEARCH_URL\n```\n\n##### put\n\n>\n\n##### Action Arguments\n\n| Argument Name     | Type     | Required | Default | Description              |\n| :---------------- | :------- | :------- | :------ | :----------------------- |\n| url               | `string` | `true`   | None    | URL to put data to       |\n| data              | `object` | `true`   | None    | The data you want to put |\n| ELASTICSEARCH_URL | `string` | `false`  | None    | No description provided. |\n\n```shell\noms run put \\\n    -a url='*****' \\\n    -a data='*****' \\\n    -e ELASTICSEARCH_URL=$ELASTICSEARCH_URL\n```\n\n##### delete\n\n>\n\n##### Action Arguments\n\n| Argument Name     | Type     | Required | Default | Description              |\n| :---------------- | :------- | :------- | :------ | :----------------------- |\n| url               | `string` | `true`   | None    | URL to delete data from  |\n| ELASTICSEARCH_URL | `string` | `false`  | None    | No description provided. |\n\n```shell\noms run delete \\\n    -a url='*****' \\\n    -e ELASTICSEARCH_URL=$ELASTICSEARCH_URL\n```\n\n## Contributing\n\nAll suggestions in how to improve the specification and this guide are very welcome. Feel free share your thoughts in the\nIssue tracker, or even better, fork the repository to implement your own ideas and submit a pull request.\n\n[![Edit elasticsearch on CodeSandbox](https://codesandbox.io/static/img/play-codesandbox.svg)](https://codesandbox.io/s/github/oms-services/elasticsearch)\n\nThis project is guided by [Contributor Covenant](https://github.com/oms-services/.github/blob/master/CODE_OF_CONDUCT.md).\nPlease read out full [Contribution Guidelines](https://github.com/oms-services/.github/blob/master/CONTRIBUTING.md).\n\n## Additional Resources\n\n- [Install the CLI](https://github.com/microservices/oms) - The OMS CLI helps developers create, test, validate, and build\n  microservices.\n- [Example OMS Services](https://github.com/oms-services) - Examples of OMS-compliant services written in a variety of\n  languages.\n- [Example Language Implementations](https://github.com/microservices) - Find tooling & language implementations in Node,\n  Python, Scala, Java, Clojure.\n- [Storyscript Hub](https://hub.storyscript.io) - A public registry of OMS services.\n- [Community Chat](https://spectrum.chat/open-microservices) - Have ideas? Questions? Join us on Spectrum.\n",
        "service": {
            "alias": "elasticsearch",
            "description": "Elasticsearch for Aysncy.",
            "isCertified": false,
            "name": "elasticsearch",
            "owner": {
                "username": "oms-services"
            },
            "public": true,
            "topics": [
                "microservice",
                "elasticsearch",
                "open-microservice",
                "oms"
            ]
        },
        "serviceUuid": "5f400641-a609-45f7-be1b-08edfd2491b1",
        "state": "BETA"
    },
    {
        "configuration": {
            "actions": {
                "delete": {
                    "arguments": {
                        "url": {
                            "help": "URL to delete data from",
                            "in": "requestBody",
                            "required": true,
                            "type": "string"
                        }
                    },
                    "http": {
                        "contentType": "application/json",
                        "method": "delete",
                        "path": "/",
                        "port": 3000
                    },
                    "output": {
                        "contentType": "application/json",
                        "type": "map"
                    }
                },
                "get": {
                    "arguments": {
                        "url": {
                            "help": "URL to get data from",
                            "in": "requestBody",
                            "required": true,
                            "type": "string"
                        }
                    },
                    "http": {
                        "contentType": "application/json",
                        "method": "get",
                        "path": "/",
                        "port": 3000
                    },
                    "output": {
                        "contentType": "application/json",
                        "type": "map"
                    }
                },
                "post": {
                    "arguments": {
                        "data": {
                            "help": "The data you want to post",
                            "in": "requestBody",
                            "required": true,
                            "type": "map"
                        },
                        "url": {
                            "help": "URL to post data to",
                            "in": "requestBody",
                            "required": true,
                            "type": "string"
                        }
                    },
                    "http": {
                        "contentType": "application/json",
                        "method": "post",
                        "path": "/",
                        "port": 3000
                    },
                    "output": {
                        "contentType": "application/json",
                        "type": "map"
                    }
                },
                "put": {
                    "arguments": {
                        "data": {
                            "help": "The data you want to put",
                            "in": "requestBody",
                            "required": true,
                            "type": "map"
                        },
                        "url": {
                            "help": "URL to put data to",
                            "in": "requestBody",
                            "required": true,
                            "type": "string"
                        }
                    },
                    "http": {
                        "contentType": "application/json",
                        "method": "put",
                        "path": "/",
                        "port": 3000
                    },
                    "output": {
                        "contentType": "application/json",
                        "type": "map"
                    }
                }
            },
            "environment": {
                "ELASTICSEARCH_URL": {
                    "type": "string"
                }
            },
            "info": {
                "contact": {
                    "email": "core@openmicroservices.org",
                    "name": "Open Microservices",
                    "url": "https://openmicroservices.org"
                },
                "description": "Elasticsearch is a search engine that provides full-text search with schema-free JSON documents.",
                "title": "Elasticsearch",
                "version": "1.0.0"
            },
            "oms": 1
        },
        "readme": "# _Elasticsearch_ Open Microservice\n\n> Elasticsearch is a search engine that provides full-text search with schema-free JSON documents.\n\n[![Open Microservice Specification Version](https://img.shields.io/badge/Open%20Microservice-1.0-477bf3.svg)](https://openmicroservices.org)\n[![Open Microservices Spectrum Chat](https://withspectrum.github.io/badge/badge.svg)](https://spectrum.chat/open-microservices)\n[![Open Microservices Code of Conduct](https://img.shields.io/badge/Contributor%20Covenant-v1.4%20adopted-ff69b4.svg)](https://github.com/oms-services/.github/blob/master/CODE_OF_CONDUCT.md)\n[![Open Microservices Commitzen](https://img.shields.io/badge/commitizen-friendly-brightgreen.svg)](http://commitizen.github.io/cz-cli/)\n[![PRs Welcome](https://img.shields.io/badge/PRs-welcome-brightgreen.svg)](http://makeapullrequest.com)\n\n## Introduction\n\nThis project is an example implementation of the [Open Microservice Specification](https://openmicroservices.org), a standard\noriginally created at [Storyscript](https://storyscript.io) for building highly-portable \"microservices\" that expose the\nevents, actions, and APIs inside containerized software.\n\n## Getting Started\n\nThe `oms` command-line interface allows you to interact with Open Microservices. If you're interested in creating an Open\nMicroservice the CLI also helps validate, test, and debug your `oms.yml` implementation!\n\nSee the [oms-cli](https://github.com/microservices/oms) project to learn more!\n\n### Installation\n\n```\nnpm install -g @microservices/oms\n```\n\n## Usage\n\n### Open Microservices CLI Usage\n\nOnce you have the [oms-cli](https://github.com/microservices/oms) installed, you can run any of the following commands from\nwithin this project's root directory:\n\n#### Actions\n\n##### get\n\n>\n\n##### Action Arguments\n\n| Argument Name     | Type     | Required | Default | Description              |\n| :---------------- | :------- | :------- | :------ | :----------------------- |\n| url               | `string` | `true`   | None    | URL to get data from     |\n| ELASTICSEARCH_URL | `string` | `false`  | None    | No description provided. |\n\n```shell\noms run get \\\n    -a url='*****' \\\n    -e ELASTICSEARCH_URL=$ELASTICSEARCH_URL\n```\n\n##### post\n\n>\n\n##### Action Arguments\n\n| Argument Name     | Type     | Required | Default | Description               |\n| :---------------- | :------- | :------- | :------ | :------------------------ |\n| url               | `string` | `true`   | None    | URL to post data to       |\n| data              | `object` | `true`   | None    | The data you want to post |\n| ELASTICSEARCH_URL | `string` | `false`  | None    | No description provided.  |\n\n```shell\noms run post \\\n    -a url='*****' \\\n    -a data='*****' \\\n    -e ELASTICSEARCH_URL=$ELASTICSEARCH_URL\n```\n\n##### put\n\n>\n\n##### Action Arguments\n\n| Argument Name     | Type     | Required | Default | Description              |\n| :---------------- | :------- | :------- | :------ | :----------------------- |\n| url               | `string` | `true`   | None    | URL to put data to       |\n| data              | `object` | `true`   | None    | The data you want to put |\n| ELASTICSEARCH_URL | `string` | `false`  | None    | No description provided. |\n\n```shell\noms run put \\\n    -a url='*****' \\\n    -a data='*****' \\\n    -e ELASTICSEARCH_URL=$ELASTICSEARCH_URL\n```\n\n##### delete\n\n>\n\n##### Action Arguments\n\n| Argument Name     | Type     | Required | Default | Description              |\n| :---------------- | :------- | :------- | :------ | :----------------------- |\n| url               | `string` | `true`   | None    | URL to delete data from  |\n| ELASTICSEARCH_URL | `string` | `false`  | None    | No description provided. |\n\n```shell\noms run delete \\\n    -a url='*****' \\\n    -e ELASTICSEARCH_URL=$ELASTICSEARCH_URL\n```\n\n## Contributing\n\nAll suggestions in how to improve the specification and this guide are very welcome. Feel free share your thoughts in the\nIssue tracker, or even better, fork the repository to implement your own ideas and submit a pull request.\n\n[![Edit elasticsearch on CodeSandbox](https://codesandbox.io/static/img/play-codesandbox.svg)](https://codesandbox.io/s/github/oms-services/elasticsearch)\n\nThis project is guided by [Contributor Covenant](https://github.com/oms-services/.github/blob/master/CODE_OF_CONDUCT.md).\nPlease read out full [Contribution Guidelines](https://github.com/oms-services/.github/blob/master/CONTRIBUTING.md).\n\n## Additional Resources\n\n- [Install the CLI](https://github.com/microservices/oms) - The OMS CLI helps developers create, test, validate, and build\n  microservices.\n- [Example OMS Services](https://github.com/oms-services) - Examples of OMS-compliant services written in a variety of\n  languages.\n- [Example Language Implementations](https://github.com/microservices) - Find tooling & language implementations in Node,\n  Python, Scala, Java, Clojure.\n- [Storyscript Hub](https://hub.storyscript.io) - A public registry of OMS services.\n- [Community Chat](https://spectrum.chat/open-microservices) - Have ideas? Questions? Join us on Spectrum.\n",
        "service": {
            "alias": "elasticsearch",
            "description": "Elasticsearch for Aysncy.",
            "isCertified": false,
            "name": "elasticsearch",
            "owner": {
                "username": "oms-services"
            },
            "public": true,
            "topics": [
                "microservice",
                "elasticsearch",
                "open-microservice",
                "oms"
            ]
        },
        "serviceUuid": "5f400641-a609-45f7-be1b-08edfd2491b1",
        "state": "BETA"
    },
    {
        "configuration": {
            "actions": {
                "fetch": {
                    "arguments": {
                        "body": {
                            "in": "requestBody",
                            "type": "any"
                        },
                        "headers": {
                            "in": "requestBody",
                            "type": "map"
                        },
                        "method": {
                            "default": "get",
                            "enum": [
                                "get",
                                "post",
                                "delete",
                                "put",
                                "options"
                            ],
                            "in": "requestBody",
                            "type": "string"
                        },
                        "query": {
                            "help": "Set an optional map of query parameters.\nQuery parameters are automatically appended to the url specified (/url?foo=bar&john=doe)\n",
                            "in": "requestBody",
                            "type": "map"
                        },
                        "url": {
                            "in": "requestBody",
                            "required": true,
                            "type": "string"
                        }
                    },
                    "help": "Make a HTTP request to the outside world.\nThis command is native to the platform for performance reasons.\n",
                    "http": {
                        "method": "get",
                        "path": "/",
                        "port": 8889
                    },
                    "output": {
                        "type": "any"
                    }
                },
                "server": {
                    "events": {
                        "listen": {
                            "arguments": {
                                "method": {
                                    "default": "get",
                                    "enum": [
                                        "get",
                                        "post",
                                        "delete",
                                        "put",
                                        "options"
                                    ],
                                    "in": "requestBody",
                                    "type": "string"
                                },
                                "path": {
                                    "in": "requestBody",
                                    "required": true,
                                    "type": "string"
                                }
                            },
                            "help": "Listen and respond to http connections by\nregistering with the Asyncy Gateway resulting in a serverless function.\n",
                            "http": {
                                "port": 8889,
                                "subscribe": {
                                    "contentType": "application/json",
                                    "method": "post",
                                    "path": "/register"
                                },
                                "unsubscribe": {
                                    "contentType": "application/json",
                                    "method": "post",
                                    "path": "/unregister"
                                }
                            },
                            "output": {
                                "commands": {
                                    "finish": {
                                        "http": {
                                            "contentType": "application/json",
                                            "use_event_conn": true
                                        }
                                    },
                                    "flush": {
                                        "http": {
                                            "contentType": "application/json",
                                            "use_event_conn": true
                                        }
                                    },
                                    "get_header": {
                                        "arguments": {
                                            "key": {
                                                "in": "responseBody",
                                                "required": true,
                                                "type": "string"
                                            }
                                        },
                                        "http": {
                                            "contentType": "application/json",
                                            "use_event_conn": true
                                        }
                                    },
                                    "redirect": {
                                        "arguments": {
                                            "query": {
                                                "help": "These query parameters are appended to the URL specified.",
                                                "in": "responseBody",
                                                "type": "map"
                                            },
                                            "url": {
                                                "in": "responseBody",
                                                "required": true,
                                                "type": "string"
                                            }
                                        },
                                        "help": "Redirect the incoming URL. No additional actions may be used after executing this command.",
                                        "http": {
                                            "contentType": "application/json",
                                            "use_event_conn": true
                                        }
                                    },
                                    "set_header": {
                                        "arguments": {
                                            "key": {
                                                "in": "responseBody",
                                                "required": true,
                                                "type": "string"
                                            },
                                            "value": {
                                                "in": "responseBody",
                                                "required": true,
                                                "type": "string"
                                            }
                                        },
                                        "http": {
                                            "contentType": "application/json",
                                            "use_event_conn": true
                                        }
                                    },
                                    "set_status": {
                                        "arguments": {
                                            "code": {
                                                "in": "responseBody",
                                                "required": true,
                                                "type": "int"
                                            }
                                        },
                                        "http": {
                                            "contentType": "application/json",
                                            "use_event_conn": true
                                        }
                                    },
                                    "write": {
                                        "arguments": {
                                            "content": {
                                                "in": "responseBody",
                                                "required": true,
                                                "type": "string"
                                            },
                                            "flush": {
                                                "in": "responseBody",
                                                "required": false,
                                                "type": "boolean"
                                            }
                                        },
                                        "http": {
                                            "contentType": "application/json",
                                            "use_event_conn": true
                                        }
                                    }
                                },
                                "contentType": "application/json",
                                "properties": {
                                    "body": {
                                        "type": "map"
                                    },
                                    "headers": {
                                        "type": "map"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                }
            },
            "health": {
                "http": {
                    "path": "/",
                    "port": 8889
                }
            },
            "info": {
                "contact": {
                    "email": "support@example.com",
                    "name": "John Doe",
                    "url": "https://support.example.com"
                },
                "description": "This is a sample currency converter service",
                "license": {
                    "name": "MIT",
                    "url": "https://opensource.org/licenses/MIT"
                },
                "title": "Currency Converter",
                "version": "1.0.1"
            },
            "lifecycle": {
                "startup": {
                    "command": [
                        "python",
                        "-m",
                        "app.main"
                    ]
                }
            },
            "omg": 1
        },
        "readme": "# Asyncy HTTP Gateway\n\nAPI gateway server for executing Stories via HTTP.\n\n```coffee\nhttp server as server\n  when server listen method: 'get' path: '/' as req\n    log info msg: req.body\n    log info msg: req.headers\n    log info msg: req.headers['Host']\n    req write data: 'Hello World'\n    req status code: 200\n    req finish\n```\n\n```sh\ncurl https://foobar.storyscriptapp.com\n>>> Hello World\n```\n\n\n## Development\n\nSetup virtual environment and install dependencies\n```\nvirtualenv -p python3.6 venv\nsource venv/bin/activate\npip install -r requirements.txt\n```\n\nRun locally by calling\n\n```\npython -m app.main --logging=debug --debug\n```\n\n### Register an endpoint\n\n```shell\ncurl --data '{\"endpoint\": \"http://localhost:9000/story/foo\", \"data\":{\"path\":\"/ping\", \"method\": \"post\", \"host\": \"a\"}}' \\\n     -H \"Content-Type: application/json\" \\\n     localhost:8889/register\n```\n\nNow access that endpoint\n\n```shell\ncurl -X POST -d 'foobar' -H \"Host: a.storyscriptapp.com\" http://localhost:8888/ping\n```\n\n\n### Unregister an endpoint\n\n```shell\ncurl --data '{\"endpoint\": \"http://localhost:9000/story/foo\", \"data\":{\"path\":\"/ping\", \"method\": \"post\", \"host\": \"a\"}}' \\\n     -H \"Content-Type: application/json\" \\\n     localhost:8889/unregister\n```\n",
        "service": {
            "alias": null,
            "description": "The Story Cloud API gateway server for executing Stories via HTTP.",
            "isCertified": false,
            "name": "http",
            "owner": {
                "username": "jean"
            },
            "public": true,
            "topics": [
                "http",
                "service"
            ]
        },
        "serviceUuid": "f21b9499-e8bf-4f07-9e31-cbfe7b070c5a",
        "state": "BETA"
    },
    {
        "configuration": {
            "actions": {
                "convert": {
                    "arguments": {
                        "properties": {
                            "help": "Properties to be used for conversion",
                            "in": "requestBody",
                            "type": "map"
                        },
                        "spec": {
                            "help": "The OpenAPI spec, as a map",
                            "in": "requestBody",
                            "required": true,
                            "type": "map"
                        }
                    },
                    "help": "Convert an OpenAPI document to OMS document",
                    "http": {
                        "contentType": "application/json",
                        "method": "post",
                        "path": "/convert",
                        "port": 9000
                    },
                    "output": {
                        "contentType": "application/json",
                        "properties": {
                            "spec": {
                                "help": "The converted OpenAPI document",
                                "type": "map"
                            }
                        },
                        "type": "object"
                    }
                }
            },
            "info": {
                "description": "This tool aims to convert an OpenAPI 3 spec to its corresponding OMS\nequivalent. Not all features are supported, and some assumptions have\nbeen made.\n",
                "license": {
                    "name": "MIT",
                    "url": "https://opensource.org/licenses/MIT"
                },
                "title": "openapi2oms",
                "version": "1.0.0"
            },
            "lifecycle": {
                "startup": {
                    "command": [
                        "python",
                        "-m",
                        "openapi2oms.Service"
                    ]
                }
            },
            "oms": 1
        },
        "readme": "# openapi2oms\nThis tool aims to convert an OpenAPI 3 spec to its corresponding OMS\nequivalent. Not all features are supported, and some assumptions have\nbeen made. Please read the caveats section to understand these\nassumptions. \n\n## Storyscript\n```coffee\nresult = openapi2oms convert spec: openApiSpec properties: {\"serverIndex\": 0}\n```  \n\n## Caveats\n### Assumptions\n1. If there are multiple content types available for a given path, the content type\n   `application/json` shall be preferred if available. If `application/json` is not\n   available, then an appropriate content type will be chosen arbitrarily\n2. OMS doesn't support multiple responses. As such, the following order of response\n   codes are considered as successful operations: `200, 201, 202, 2XX, 204, default`.\n   Furthermore, since multiple content types are not supported, `application/json`\n   will be used if available. If `application/json` is not available, then an\n   appropriate content type will be chosen arbitrarily\n   \n   \n### todos \nrelated:\n1. [ ] https://github.com/microservices/openmicroservices.org/issues/50\n2. [x] https://github.com/microservices/openmicroservices.org/pull/96\n\n## License\nMIT License\n",
        "service": {
            "alias": "openapi2oms",
            "description": "A tool to convert an OpenAPI spec to its corresponding OMG spec",
            "isCertified": true,
            "name": "openapi2oms",
            "owner": {
                "username": "judepereira"
            },
            "public": true,
            "topics": [
                "microservices",
                "omg",
                "openapi",
                "openapi3"
            ]
        },
        "serviceUuid": "84031fdb-beed-421d-94dd-5c8dbe4a86ba",
        "state": "BETA"
    },
    {
        "configuration": {
            "actions": {
                "convert": {
                    "arguments": {
                        "properties": {
                            "help": "Properties to be used for conversion",
                            "in": "requestBody",
                            "type": "map"
                        },
                        "spec": {
                            "help": "The OpenAPI spec, as a map",
                            "in": "requestBody",
                            "required": true,
                            "type": "map"
                        }
                    },
                    "help": "Convert an OpenAPI document to OMS document",
                    "http": {
                        "contentType": "application/json",
                        "method": "post",
                        "path": "/convert",
                        "port": 9000
                    },
                    "output": {
                        "contentType": "application/json",
                        "properties": {
                            "spec": {
                                "help": "The converted OpenAPI document",
                                "type": "map"
                            }
                        },
                        "type": "object"
                    }
                }
            },
            "info": {
                "description": "This tool aims to convert an OpenAPI 3 spec to its corresponding OMS\nequivalent. Not all features are supported, and some assumptions have\nbeen made.\n",
                "license": {
                    "name": "MIT",
                    "url": "https://opensource.org/licenses/MIT"
                },
                "title": "openapi2oms",
                "version": "1.0.0"
            },
            "lifecycle": {
                "startup": {
                    "command": [
                        "python",
                        "-m",
                        "openapi2oms.Service"
                    ]
                }
            },
            "oms": 1
        },
        "readme": "# openapi2oms\nThis tool aims to convert an OpenAPI 3 spec to its corresponding OMS\nequivalent. Not all features are supported, and some assumptions have\nbeen made. Please read the caveats section to understand these\nassumptions. \n\n## Storyscript\n```coffee\nresult = openapi2oms convert spec: openApiSpec properties: {\"serverIndex\": 0}\n```  \n\n## Caveats\n### Assumptions\n1. If there are multiple content types available for a given path, the content type\n   `application/json` shall be preferred if available. If `application/json` is not\n   available, then an appropriate content type will be chosen arbitrarily\n2. OMS doesn't support multiple responses. As such, the following order of response\n   codes are considered as successful operations: `200, 201, 202, 2XX, 204, default`.\n   Furthermore, since multiple content types are not supported, `application/json`\n   will be used if available. If `application/json` is not available, then an\n   appropriate content type will be chosen arbitrarily\n   \n   \n### todos \nrelated:\n1. [ ] https://github.com/microservices/openmicroservices.org/issues/50\n2. [x] https://github.com/microservices/openmicroservices.org/pull/96\n\n## License\nMIT License\n",
        "service": {
            "alias": "openapi2oms",
            "description": "A tool to convert an OpenAPI spec to its corresponding OMG spec",
            "isCertified": true,
            "name": "openapi2oms",
            "owner": {
                "username": "judepereira"
            },
            "public": true,
            "topics": [
                "microservices",
                "omg",
                "openapi",
                "openapi3"
            ]
        },
        "serviceUuid": "84031fdb-beed-421d-94dd-5c8dbe4a86ba",
        "state": "BETA"
    },
    {
        "configuration": {
            "actions": {
                "decode": {
                    "arguments": {
                        "content": {
                            "help": "The content to decode",
                            "in": "requestBody",
                            "type": "string"
                        }
                    },
                    "help": "Decode a string encoded in base64",
                    "http": {
                        "contentType": "application/json",
                        "method": "post",
                        "path": "/decode",
                        "port": 5000
                    },
                    "output": {
                        "type": "string"
                    }
                },
                "encode": {
                    "arguments": {
                        "content": {
                            "help": "The content to encode",
                            "in": "requestBody",
                            "type": "string"
                        }
                    },
                    "help": "Encode a string to base64",
                    "http": {
                        "contentType": "application/json",
                        "method": "post",
                        "path": "/encode",
                        "port": 5000
                    },
                    "output": {
                        "type": "string"
                    }
                }
            },
            "info": {
                "contact": {
                    "email": "jean@barriere.io",
                    "name": "Jean Barriere",
                    "url": "https://github.com/JeanBarriere"
                },
                "description": "This is a simple base64 encoder/decoder",
                "license": {
                    "name": "MIT",
                    "url": "https://opensource.org/licenses/MIT"
                },
                "title": "Base64 utils",
                "version": "1.0.0"
            },
            "lifecycle": {
                "startup": {
                    "command": [
                        "node",
                        "index.js"
                    ]
                }
            },
            "omg": 1
        },
        "readme": "# base64\nAn OMG service to encode/decode Base64 content\n\n### Usage\n\n```coffee\n# Storyscript\nencoded = base64 encode content: \"hello world\"\ndecoded = base64 decode content: encoded\n```\n",
        "service": {
            "alias": "base64",
            "description": "An OMG service to encode/decode Base64 content",
            "isCertified": false,
            "name": "basesixfour",
            "owner": {
                "username": "jean"
            },
            "public": true,
            "topics": [
                "base64",
                "text",
                "encode",
                "decode",
                "omg",
                "microservice"
            ]
        },
        "serviceUuid": "dc402073-1df2-45d3-a362-3342c980c2eb",
        "state": "BETA"
    },
    {
        "configuration": {
            "actions": {
                "decode": {
                    "arguments": {
                        "content": {
                            "help": "The content to decode",
                            "in": "requestBody",
                            "type": "string"
                        }
                    },
                    "help": "Decode a string encoded in base64",
                    "http": {
                        "contentType": "application/json",
                        "method": "post",
                        "path": "/decode",
                        "port": 5000
                    },
                    "output": {
                        "type": "string"
                    }
                },
                "encode": {
                    "arguments": {
                        "content": {
                            "help": "The content to encode",
                            "in": "requestBody",
                            "type": "string"
                        }
                    },
                    "help": "Encode a string to base64",
                    "http": {
                        "contentType": "application/json",
                        "method": "post",
                        "path": "/encode",
                        "port": 5000
                    },
                    "output": {
                        "type": "string"
                    }
                }
            },
            "info": {
                "contact": {
                    "email": "jean@barriere.io",
                    "name": "Jean Barriere",
                    "url": "https://github.com/JeanBarriere"
                },
                "description": "This is a simple base64 encoder/decoder",
                "license": {
                    "name": "MIT",
                    "url": "https://opensource.org/licenses/MIT"
                },
                "title": "Base64 utils",
                "version": "1.0.0"
            },
            "lifecycle": {
                "startup": {
                    "command": [
                        "node",
                        "index.js"
                    ]
                }
            },
            "omg": 1
        },
        "readme": "# base64\nAn OMG service to encode/decode Base64 content\n\n### Usage\n\n```coffee\n# Storyscript\nencoded = base64 encode content: \"hello world\"\ndecoded = base64 decode content: encoded\n```\n",
        "service": {
            "alias": "base64",
            "description": "An OMG service to encode/decode Base64 content",
            "isCertified": false,
            "name": "basesixfour",
            "owner": {
                "username": "jean"
            },
            "public": true,
            "topics": [
                "base64",
                "text",
                "encode",
                "decode",
                "omg",
                "microservice"
            ]
        },
        "serviceUuid": "dc402073-1df2-45d3-a362-3342c980c2eb",
        "state": "BETA"
    },
    {
        "configuration": {
            "actions": {
                "getMemos": {
                    "help": "Convert a currency into another currency",
                    "http": {
                        "method": "get",
                        "path": "/",
                        "port": 5000
                    },
                    "output": {
                        "contentType": "application/json",
                        "properties": {
                            "data": {
                                "elements": {
                                    "type": "string"
                                },
                                "type": "list"
                            },
                            "message": {
                                "type": "string"
                            },
                            "status": {
                                "type": "string"
                            }
                        },
                        "type": "object"
                    }
                }
            },
            "health": {
                "http": {
                    "path": "/",
                    "port": 5000
                }
            },
            "info": {
                "contact": {
                    "email": "baptiste.zorzi@gmail.com",
                    "name": "Baptiste Zorzi",
                    "url": "https://github.com/z0rzi"
                },
                "description": "This is a simple memo API written in NodeJS",
                "license": {
                    "name": "Nope",
                    "url": "https://nopenope.com"
                },
                "title": "Simple Memo API",
                "version": "1.0.0"
            },
            "lifecycle": {
                "startup": {
                    "command": [
                        "npm",
                        "start"
                    ]
                }
            },
            "omg": 1
        },
        "readme": "\n# Small Memo API\n\nThe purpose of this api is to learn unitary testing\n",
        "service": {
            "alias": null,
            "description": "That's just a memo API, written in nodeJS",
            "isCertified": false,
            "name": "simple_memo_api",
            "owner": {
                "username": "z0rzi"
            },
            "public": true,
            "topics": [
                "Memo",
                "NodeJS"
            ]
        },
        "serviceUuid": "e1532a53-a87a-42ff-b336-02c098f89410",
        "state": "BETA"
    },
    {
        "configuration": {
            "commands": {
                "many": {
                    "arguments": {
                        "after": {
                            "required": true,
                            "type": "file"
                        },
                        "before": {
                            "required": true,
                            "type": "file"
                        },
                        "dest": {
                            "help": "Location to save the results.",
                            "required": true,
                            "type": "file"
                        }
                    },
                    "format": "many {before} {after} {dest} {threshold}",
                    "threshold": {
                        "default": 0.01,
                        "help": "Percentage of threshold.",
                        "type": "int"
                    }
                },
                "one": {
                    "arguments": {
                        "after": {
                            "required": true,
                            "type": "file"
                        },
                        "before": {
                            "required": true,
                            "type": "file"
                        },
                        "dest": {
                            "help": "Location to save the results.",
                            "required": true,
                            "type": "file"
                        },
                        "threshold": {
                            "default": 0.01,
                            "help": "Percentage of threshold.",
                            "type": "int"
                        }
                    },
                    "format": "one {before} {after} {dest} {threshold}"
                }
            }
        },
        "readme": "# Blink Diff as a Microservice\n\n[![Microservice.Guide](https://img.shields.io/badge/Microservice.Guide-ready-brightgreen.svg?style=for-the-badge)](https://microservice.guide)\n\nUsing https://github.com/yahoo/blink-diff\n\n### Asyncy Example\n\n```coffeescript\nresults = blink-diff many before:`/old` after:`/new` dest:`/output`\n```\n",
        "service": {
            "alias": "blink-diff",
            "description": "Compare one or more images using https://github.com/yahoo/blink-diff in Asyncy",
            "isCertified": false,
            "name": "blink-diff",
            "owner": {
                "username": "oms-services"
            },
            "public": true,
            "topics": [
                "image-diff",
                "diff",
                "image-compression",
                "microservice",
                "open-microservice"
            ]
        },
        "serviceUuid": "ee0028b6-7182-4827-9e95-a47d7c2b09d1",
        "state": "BETA"
    },
    {
        "configuration": {
            "commands": {
                "many": {
                    "arguments": {
                        "after": {
                            "required": true,
                            "type": "file"
                        },
                        "before": {
                            "required": true,
                            "type": "file"
                        },
                        "dest": {
                            "help": "Location to save the results.",
                            "required": true,
                            "type": "file"
                        }
                    },
                    "format": "many {before} {after} {dest} {threshold}",
                    "threshold": {
                        "default": 0.01,
                        "help": "Percentage of threshold.",
                        "type": "int"
                    }
                },
                "one": {
                    "arguments": {
                        "after": {
                            "required": true,
                            "type": "file"
                        },
                        "before": {
                            "required": true,
                            "type": "file"
                        },
                        "dest": {
                            "help": "Location to save the results.",
                            "required": true,
                            "type": "file"
                        },
                        "threshold": {
                            "default": 0.01,
                            "help": "Percentage of threshold.",
                            "type": "int"
                        }
                    },
                    "format": "one {before} {after} {dest} {threshold}"
                }
            }
        },
        "readme": "# Blink Diff as a Microservice\n\n[![Microservice.Guide](https://img.shields.io/badge/Microservice.Guide-ready-brightgreen.svg?style=for-the-badge)](https://microservice.guide)\n\nUsing https://github.com/yahoo/blink-diff\n\n### Asyncy Example\n\n```coffeescript\nresults = blink-diff many before:`/old` after:`/new` dest:`/output`\n```\n",
        "service": {
            "alias": "blink-diff",
            "description": "Compare one or more images using https://github.com/yahoo/blink-diff in Asyncy",
            "isCertified": false,
            "name": "blink-diff",
            "owner": {
                "username": "oms-services"
            },
            "public": true,
            "topics": [
                "image-diff",
                "diff",
                "image-compression",
                "microservice",
                "open-microservice"
            ]
        },
        "serviceUuid": "ee0028b6-7182-4827-9e95-a47d7c2b09d1",
        "state": "BETA"
    },
    {
        "configuration": {
            "actions": {
                "bot": {
                    "events": {
                        "hears": {
                            "arguments": {
                                "channel": {
                                    "help": "Only listen in a specific channel",
                                    "in": "requestBody",
                                    "required": true,
                                    "type": "string"
                                },
                                "pattern": {
                                    "help": "A regexp pattern to filter messages",
                                    "in": "requestBody",
                                    "type": "string"
                                }
                            },
                            "help": "Triggered anytime a messages matches the pattern",
                            "http": {
                                "port": 8000,
                                "subscribe": {
                                    "contentType": "application/json",
                                    "method": "post",
                                    "path": "/subscribe"
                                },
                                "unsubscribe": {
                                    "contentType": "application/json",
                                    "method": "post",
                                    "path": "/unsubscribe"
                                }
                            },
                            "output": {
                                "contentType": "application/json",
                                "properties": {
                                    "channel": {
                                        "help": "The channel ID",
                                        "type": "string"
                                    },
                                    "client_msg_id": {
                                        "help": "The message ID",
                                        "type": "string"
                                    },
                                    "text": {
                                        "help": "The message text",
                                        "type": "string"
                                    },
                                    "ts": {
                                        "help": "The message timestamp (eg: \"1535474523.000100\")\n",
                                        "type": "string"
                                    },
                                    "user": {
                                        "help": "The user ID",
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            }
                        },
                        "responds": {
                            "arguments": {
                                "pattern": {
                                    "help": "A regexp pattern to filter messages",
                                    "in": "requestBody",
                                    "type": "string"
                                }
                            },
                            "help": "Triggered by direct messages to the bot",
                            "http": {
                                "port": 8000,
                                "subscribe": {
                                    "contentType": "application/json",
                                    "method": "post",
                                    "path": "/subscribe"
                                },
                                "unsubscribe": {
                                    "contentType": "application/json",
                                    "method": "post",
                                    "path": "/unsubscribe"
                                }
                            },
                            "output": {
                                "contentType": "application/json",
                                "properties": {
                                    "channel": {
                                        "help": "The channel ID",
                                        "type": "string"
                                    },
                                    "client_msg_id": {
                                        "help": "The message ID",
                                        "type": "string"
                                    },
                                    "text": {
                                        "help": "The message text",
                                        "type": "string"
                                    },
                                    "ts": {
                                        "help": "The message timestamp (eg: \"1535474523.000100\")\n",
                                        "type": "string"
                                    },
                                    "user": {
                                        "help": "The user ID",
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    },
                    "help": "Start a Slack bot"
                },
                "channels": {
                    "arguments": {
                        "exclude_archived": {
                            "default": false,
                            "help": "Set to true to exclude archived channels from the list",
                            "in": "requestBody",
                            "type": "boolean"
                        },
                        "limit": {
                            "default": 100,
                            "help": "Limit the number of channels to return. Must be less than 1000.",
                            "in": "requestBody",
                            "type": "int"
                        },
                        "token": {
                            "help": "Authentication token bearing required scopes.\nEnvironment variable BOT_TOKEN used by default.\n",
                            "in": "requestBody",
                            "type": "string"
                        },
                        "types": {
                            "help": "Mix and match channel types: public_channel, private_channel, mpim, im\nDefault is public_channel only.\n",
                            "in": "requestBody",
                            "type": "list"
                        }
                    },
                    "help": "Get a list of channels",
                    "http": {
                        "contentType": "application/json",
                        "method": "post",
                        "path": "/api/channels.list",
                        "port": 8000
                    },
                    "output": {
                        "contentType": "application/json",
                        "type": "map"
                    }
                },
                "directChannels": {
                    "arguments": {
                        "limit": {
                            "default": 100,
                            "help": "Limit the number of channels to return. Must be less than 1000.",
                            "in": "requestBody",
                            "type": "int"
                        },
                        "token": {
                            "help": "Authentication token bearing required scopes.\nEnvironment variable BOT_TOKEN used by default.\n",
                            "in": "requestBody",
                            "type": "string"
                        }
                    },
                    "help": "Lists direct message channels for the calling user.",
                    "http": {
                        "contentType": "application/json",
                        "method": "post",
                        "path": "/api/im.list",
                        "port": 8000
                    },
                    "output": {
                        "contentType": "application/json",
                        "type": "map"
                    }
                },
                "send": {
                    "arguments": {
                        "attachments": {
                            "in": "requestBody",
                            "type": "list"
                        },
                        "channel": {
                            "help": "What channel to send message in.\nThis can be a \"#channel\" \"@user\" or a channel id.\n",
                            "in": "requestBody",
                            "required": true,
                            "type": "string"
                        },
                        "text": {
                            "help": "Text of the message to send.",
                            "in": "requestBody",
                            "required": true,
                            "type": "string"
                        },
                        "token": {
                            "help": "Authentication token bearing required scopes.\nEnvironment variable BOT_TOKEN used by default.\n",
                            "in": "requestBody",
                            "type": "string"
                        }
                    },
                    "help": "Sends a message to a channel.\nhttps://api.slack.com/methods/chat.postMessage\n",
                    "http": {
                        "contentType": "application/json",
                        "method": "post",
                        "path": "/api/chat.postMessage",
                        "port": 8000
                    },
                    "output": {
                        "contentType": "application/json",
                        "type": "map"
                    }
                },
                "users": {
                    "arguments": {
                        "cursor": {
                            "help": "Paginate through collections of data by setting the cursor parameter to a next_cursor attribute returned by a previous request's response_metadata. Default value fetches the first \"page\" of the collection. See pagination for more detail.\n",
                            "in": "requestBody",
                            "type": "string"
                        },
                        "include_locale": {
                            "help": "Set this to true to receive the locale for users. Defaults to false\n",
                            "in": "requestBody",
                            "type": "boolean"
                        },
                        "limit": {
                            "default": 0,
                            "help": "The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the users list hasn't been reached.\n",
                            "in": "requestBody",
                            "range": {
                                "min": 0
                            },
                            "type": "int"
                        },
                        "token": {
                            "help": "Authentication token bearing required scopes.\nEnvironment variable BOT_TOKEN used by default.\n",
                            "in": "requestBody",
                            "type": "string"
                        }
                    },
                    "http": {
                        "contentType": "application/json",
                        "method": "post",
                        "path": "/api/users.list",
                        "port": 8000
                    },
                    "output": {
                        "contentType": "application/json",
                        "type": "map"
                    }
                }
            },
            "environment": {
                "BOT_TOKEN": {
                    "help": "The Slack bot token",
                    "type": "string"
                }
            },
            "info": {
                "description": "This is a microservice for Slack",
                "title": "Slack Microservice",
                "version": "0.2.0"
            },
            "lifecycle": {
                "startup": {
                    "command": [
                        "python",
                        "app/main.py"
                    ]
                }
            },
            "omg": 1
        },
        "readme": "# Slack as a microservice\n\n[![Open Microservice Guide](https://img.shields.io/badge/OMG-enabled-brightgreen.svg?style=for-the-badge)](https://microservice.guide)\n\nThis microservice's goal is to fully utilise the Slack API.\n\n## [OMG](hhttps://microservice.guide) CLI\n\n### Slack Bot\n```sh\nomg exec -e TOKEN=<secret> -c bot\n```\n\nSubscribe to an event.\n```sh\nomg subscribe -e hears -a \"pattern=/^hello/\"\n```\n\n\n## [Asyncy](https://asyncy.com) Example\n\nThe `slack` service is published in the [Asyncy Hub](https://hub.asyncy.com/r/microservice/slack)\n\n```storyscript\nslack bot as client\n    when client hears channel:'general' pattern:/^welcome/ as msg\n        msg emoji key:'thumbs_up'\n        msg reply message:'Nice to have you here'\n\n    when client responds pattern:/foo/ as msg\n        # respond to direct messages\n        msg reply message:'bar'\n\n    when client slash pattern:/deploy/ as msg\n        # when user does /deploy do something awesome\n\n```\n",
        "service": {
            "alias": null,
            "description": "Slack bot microservice",
            "isCertified": false,
            "name": "slack",
            "owner": {
                "username": "jean"
            },
            "public": true,
            "topics": []
        },
        "serviceUuid": "fecef326-45cc-4ccd-a8de-f829bca5939b",
        "state": "BETA"
    },
    {
        "configuration": {
            "actions": {
                "validate": {
                    "arguments": {
                        "file": {
                            "help": "The content of the oms.yml you want to validate (in a multipart/form-data)",
                            "in": "requestBody",
                            "type": "string"
                        }
                    },
                    "help": "Validates the provided oms.yml content",
                    "http": {
                        "method": "post",
                        "path": "/validate",
                        "port": 5000
                    },
                    "output": {
                        "list": {
                            "elements": {
                                "type": "string"
                            }
                        },
                        "type": "list"
                    }
                }
            },
            "health": {
                "http": {
                    "path": "/health",
                    "port": 5000
                }
            },
            "info": {
                "contact": {
                    "email": "core@openmicroservices.org",
                    "name": "Open Microservices",
                    "url": "https://openmicroservices.org"
                },
                "description": "One microservice to rule them all",
                "license": {
                    "name": "ISC",
                    "url": "https://opensource.org/licenses/MIT"
                },
                "title": "Open Microservices Validator",
                "version": "1.1.0"
            },
            "lifecycle": {
                "startup": {
                    "command": [
                        "node",
                        "validate"
                    ]
                }
            },
            "oms": 1
        },
        "readme": "# _Open Microservices Validator_ Open Microservice\n\n> One microservice to rule them all\n\n[![Open Microservice Specification Version](https://img.shields.io/badge/Open%20Microservice-1.0-477bf3.svg)](https://openmicroservices.org)\n[![Open Microservices Spectrum Chat](https://withspectrum.github.io/badge/badge.svg)](https://spectrum.chat/open-microservices)\n[![Open Microservices Code of Conduct](https://img.shields.io/badge/Contributor%20Covenant-v1.4%20adopted-ff69b4.svg)](https://github.com/oms-services/.github/blob/master/CODE_OF_CONDUCT.md)\n[![Open Microservices Commitzen](https://img.shields.io/badge/commitizen-friendly-brightgreen.svg)](http://commitizen.github.io/cz-cli/)\n[![PRs Welcome](https://img.shields.io/badge/PRs-welcome-brightgreen.svg)](http://makeapullrequest.com)\n[![License: ISC](https://img.shields.io/badge/License-ISC-blue.svg)](https://opensource.org/licenses/MIT)\n\n## Introduction\n\nThis project is an example implementation of the [Open Microservice Specification](https://openmicroservices.org), a standard\noriginally created at [Storyscript](https://storyscript.io) for building highly-portable \"microservices\" that expose the\nevents, actions, and APIs inside containerized software.\n\n## Getting Started\n\nThe `oms` command-line interface allows you to interact with Open Microservices. If you're interested in creating an Open\nMicroservice the CLI also helps validate, test, and debug your `oms.yml` implementation!\n\nSee the [oms-cli](https://github.com/microservices/oms) project to learn more!\n\n### Installation\n\n```\nnpm install -g @microservices/oms\n```\n\n## Usage\n\n### Open Microservices CLI Usage\n\nOnce you have the [oms-cli](https://github.com/microservices/oms) installed, you can run any of the following commands from\nwithin this project's root directory:\n\n#### Actions\n\n##### validate\n\n> Validates the provided oms.yml content\n\n##### Action Arguments\n\n| Argument Name | Type     | Required | Default | Description                                                                |\n| :------------ | :------- | :------- | :------ | :------------------------------------------------------------------------- |\n| file          | `string` | `false`  | None    | The content of the oms.yml you want to validate (in a multipart/form-data) |\n\n```shell\noms run validate \\\n    -a file='*****'\n```\n\n## Contributing\n\nAll suggestions in how to improve the specification and this guide are very welcome. Feel free share your thoughts in the\nIssue tracker, or even better, fork the repository to implement your own ideas and submit a pull request.\n\n[![Edit oms-validate on CodeSandbox](https://codesandbox.io/static/img/play-codesandbox.svg)](https://codesandbox.io/s/github/oms-services/oms-validate)\n\nThis project is guided by [Contributor Covenant](https://github.com/oms-services/.github/blob/master/CODE_OF_CONDUCT.md).\nPlease read out full [Contribution Guidelines](https://github.com/oms-services/.github/blob/master/CONTRIBUTING.md).\n\n## Additional Resources\n\n- [Install the CLI](https://github.com/microservices/oms) - The OMS CLI helps developers create, test, validate, and build\n  microservices.\n- [Example OMS Services](https://github.com/oms-services) - Examples of OMS-compliant services written in a variety of\n  languages.\n- [Example Language Implementations](https://github.com/microservices) - Find tooling & language implementations in Node,\n  Python, Scala, Java, Clojure.\n- [Storyscript Hub](https://hub.storyscript.io) - A public registry of OMS services.\n- [Community Chat](https://spectrum.chat/open-microservices) - Have ideas? Questions? Join us on Spectrum.\n",
        "service": {
            "alias": "oms-validate",
            "description": "One microservice to rule them all",
            "isCertified": true,
            "name": "oms-validate",
            "owner": {
                "username": "oms-services"
            },
            "public": true,
            "topics": [
                "oms",
                "microservice",
                "open-microservice"
            ]
        },
        "serviceUuid": "9d1161dd-3105-4393-a852-7de19faa0fc6",
        "state": "BETA"
    },
    {
        "configuration": {
            "actions": {
                "validate": {
                    "arguments": {
                        "file": {
                            "help": "The content of the oms.yml you want to validate (in a multipart/form-data)",
                            "in": "requestBody",
                            "type": "string"
                        }
                    },
                    "help": "Validates the provided oms.yml content",
                    "http": {
                        "method": "post",
                        "path": "/validate",
                        "port": 5000
                    },
                    "output": {
                        "list": {
                            "elements": {
                                "type": "string"
                            }
                        },
                        "type": "list"
                    }
                }
            },
            "health": {
                "http": {
                    "path": "/health",
                    "port": 5000
                }
            },
            "info": {
                "contact": {
                    "email": "core@openmicroservices.org",
                    "name": "Open Microservices",
                    "url": "https://openmicroservices.org"
                },
                "description": "One microservice to rule them all",
                "license": {
                    "name": "ISC",
                    "url": "https://opensource.org/licenses/MIT"
                },
                "title": "Open Microservices Validator",
                "version": "1.1.0"
            },
            "lifecycle": {
                "startup": {
                    "command": [
                        "node",
                        "validate"
                    ]
                }
            },
            "oms": 1
        },
        "readme": "# _Open Microservices Validator_ Open Microservice\n\n> One microservice to rule them all\n\n[![Open Microservice Specification Version](https://img.shields.io/badge/Open%20Microservice-1.0-477bf3.svg)](https://openmicroservices.org)\n[![Open Microservices Spectrum Chat](https://withspectrum.github.io/badge/badge.svg)](https://spectrum.chat/open-microservices)\n[![Open Microservices Code of Conduct](https://img.shields.io/badge/Contributor%20Covenant-v1.4%20adopted-ff69b4.svg)](https://github.com/oms-services/.github/blob/master/CODE_OF_CONDUCT.md)\n[![Open Microservices Commitzen](https://img.shields.io/badge/commitizen-friendly-brightgreen.svg)](http://commitizen.github.io/cz-cli/)\n[![PRs Welcome](https://img.shields.io/badge/PRs-welcome-brightgreen.svg)](http://makeapullrequest.com)\n[![License: ISC](https://img.shields.io/badge/License-ISC-blue.svg)](https://opensource.org/licenses/MIT)\n\n## Introduction\n\nThis project is an example implementation of the [Open Microservice Specification](https://openmicroservices.org), a standard\noriginally created at [Storyscript](https://storyscript.io) for building highly-portable \"microservices\" that expose the\nevents, actions, and APIs inside containerized software.\n\n## Getting Started\n\nThe `oms` command-line interface allows you to interact with Open Microservices. If you're interested in creating an Open\nMicroservice the CLI also helps validate, test, and debug your `oms.yml` implementation!\n\nSee the [oms-cli](https://github.com/microservices/oms) project to learn more!\n\n### Installation\n\n```\nnpm install -g @microservices/oms\n```\n\n## Usage\n\n### Open Microservices CLI Usage\n\nOnce you have the [oms-cli](https://github.com/microservices/oms) installed, you can run any of the following commands from\nwithin this project's root directory:\n\n#### Actions\n\n##### validate\n\n> Validates the provided oms.yml content\n\n##### Action Arguments\n\n| Argument Name | Type     | Required | Default | Description                                                                |\n| :------------ | :------- | :------- | :------ | :------------------------------------------------------------------------- |\n| file          | `string` | `false`  | None    | The content of the oms.yml you want to validate (in a multipart/form-data) |\n\n```shell\noms run validate \\\n    -a file='*****'\n```\n\n## Contributing\n\nAll suggestions in how to improve the specification and this guide are very welcome. Feel free share your thoughts in the\nIssue tracker, or even better, fork the repository to implement your own ideas and submit a pull request.\n\n[![Edit oms-validate on CodeSandbox](https://codesandbox.io/static/img/play-codesandbox.svg)](https://codesandbox.io/s/github/oms-services/oms-validate)\n\nThis project is guided by [Contributor Covenant](https://github.com/oms-services/.github/blob/master/CODE_OF_CONDUCT.md).\nPlease read out full [Contribution Guidelines](https://github.com/oms-services/.github/blob/master/CONTRIBUTING.md).\n\n## Additional Resources\n\n- [Install the CLI](https://github.com/microservices/oms) - The OMS CLI helps developers create, test, validate, and build\n  microservices.\n- [Example OMS Services](https://github.com/oms-services) - Examples of OMS-compliant services written in a variety of\n  languages.\n- [Example Language Implementations](https://github.com/microservices) - Find tooling & language implementations in Node,\n  Python, Scala, Java, Clojure.\n- [Storyscript Hub](https://hub.storyscript.io) - A public registry of OMS services.\n- [Community Chat](https://spectrum.chat/open-microservices) - Have ideas? Questions? Join us on Spectrum.\n",
        "service": {
            "alias": "oms-validate",
            "description": "One microservice to rule them all",
            "isCertified": true,
            "name": "oms-validate",
            "owner": {
                "username": "oms-services"
            },
            "public": true,
            "topics": [
                "oms",
                "microservice",
                "open-microservice"
            ]
        },
        "serviceUuid": "9d1161dd-3105-4393-a852-7de19faa0fc6",
        "state": "BETA"
    },
    {
        "configuration": {
            "actions": {
                "message": {
                    "arguments": {
                        "name": {
                            "in": "requestBody",
                            "required": true,
                            "type": "string"
                        }
                    },
                    "http": {
                        "method": "post",
                        "path": "/message",
                        "port": 8080
                    },
                    "output": {
                        "contentType": "application/json",
                        "properties": {
                            "message": {
                                "type": "string"
                            }
                        },
                        "type": "object"
                    }
                }
            },
            "info": {
                "description": "Describe your microservice",
                "license": {
                    "name": "Apache 2.0",
                    "url": "https://opensource.org/licenses/Apache-2.0"
                },
                "title": "Your microservice",
                "version": "1.0.0"
            },
            "lifecycle": {
                "startup": {
                    "command": []
                }
            },
            "omg": 1
        },
        "readme": "# Storywriter Microservice\n\n![Microservice](https://img.shields.io/badge/microservice-ready-brightgreen.svg?style=for-the-badge)\n[![Build status](https://img.shields.io/travis/com/microservices/go/master.svg?style=for-the-badge)](https://travis-ci.com/microservices/storywriter)\n\nAn OMG microservice to tell stories.\n",
        "service": {
            "alias": null,
            "description": "An OMG microservice to tell stories.",
            "isCertified": false,
            "name": "storywriter",
            "owner": {
                "username": "darkLord19"
            },
            "public": true,
            "topics": []
        },
        "serviceUuid": "c4deff9f-b3f1-47c7-bed2-88a42eb2c5e3",
        "state": "BETA"
    },
    {
        "configuration": {
            "actions": {
                "addPet": {
                    "arguments": {
                        "category": {
                            "in": "requestBody",
                            "properties": {
                                "id": {
                                    "required": false,
                                    "type": "int"
                                },
                                "name": {
                                    "required": false,
                                    "type": "string"
                                }
                            },
                            "required": false,
                            "type": "object"
                        },
                        "id": {
                            "in": "requestBody",
                            "required": false,
                            "type": "int"
                        },
                        "name": {
                            "in": "requestBody",
                            "required": false,
                            "type": "string"
                        },
                        "photoUrls": {
                            "in": "requestBody",
                            "required": false,
                            "type": "list"
                        },
                        "status": {
                            "help": "pet status in the store",
                            "in": "requestBody",
                            "required": false,
                            "type": "string"
                        },
                        "tags": {
                            "in": "requestBody",
                            "required": false,
                            "type": "list"
                        }
                    },
                    "help": "Add a new pet to the store",
                    "http": {
                        "contentType": "application/json",
                        "method": "post",
                        "url": "https://petstore.swagger.io/v2/pet"
                    },
                    "output": {
                        "help": "Auto generated 2xx.",
                        "type": null
                    }
                },
                "createUser": {
                    "arguments": {
                        "email": {
                            "in": "requestBody",
                            "required": false,
                            "type": "string"
                        },
                        "firstName": {
                            "in": "requestBody",
                            "required": false,
                            "type": "string"
                        },
                        "id": {
                            "in": "requestBody",
                            "required": false,
                            "type": "int"
                        },
                        "lastName": {
                            "in": "requestBody",
                            "required": false,
                            "type": "string"
                        },
                        "password": {
                            "in": "requestBody",
                            "required": false,
                            "type": "string"
                        },
                        "phone": {
                            "in": "requestBody",
                            "required": false,
                            "type": "string"
                        },
                        "userStatus": {
                            "help": "User Status",
                            "in": "requestBody",
                            "required": false,
                            "type": "int"
                        },
                        "username": {
                            "in": "requestBody",
                            "required": false,
                            "type": "string"
                        }
                    },
                    "help": "Create user",
                    "http": {
                        "contentType": "application/json",
                        "method": "post",
                        "url": "https://petstore.swagger.io/v2/user"
                    },
                    "output": {
                        "help": "successful operation",
                        "type": null
                    }
                },
                "createUsersWithArrayInput": {
                    "arguments": {
                        "root": {
                            "help": null,
                            "in": "requestBody",
                            "required": false,
                            "type": "list"
                        }
                    },
                    "help": "Creates list of users with given input array",
                    "http": {
                        "contentType": "application/json",
                        "method": "post",
                        "url": "https://petstore.swagger.io/v2/user/createWithArray"
                    },
                    "output": {
                        "help": "successful operation",
                        "type": null
                    }
                },
                "createUsersWithListInput": {
                    "arguments": {
                        "root": {
                            "help": null,
                            "in": "requestBody",
                            "required": false,
                            "type": "list"
                        }
                    },
                    "help": "Creates list of users with given input array",
                    "http": {
                        "contentType": "application/json",
                        "method": "post",
                        "url": "https://petstore.swagger.io/v2/user/createWithList"
                    },
                    "output": {
                        "help": "successful operation",
                        "type": null
                    }
                },
                "deleteOrder": {
                    "arguments": {
                        "orderId": {
                            "help": "ID of the order that needs to be deleted",
                            "in": "path",
                            "required": true,
                            "type": "int"
                        }
                    },
                    "help": "Delete purchase order by ID",
                    "http": {
                        "method": "delete",
                        "url": "https://petstore.swagger.io/v2/store/order/{orderId}"
                    },
                    "output": {
                        "help": "Auto generated 2xx.",
                        "type": null
                    }
                },
                "deletePet": {
                    "arguments": {
                        "api_key": {
                            "help": null,
                            "in": "header",
                            "required": false,
                            "type": "string"
                        },
                        "petId": {
                            "help": "Pet id to delete",
                            "in": "path",
                            "required": true,
                            "type": "int"
                        }
                    },
                    "help": "Deletes a pet",
                    "http": {
                        "method": "delete",
                        "url": "https://petstore.swagger.io/v2/pet/{petId}"
                    },
                    "output": {
                        "help": "Auto generated 2xx.",
                        "type": null
                    }
                },
                "deleteUser": {
                    "arguments": {
                        "username": {
                            "help": "The name that needs to be deleted",
                            "in": "path",
                            "required": true,
                            "type": "string"
                        }
                    },
                    "help": "Delete user",
                    "http": {
                        "method": "delete",
                        "url": "https://petstore.swagger.io/v2/user/{username}"
                    },
                    "output": {
                        "help": "Auto generated 2xx.",
                        "type": null
                    }
                },
                "findPetsByStatus": {
                    "arguments": {
                        "status": {
                            "help": "Status values that need to be considered for filter",
                            "in": "query",
                            "required": true,
                            "type": "list"
                        }
                    },
                    "help": "Finds Pets by status",
                    "http": {
                        "method": "get",
                        "url": "https://petstore.swagger.io/v2/pet/findByStatus"
                    },
                    "output": {
                        "contentType": "application/json",
                        "properties": {},
                        "type": "list"
                    }
                },
                "findPetsByTags": {
                    "arguments": {
                        "tags": {
                            "help": "Tags to filter by",
                            "in": "query",
                            "required": true,
                            "type": "list"
                        }
                    },
                    "help": "Finds Pets by tags",
                    "http": {
                        "method": "get",
                        "url": "https://petstore.swagger.io/v2/pet/findByTags"
                    },
                    "output": {
                        "contentType": "application/json",
                        "properties": {},
                        "type": "list"
                    }
                },
                "getInventory": {
                    "arguments": {},
                    "help": "Returns pet inventories by status",
                    "http": {
                        "method": "get",
                        "url": "https://petstore.swagger.io/v2/store/inventory"
                    },
                    "output": {
                        "contentType": "application/json",
                        "properties": {},
                        "type": "object"
                    }
                },
                "getOrderById": {
                    "arguments": {
                        "orderId": {
                            "help": "ID of pet that needs to be fetched",
                            "in": "path",
                            "required": true,
                            "type": "int"
                        }
                    },
                    "help": "Find purchase order by ID",
                    "http": {
                        "method": "get",
                        "url": "https://petstore.swagger.io/v2/store/order/{orderId}"
                    },
                    "output": {
                        "contentType": "application/json",
                        "properties": {
                            "complete": {
                                "required": false,
                                "type": "boolean"
                            },
                            "id": {
                                "required": false,
                                "type": "int"
                            },
                            "petId": {
                                "required": false,
                                "type": "int"
                            },
                            "quantity": {
                                "required": false,
                                "type": "int"
                            },
                            "shipDate": {
                                "required": false,
                                "type": "string"
                            },
                            "status": {
                                "help": "Order Status",
                                "required": false,
                                "type": "string"
                            }
                        },
                        "type": "object"
                    }
                },
                "getPetById": {
                    "arguments": {
                        "petId": {
                            "help": "ID of pet to return",
                            "in": "path",
                            "required": true,
                            "type": "int"
                        }
                    },
                    "help": "Find pet by ID",
                    "http": {
                        "method": "get",
                        "url": "https://petstore.swagger.io/v2/pet/{petId}"
                    },
                    "output": {
                        "contentType": "application/json",
                        "properties": {
                            "category": {
                                "properties": {
                                    "id": {
                                        "required": false,
                                        "type": "int"
                                    },
                                    "name": {
                                        "required": false,
                                        "type": "string"
                                    }
                                },
                                "required": false,
                                "type": "object"
                            },
                            "id": {
                                "required": false,
                                "type": "int"
                            },
                            "name": {
                                "required": false,
                                "type": "string"
                            },
                            "photoUrls": {
                                "required": false,
                                "type": "list"
                            },
                            "status": {
                                "help": "pet status in the store",
                                "required": false,
                                "type": "string"
                            },
                            "tags": {
                                "required": false,
                                "type": "list"
                            }
                        },
                        "type": "object"
                    }
                },
                "getUserByName": {
                    "arguments": {
                        "username": {
                            "help": "The name that needs to be fetched. Use user1 for testing. ",
                            "in": "path",
                            "required": true,
                            "type": "string"
                        }
                    },
                    "help": "Get user by user name",
                    "http": {
                        "method": "get",
                        "url": "https://petstore.swagger.io/v2/user/{username}"
                    },
                    "output": {
                        "contentType": "application/json",
                        "properties": {
                            "email": {
                                "required": false,
                                "type": "string"
                            },
                            "firstName": {
                                "required": false,
                                "type": "string"
                            },
                            "id": {
                                "required": false,
                                "type": "int"
                            },
                            "lastName": {
                                "required": false,
                                "type": "string"
                            },
                            "password": {
                                "required": false,
                                "type": "string"
                            },
                            "phone": {
                                "required": false,
                                "type": "string"
                            },
                            "userStatus": {
                                "help": "User Status",
                                "required": false,
                                "type": "int"
                            },
                            "username": {
                                "required": false,
                                "type": "string"
                            }
                        },
                        "type": "object"
                    }
                },
                "loginUser": {
                    "arguments": {
                        "password": {
                            "help": "The password for login in clear text",
                            "in": "query",
                            "required": true,
                            "type": "string"
                        },
                        "username": {
                            "help": "The user name for login",
                            "in": "query",
                            "required": true,
                            "type": "string"
                        }
                    },
                    "help": "Logs user into the system",
                    "http": {
                        "method": "get",
                        "url": "https://petstore.swagger.io/v2/user/login"
                    },
                    "output": {
                        "contentType": "application/json",
                        "properties": {},
                        "type": "string"
                    }
                },
                "logoutUser": {
                    "arguments": {},
                    "help": "Logs out current logged in user session",
                    "http": {
                        "method": "get",
                        "url": "https://petstore.swagger.io/v2/user/logout"
                    },
                    "output": {
                        "help": "successful operation",
                        "type": null
                    }
                },
                "placeOrder": {
                    "arguments": {
                        "complete": {
                            "in": "requestBody",
                            "required": false,
                            "type": "boolean"
                        },
                        "id": {
                            "in": "requestBody",
                            "required": false,
                            "type": "int"
                        },
                        "petId": {
                            "in": "requestBody",
                            "required": false,
                            "type": "int"
                        },
                        "quantity": {
                            "in": "requestBody",
                            "required": false,
                            "type": "int"
                        },
                        "shipDate": {
                            "in": "requestBody",
                            "required": false,
                            "type": "string"
                        },
                        "status": {
                            "help": "Order Status",
                            "in": "requestBody",
                            "required": false,
                            "type": "string"
                        }
                    },
                    "help": "Place an order for a pet",
                    "http": {
                        "contentType": "application/json",
                        "method": "post",
                        "url": "https://petstore.swagger.io/v2/store/order"
                    },
                    "output": {
                        "contentType": "application/json",
                        "properties": {
                            "complete": {
                                "required": false,
                                "type": "boolean"
                            },
                            "id": {
                                "required": false,
                                "type": "int"
                            },
                            "petId": {
                                "required": false,
                                "type": "int"
                            },
                            "quantity": {
                                "required": false,
                                "type": "int"
                            },
                            "shipDate": {
                                "required": false,
                                "type": "string"
                            },
                            "status": {
                                "help": "Order Status",
                                "required": false,
                                "type": "string"
                            }
                        },
                        "type": "object"
                    }
                },
                "updatePet": {
                    "arguments": {
                        "category": {
                            "in": "requestBody",
                            "properties": {
                                "id": {
                                    "required": false,
                                    "type": "int"
                                },
                                "name": {
                                    "required": false,
                                    "type": "string"
                                }
                            },
                            "required": false,
                            "type": "object"
                        },
                        "id": {
                            "in": "requestBody",
                            "required": false,
                            "type": "int"
                        },
                        "name": {
                            "in": "requestBody",
                            "required": false,
                            "type": "string"
                        },
                        "photoUrls": {
                            "in": "requestBody",
                            "required": false,
                            "type": "list"
                        },
                        "status": {
                            "help": "pet status in the store",
                            "in": "requestBody",
                            "required": false,
                            "type": "string"
                        },
                        "tags": {
                            "in": "requestBody",
                            "required": false,
                            "type": "list"
                        }
                    },
                    "help": "Update an existing pet",
                    "http": {
                        "contentType": "application/json",
                        "method": "put",
                        "url": "https://petstore.swagger.io/v2/pet"
                    },
                    "output": {
                        "help": "Auto generated 2xx.",
                        "type": null
                    }
                },
                "updatePetWithForm": {
                    "arguments": {
                        "name": {
                            "help": "Updated name of the pet",
                            "in": "requestBody",
                            "required": false,
                            "type": "string"
                        },
                        "petId": {
                            "help": "ID of pet that needs to be updated",
                            "in": "path",
                            "required": true,
                            "type": "int"
                        },
                        "status": {
                            "help": "Updated status of the pet",
                            "in": "requestBody",
                            "required": false,
                            "type": "string"
                        }
                    },
                    "help": "Updates a pet in the store with form data",
                    "http": {
                        "contentType": "application/x-www-form-urlencoded",
                        "method": "post",
                        "url": "https://petstore.swagger.io/v2/pet/{petId}"
                    },
                    "output": {
                        "help": "Auto generated 2xx.",
                        "type": null
                    }
                },
                "updateUser": {
                    "arguments": {
                        "email": {
                            "in": "requestBody",
                            "required": false,
                            "type": "string"
                        },
                        "firstName": {
                            "in": "requestBody",
                            "required": false,
                            "type": "string"
                        },
                        "id": {
                            "in": "requestBody",
                            "required": false,
                            "type": "int"
                        },
                        "lastName": {
                            "in": "requestBody",
                            "required": false,
                            "type": "string"
                        },
                        "password": {
                            "in": "requestBody",
                            "required": false,
                            "type": "string"
                        },
                        "phone": {
                            "in": "requestBody",
                            "required": false,
                            "type": "string"
                        },
                        "userStatus": {
                            "help": "User Status",
                            "in": "requestBody",
                            "required": false,
                            "type": "int"
                        },
                        "username": {
                            "in": "requestBody",
                            "required": false,
                            "type": "string"
                        }
                    },
                    "help": "Updated user",
                    "http": {
                        "contentType": "application/json",
                        "method": "put",
                        "url": "https://petstore.swagger.io/v2/user/{username}"
                    },
                    "output": {
                        "help": "Auto generated 2xx.",
                        "type": null
                    }
                },
                "uploadFile": {
                    "arguments": {
                        "petId": {
                            "help": "ID of pet to update",
                            "in": "path",
                            "required": true,
                            "type": "int"
                        },
                        "root": {
                            "help": null,
                            "in": "requestBody",
                            "required": false,
                            "type": "string"
                        }
                    },
                    "help": "uploads an image",
                    "http": {
                        "contentType": "application/octet-stream",
                        "method": "post",
                        "url": "https://petstore.swagger.io/v2/pet/{petId}/uploadImage"
                    },
                    "output": {
                        "contentType": "application/json",
                        "properties": {
                            "code": {
                                "required": false,
                                "type": "int"
                            },
                            "message": {
                                "required": false,
                                "type": "string"
                            },
                            "type": {
                                "required": false,
                                "type": "string"
                            }
                        },
                        "type": "object"
                    }
                }
            },
            "contact": {
                "email": "",
                "name": "",
                "url": ""
            },
            "fromOpenAPIVersion": "3.0.0",
            "hostedExternally": true,
            "info": {
                "description": "This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key `special-key` to test the authorization filters.",
                "license": {
                    "name": "Apache 2.0",
                    "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
                },
                "title": "Swagger Petstore",
                "version": "1.0.0"
            },
            "omg": 1,
            "source": "openapi"
        },
        "readme": null,
        "service": {
            "alias": null,
            "description": "OpenAPI's petstore",
            "isCertified": false,
            "name": "petstore",
            "owner": {
                "username": "judepereira"
            },
            "public": true,
            "topics": null
        },
        "serviceUuid": "22b4b7d6-89af-4eed-956b-8714497deefd",
        "state": "BETA"
    },
    {
        "configuration": {
            "actions": {
                "shorten": {
                    "arguments": {
                        "url": {
                            "help": "The url to shorten",
                            "in": "requestBody",
                            "type": "string"
                        }
                    },
                    "help": "Shorten a URL",
                    "http": {
                        "contentType": "application/json",
                        "method": "post",
                        "path": "/shorten",
                        "port": 5000
                    },
                    "output": {
                        "type": "string"
                    }
                }
            },
            "environment": {
                "REBRANDLY_API_KEY": {
                    "required": true,
                    "type": "string"
                }
            },
            "info": {
                "contact": {
                    "email": "hello@asyncy.com",
                    "name": "Asyncy",
                    "url": "https://asyncy.com"
                },
                "description": "rebrandly as a microservice",
                "license": {
                    "name": "MIT",
                    "url": "https://opensource.org/licenses/MIT"
                },
                "title": "rebrandly",
                "version": "1.0.0"
            },
            "lifecycle": {
                "startup": {
                    "command": [
                        "node",
                        "app.js"
                    ]
                }
            },
            "omg": 1
        },
        "readme": "# Rebrandly as a microservice\n\nShorten links.\n\n```bash\n$> omg exec shorten -a url='<your-url>' -e REBRANDLY_API_KEY='<your-api-key>'\n```\n",
        "service": {
            "alias": null,
            "description": "Asyncy microservice to shorten URL using rebrandly",
            "isCertified": false,
            "name": "rebrandly",
            "owner": {
                "username": "Arinono"
            },
            "public": true,
            "topics": [
                "omg",
                "microservice"
            ]
        },
        "serviceUuid": "5653c357-9451-48dd-8676-1982ac55d157",
        "state": "BETA"
    },
    {
        "configuration": {
            "actions": {
                "hash": {
                    "arguments": {
                        "memCost": {
                            "in": "requestBody",
                            "required": true,
                            "type": "int"
                        },
                        "password": {
                            "in": "requestBody",
                            "required": true,
                            "type": "string"
                        },
                        "rounds": {
                            "in": "requestBody",
                            "required": true,
                            "type": "int"
                        },
                        "salt": {
                            "in": "requestBody",
                            "required": true,
                            "type": "string"
                        },
                        "saltSeparator": {
                            "in": "requestBody",
                            "required": true,
                            "type": "string"
                        },
                        "signerKey": {
                            "in": "requestBody",
                            "required": true,
                            "type": "string"
                        }
                    },
                    "http": {
                        "method": "post",
                        "path": "/hash",
                        "port": 3000
                    },
                    "output": {
                        "type": "string"
                    }
                }
            },
            "health": {
                "http": {
                    "path": "/health",
                    "port": 3000
                }
            },
            "info": {
                "contact": {
                    "email": "marianocordoba039@gmail.com",
                    "name": "Mariano C\u00f3rdoba"
                },
                "description": "A service to encrypt using Firebase Scrypt",
                "license": {
                    "name": "MIT",
                    "url": "https://opensource.org/licenses/MIT"
                },
                "title": "Firebase Scrypt",
                "version": "1.0.0"
            },
            "lifecycle": {
                "startup": {
                    "command": [
                        "yarn",
                        "start"
                    ]
                }
            },
            "oms": 1
        },
        "readme": "# Firebase Scrypt\n\n[![Open Microservice Specification Version](https://img.shields.io/badge/Open%20Microservice-1.0-blue)](https://openmicroservices.org) [![License: MIT](https://img.shields.io/badge/License-MIT-brightgreen)](https://opensource.org/licenses/MIT)\n\nWhen you export accounts from Firebase, their passwords are encrypted using a modified version of the scrypt algorithm. This service can be used to validate passwords of accounts exported from Firebase.\n\n## Usage\n\nYou will need the hash parameters from Firebase. Go to Firebase Console > Authentication and click the menu on the top right corner of the users list, then click on **Password hash parameters**\n\n### Actions\n\n- hash\n\n  **Storyscript:**\n\n  ``` coffee\n  hashed = firebase-scrypt hash memCost:14 rounds:8 saltSeparator:\"yoursaltseparator\" signerKey:\"yoursignerkey\" salt=\"randomsalt\" password=\"verysecurepassword\"\n  ```\n\n  **Output**:\n\n  ```\n  GWWlYtpW8fgd\n  ```",
        "service": {
            "alias": null,
            "description": "A service to encrypt using Firebase Scrypt",
            "isCertified": false,
            "name": "firebase-scrypt",
            "owner": {
                "username": "marianocordoba"
            },
            "public": true,
            "topics": [
                "scrypt",
                "hashing",
                "firebase"
            ]
        },
        "serviceUuid": "fb7995d0-e942-4873-abe9-2e27d0349162",
        "state": "BETA"
    },
    {
        "configuration": {
            "actions": {
                "anyway": {
                    "arguments": {
                        "company": {
                            "in": "query",
                            "type": "string"
                        },
                        "from": {
                            "in": "query",
                            "type": "string"
                        }
                    },
                    "help": "Who the fuck are you anyway",
                    "http": {
                        "contentType": "application/json",
                        "method": "get",
                        "path": "/anyway",
                        "port": 5000
                    },
                    "output": {
                        "type": "string"
                    }
                },
                "asshole": {
                    "arguments": {
                        "from": {
                            "in": "query",
                            "type": "string"
                        }
                    },
                    "help": "Asshole",
                    "http": {
                        "contentType": "application/json",
                        "method": "get",
                        "path": "/asshole",
                        "port": 5000
                    },
                    "output": {
                        "type": "string"
                    }
                },
                "awesome": {
                    "arguments": {
                        "from": {
                            "in": "query",
                            "type": "string"
                        }
                    },
                    "help": "Awesome",
                    "http": {
                        "contentType": "application/json",
                        "method": "get",
                        "path": "/awesome",
                        "port": 5000
                    },
                    "output": {
                        "type": "string"
                    }
                },
                "back": {
                    "arguments": {
                        "from": {
                            "in": "query",
                            "type": "string"
                        },
                        "name": {
                            "in": "query",
                            "type": "string"
                        }
                    },
                    "help": "Back the fuck off",
                    "http": {
                        "contentType": "application/json",
                        "method": "get",
                        "path": "/back",
                        "port": 5000
                    },
                    "output": {
                        "type": "string"
                    }
                },
                "bag": {
                    "arguments": {
                        "from": {
                            "in": "query",
                            "type": "string"
                        }
                    },
                    "help": "Bag",
                    "http": {
                        "contentType": "application/json",
                        "method": "get",
                        "path": "/bag",
                        "port": 5000
                    },
                    "output": {
                        "type": "string"
                    }
                },
                "ballmer": {
                    "arguments": {
                        "company": {
                            "in": "query",
                            "type": "string"
                        },
                        "from": {
                            "in": "query",
                            "type": "string"
                        },
                        "name": {
                            "in": "query",
                            "type": "string"
                        }
                    },
                    "help": "Ballmer",
                    "http": {
                        "contentType": "application/json",
                        "method": "get",
                        "path": "/ballmer",
                        "port": 5000
                    },
                    "output": {
                        "type": "string"
                    }
                },
                "bday": {
                    "arguments": {
                        "from": {
                            "in": "query",
                            "type": "string"
                        },
                        "name": {
                            "in": "query",
                            "type": "string"
                        }
                    },
                    "help": "Bday",
                    "http": {
                        "contentType": "application/json",
                        "method": "get",
                        "path": "/bday",
                        "port": 5000
                    },
                    "output": {
                        "type": "string"
                    }
                },
                "because": {
                    "arguments": {
                        "from": {
                            "in": "query",
                            "type": "string"
                        }
                    },
                    "help": "Because",
                    "http": {
                        "contentType": "application/json",
                        "method": "get",
                        "path": "/because",
                        "port": 5000
                    },
                    "output": {
                        "type": "string"
                    }
                },
                "blackadder": {
                    "arguments": {
                        "from": {
                            "in": "query",
                            "type": "string"
                        },
                        "name": {
                            "in": "query",
                            "type": "string"
                        }
                    },
                    "help": "Blackadder",
                    "http": {
                        "contentType": "application/json",
                        "method": "get",
                        "path": "/blackadder",
                        "port": 5000
                    },
                    "output": {
                        "type": "string"
                    }
                },
                "bm": {
                    "arguments": {
                        "from": {
                            "in": "query",
                            "type": "string"
                        },
                        "name": {
                            "in": "query",
                            "type": "string"
                        }
                    },
                    "help": "Bravo Mike",
                    "http": {
                        "contentType": "application/json",
                        "method": "get",
                        "path": "/bm",
                        "port": 5000
                    },
                    "output": {
                        "type": "string"
                    }
                },
                "bucket": {
                    "arguments": {
                        "from": {
                            "in": "query",
                            "type": "string"
                        }
                    },
                    "help": "Bucket",
                    "http": {
                        "contentType": "application/json",
                        "method": "get",
                        "path": "/bucket",
                        "port": 5000
                    },
                    "output": {
                        "type": "string"
                    }
                },
                "bus": {
                    "arguments": {
                        "from": {
                            "in": "query",
                            "type": "string"
                        },
                        "name": {
                            "in": "query",
                            "type": "string"
                        }
                    },
                    "help": "Bus",
                    "http": {
                        "contentType": "application/json",
                        "method": "get",
                        "path": "/bus",
                        "port": 5000
                    },
                    "output": {
                        "type": "string"
                    }
                },
                "bye": {
                    "arguments": {
                        "from": {
                            "in": "query",
                            "type": "string"
                        }
                    },
                    "help": "Bye",
                    "http": {
                        "contentType": "application/json",
                        "method": "get",
                        "path": "/bye",
                        "port": 5000
                    },
                    "output": {
                        "type": "string"
                    }
                },
                "caniuse": {
                    "arguments": {
                        "from": {
                            "in": "query",
                            "type": "string"
                        },
                        "tool": {
                            "in": "query",
                            "type": "string"
                        }
                    },
                    "help": "Can I Use",
                    "http": {
                        "contentType": "application/json",
                        "method": "get",
                        "path": "/caniuse",
                        "port": 5000
                    },
                    "output": {
                        "type": "string"
                    }
                },
                "chainsaw": {
                    "arguments": {
                        "from": {
                            "in": "query",
                            "type": "string"
                        },
                        "name": {
                            "in": "query",
                            "type": "string"
                        }
                    },
                    "help": "Chainsaw",
                    "http": {
                        "contentType": "application/json",
                        "method": "get",
                        "path": "/chainsaw",
                        "port": 5000
                    },
                    "output": {
                        "type": "string"
                    }
                },
                "cocksplat": {
                    "arguments": {
                        "from": {
                            "in": "query",
                            "type": "string"
                        },
                        "name": {
                            "in": "query",
                            "type": "string"
                        }
                    },
                    "help": "Cocksplat",
                    "http": {
                        "contentType": "application/json",
                        "method": "get",
                        "path": "/cocksplat",
                        "port": 5000
                    },
                    "output": {
                        "type": "string"
                    }
                },
                "cool": {
                    "arguments": {
                        "from": {
                            "in": "query",
                            "type": "string"
                        }
                    },
                    "help": "Cool Story",
                    "http": {
                        "contentType": "application/json",
                        "method": "get",
                        "path": "/cool",
                        "port": 5000
                    },
                    "output": {
                        "type": "string"
                    }
                },
                "cup": {
                    "arguments": {
                        "from": {
                            "in": "query",
                            "type": "string"
                        }
                    },
                    "help": "Cup",
                    "http": {
                        "contentType": "application/json",
                        "method": "get",
                        "path": "/cup",
                        "port": 5000
                    },
                    "output": {
                        "type": "string"
                    }
                },
                "dalton": {
                    "arguments": {
                        "from": {
                            "in": "query",
                            "type": "string"
                        },
                        "name": {
                            "in": "query",
                            "type": "string"
                        }
                    },
                    "help": "Dalton",
                    "http": {
                        "contentType": "application/json",
                        "method": "get",
                        "path": "/dalton",
                        "port": 5000
                    },
                    "output": {
                        "type": "string"
                    }
                },
                "deraadt": {
                    "arguments": {
                        "from": {
                            "in": "query",
                            "type": "string"
                        },
                        "name": {
                            "in": "query",
                            "type": "string"
                        }
                    },
                    "help": "{name} you are being the usual slimy hypocritical asshole... You may have had value ten years ago, but people will see that you don't anymore.",
                    "http": {
                        "contentType": "application/json",
                        "method": "get",
                        "path": "/deraadt",
                        "port": 5000
                    },
                    "output": {
                        "type": "string"
                    }
                },
                "diabetes": {
                    "arguments": {
                        "from": {
                            "in": "query",
                            "type": "string"
                        }
                    },
                    "help": "Diabetes",
                    "http": {
                        "contentType": "application/json",
                        "method": "get",
                        "path": "/diabetes",
                        "port": 5000
                    },
                    "output": {
                        "type": "string"
                    }
                },
                "donut": {
                    "arguments": {
                        "from": {
                            "in": "query",
                            "type": "string"
                        },
                        "name": {
                            "in": "query",
                            "type": "string"
                        }
                    },
                    "help": "Donut",
                    "http": {
                        "contentType": "application/json",
                        "method": "get",
                        "path": "/donut",
                        "port": 5000
                    },
                    "output": {
                        "type": "string"
                    }
                },
                "dosomething": {
                    "arguments": {
                        "do": {
                            "in": "query",
                            "type": "string"
                        },
                        "from": {
                            "in": "query",
                            "type": "string"
                        },
                        "something": {
                            "in": "query",
                            "type": "string"
                        }
                    },
                    "help": "Do Something",
                    "http": {
                        "contentType": "application/json",
                        "method": "get",
                        "path": "/dosomething",
                        "port": 5000
                    },
                    "output": {
                        "type": "string"
                    }
                },
                "equity": {
                    "arguments": {
                        "from": {
                            "in": "query",
                            "type": "string"
                        },
                        "name": {
                            "in": "query",
                            "type": "string"
                        }
                    },
                    "help": "Equity",
                    "http": {
                        "contentType": "application/json",
                        "method": "get",
                        "path": "/equity",
                        "port": 5000
                    },
                    "output": {
                        "type": "string"
                    }
                },
                "everyone": {
                    "arguments": {
                        "from": {
                            "in": "query",
                            "type": "string"
                        }
                    },
                    "help": "Everyone",
                    "http": {
                        "contentType": "application/json",
                        "method": "get",
                        "path": "/everyone",
                        "port": 5000
                    },
                    "output": {
                        "type": "string"
                    }
                },
                "everything": {
                    "arguments": {
                        "from": {
                            "in": "query",
                            "type": "string"
                        }
                    },
                    "help": "Everything",
                    "http": {
                        "contentType": "application/json",
                        "method": "get",
                        "path": "/everything",
                        "port": 5000
                    },
                    "output": {
                        "type": "string"
                    }
                },
                "false": {
                    "arguments": {
                        "from": {
                            "in": "query",
                            "type": "string"
                        },
                        "name": {
                            "in": "query",
                            "type": "string"
                        }
                    },
                    "help": "Fuck Off",
                    "http": {
                        "contentType": "application/json",
                        "method": "get",
                        "path": "/off",
                        "port": 5000
                    },
                    "output": {
                        "type": "string"
                    }
                },
                "family": {
                    "arguments": {
                        "from": {
                            "in": "query",
                            "type": "string"
                        }
                    },
                    "help": "Family",
                    "http": {
                        "contentType": "application/json",
                        "method": "get",
                        "path": "/family",
                        "port": 5000
                    },
                    "output": {
                        "type": "string"
                    }
                },
                "fascinating": {
                    "arguments": {
                        "from": {
                            "in": "query",
                            "type": "string"
                        }
                    },
                    "help": "Fascinating",
                    "http": {
                        "contentType": "application/json",
                        "method": "get",
                        "path": "/fascinating",
                        "port": 5000
                    },
                    "output": {
                        "type": "string"
                    }
                },
                "fewer": {
                    "arguments": {
                        "from": {
                            "in": "query",
                            "type": "string"
                        },
                        "name": {
                            "in": "query",
                            "type": "string"
                        }
                    },
                    "help": "Disappoint Fewer People",
                    "http": {
                        "contentType": "application/json",
                        "method": "get",
                        "path": "/fewer",
                        "port": 5000
                    },
                    "output": {
                        "type": "string"
                    }
                },
                "field": {
                    "arguments": {
                        "from": {
                            "in": "query",
                            "type": "string"
                        },
                        "name": {
                            "in": "query",
                            "type": "string"
                        },
                        "reference": {
                            "in": "query",
                            "type": "string"
                        }
                    },
                    "help": "Field of Fucks",
                    "http": {
                        "contentType": "application/json",
                        "method": "get",
                        "path": "/field",
                        "port": 5000
                    },
                    "output": {
                        "type": "string"
                    }
                },
                "flying": {
                    "arguments": {
                        "from": {
                            "in": "query",
                            "type": "string"
                        }
                    },
                    "help": "Flying",
                    "http": {
                        "contentType": "application/json",
                        "method": "get",
                        "path": "/flying",
                        "port": 5000
                    },
                    "output": {
                        "type": "string"
                    }
                },
                "ftfy": {
                    "arguments": {
                        "from": {
                            "in": "query",
                            "type": "string"
                        }
                    },
                    "help": "Fuck That, Fuck You",
                    "http": {
                        "contentType": "application/json",
                        "method": "get",
                        "path": "/ftfy",
                        "port": 5000
                    },
                    "output": {
                        "type": "string"
                    }
                },
                "fts": {
                    "arguments": {
                        "from": {
                            "in": "query",
                            "type": "string"
                        },
                        "name": {
                            "in": "query",
                            "type": "string"
                        }
                    },
                    "help": "Fuck That Shit",
                    "http": {
                        "contentType": "application/json",
                        "method": "get",
                        "path": "/fts",
                        "port": 5000
                    },
                    "output": {
                        "type": "string"
                    }
                },
                "fyyff": {
                    "arguments": {
                        "from": {
                            "in": "query",
                            "type": "string"
                        }
                    },
                    "help": "FYYFF",
                    "http": {
                        "contentType": "application/json",
                        "method": "get",
                        "path": "/fyyff",
                        "port": 5000
                    },
                    "output": {
                        "type": "string"
                    }
                },
                "gfy": {
                    "arguments": {
                        "from": {
                            "in": "query",
                            "type": "string"
                        },
                        "name": {
                            "in": "query",
                            "type": "string"
                        }
                    },
                    "help": "Golf Foxtrot Yankee",
                    "http": {
                        "contentType": "application/json",
                        "method": "get",
                        "path": "/gfy",
                        "port": 5000
                    },
                    "output": {
                        "type": "string"
                    }
                },
                "give": {
                    "arguments": {
                        "from": {
                            "in": "query",
                            "type": "string"
                        }
                    },
                    "help": "Give",
                    "http": {
                        "contentType": "application/json",
                        "method": "get",
                        "path": "/give",
                        "port": 5000
                    },
                    "output": {
                        "type": "string"
                    }
                },
                "greed": {
                    "arguments": {
                        "from": {
                            "in": "query",
                            "type": "string"
                        },
                        "noun": {
                            "in": "query",
                            "type": "string"
                        }
                    },
                    "help": "Greed",
                    "http": {
                        "contentType": "application/json",
                        "method": "get",
                        "path": "/greed",
                        "port": 5000
                    },
                    "output": {
                        "type": "string"
                    }
                },
                "horse": {
                    "arguments": {
                        "from": {
                            "in": "query",
                            "type": "string"
                        }
                    },
                    "help": "Fuck you and the horse you rode in on",
                    "http": {
                        "contentType": "application/json",
                        "method": "get",
                        "path": "/horse",
                        "port": 5000
                    },
                    "output": {
                        "type": "string"
                    }
                },
                "immensity": {
                    "arguments": {
                        "from": {
                            "in": "query",
                            "type": "string"
                        }
                    },
                    "help": "Immensity",
                    "http": {
                        "contentType": "application/json",
                        "method": "get",
                        "path": "/immensity",
                        "port": 5000
                    },
                    "output": {
                        "type": "string"
                    }
                },
                "ing": {
                    "arguments": {
                        "from": {
                            "in": "query",
                            "type": "string"
                        },
                        "name": {
                            "in": "query",
                            "type": "string"
                        }
                    },
                    "help": "Fucking",
                    "http": {
                        "contentType": "application/json",
                        "method": "get",
                        "path": "/ing",
                        "port": 5000
                    },
                    "output": {
                        "type": "string"
                    }
                },
                "jinglebells": {
                    "arguments": {
                        "from": {
                            "in": "query",
                            "type": "string"
                        }
                    },
                    "help": "Jingle Bells",
                    "http": {
                        "contentType": "application/json",
                        "method": "get",
                        "path": "/jinglebells",
                        "port": 5000
                    },
                    "output": {
                        "type": "string"
                    }
                },
                "keep": {
                    "arguments": {
                        "from": {
                            "in": "query",
                            "type": "string"
                        },
                        "name": {
                            "in": "query",
                            "type": "string"
                        }
                    },
                    "help": "Keep",
                    "http": {
                        "contentType": "application/json",
                        "method": "get",
                        "path": "/keep",
                        "port": 5000
                    },
                    "output": {
                        "type": "string"
                    }
                },
                "keepcalm": {
                    "arguments": {
                        "from": {
                            "in": "query",
                            "type": "string"
                        },
                        "reaction": {
                            "in": "query",
                            "type": "string"
                        }
                    },
                    "help": "Keep Calm",
                    "http": {
                        "contentType": "application/json",
                        "method": "get",
                        "path": "/keepcalm",
                        "port": 5000
                    },
                    "output": {
                        "type": "string"
                    }
                },
                "king": {
                    "arguments": {
                        "from": {
                            "in": "query",
                            "type": "string"
                        },
                        "name": {
                            "in": "query",
                            "type": "string"
                        }
                    },
                    "help": "King",
                    "http": {
                        "contentType": "application/json",
                        "method": "get",
                        "path": "/king",
                        "port": 5000
                    },
                    "output": {
                        "type": "string"
                    }
                },
                "life": {
                    "arguments": {
                        "from": {
                            "in": "query",
                            "type": "string"
                        }
                    },
                    "help": "Life",
                    "http": {
                        "contentType": "application/json",
                        "method": "get",
                        "path": "/life",
                        "port": 5000
                    },
                    "output": {
                        "type": "string"
                    }
                },
                "linus": {
                    "arguments": {
                        "from": {
                            "in": "query",
                            "type": "string"
                        },
                        "name": {
                            "in": "query",
                            "type": "string"
                        }
                    },
                    "help": "Linus",
                    "http": {
                        "contentType": "application/json",
                        "method": "get",
                        "path": "/linus",
                        "port": 5000
                    },
                    "output": {
                        "type": "string"
                    }
                },
                "logs": {
                    "arguments": {
                        "from": {
                            "in": "query",
                            "type": "string"
                        }
                    },
                    "help": "Check your fucking logs!",
                    "http": {
                        "contentType": "application/json",
                        "method": "get",
                        "path": "/logs",
                        "port": 5000
                    },
                    "output": {
                        "type": "string"
                    }
                },
                "look": {
                    "arguments": {
                        "from": {
                            "in": "query",
                            "type": "string"
                        },
                        "name": {
                            "in": "query",
                            "type": "string"
                        }
                    },
                    "help": "Look",
                    "http": {
                        "contentType": "application/json",
                        "method": "get",
                        "path": "/look",
                        "port": 5000
                    },
                    "output": {
                        "type": "string"
                    }
                },
                "looking": {
                    "arguments": {
                        "from": {
                            "in": "query",
                            "type": "string"
                        }
                    },
                    "help": "Looking",
                    "http": {
                        "contentType": "application/json",
                        "method": "get",
                        "path": "/looking",
                        "port": 5000
                    },
                    "output": {
                        "type": "string"
                    }
                },
                "madison": {
                    "arguments": {
                        "from": {
                            "in": "query",
                            "type": "string"
                        },
                        "name": {
                            "in": "query",
                            "type": "string"
                        }
                    },
                    "help": "Madison",
                    "http": {
                        "contentType": "application/json",
                        "method": "get",
                        "path": "/madison",
                        "port": 5000
                    },
                    "output": {
                        "type": "string"
                    }
                },
                "maybe": {
                    "arguments": {
                        "from": {
                            "in": "query",
                            "type": "string"
                        }
                    },
                    "help": "Maybe",
                    "http": {
                        "contentType": "application/json",
                        "method": "get",
                        "path": "/maybe",
                        "port": 5000
                    },
                    "output": {
                        "type": "string"
                    }
                },
                "me": {
                    "arguments": {
                        "from": {
                            "in": "query",
                            "type": "string"
                        }
                    },
                    "help": "Fuck Me",
                    "http": {
                        "contentType": "application/json",
                        "method": "get",
                        "path": "/me",
                        "port": 5000
                    },
                    "output": {
                        "type": "string"
                    }
                },
                "mornin": {
                    "arguments": {
                        "from": {
                            "in": "query",
                            "type": "string"
                        }
                    },
                    "help": "mornin",
                    "http": {
                        "contentType": "application/json",
                        "method": "get",
                        "path": "/mornin",
                        "port": 5000
                    },
                    "output": {
                        "type": "string"
                    }
                },
                "nugget": {
                    "arguments": {
                        "from": {
                            "in": "query",
                            "type": "string"
                        },
                        "name": {
                            "in": "query",
                            "type": "string"
                        }
                    },
                    "help": "Nugget",
                    "http": {
                        "contentType": "application/json",
                        "method": "get",
                        "path": "/nugget",
                        "port": 5000
                    },
                    "output": {
                        "type": "string"
                    }
                },
                "off_with": {
                    "arguments": {
                        "behavior": {
                            "in": "query",
                            "type": "string"
                        },
                        "from": {
                            "in": "query",
                            "type": "string"
                        }
                    },
                    "help": "Fuck Off With",
                    "http": {
                        "contentType": "application/json",
                        "method": "get",
                        "path": "/off-with",
                        "port": 5000
                    },
                    "output": {
                        "type": "string"
                    }
                },
                "outside": {
                    "arguments": {
                        "from": {
                            "in": "query",
                            "type": "string"
                        },
                        "name": {
                            "in": "query",
                            "type": "string"
                        }
                    },
                    "help": "Outside",
                    "http": {
                        "contentType": "application/json",
                        "method": "get",
                        "path": "/outside",
                        "port": 5000
                    },
                    "output": {
                        "type": "string"
                    }
                },
                "particular": {
                    "arguments": {
                        "from": {
                            "in": "query",
                            "type": "string"
                        },
                        "thing": {
                            "in": "query",
                            "type": "string"
                        }
                    },
                    "help": "This Thing In Particular",
                    "http": {
                        "contentType": "application/json",
                        "method": "get",
                        "path": "/particular",
                        "port": 5000
                    },
                    "output": {
                        "type": "string"
                    }
                },
                "pink": {
                    "arguments": {
                        "from": {
                            "in": "query",
                            "type": "string"
                        }
                    },
                    "help": "Pink",
                    "http": {
                        "contentType": "application/json",
                        "method": "get",
                        "path": "/pink",
                        "port": 5000
                    },
                    "output": {
                        "type": "string"
                    }
                },
                "problem": {
                    "arguments": {
                        "from": {
                            "in": "query",
                            "type": "string"
                        },
                        "name": {
                            "in": "query",
                            "type": "string"
                        }
                    },
                    "help": "Problem",
                    "http": {
                        "contentType": "application/json",
                        "method": "get",
                        "path": "/problem",
                        "port": 5000
                    },
                    "output": {
                        "type": "string"
                    }
                },
                "programmer": {
                    "arguments": {
                        "from": {
                            "in": "query",
                            "type": "string"
                        }
                    },
                    "help": "Programmer",
                    "http": {
                        "contentType": "application/json",
                        "method": "get",
                        "path": "/programmer",
                        "port": 5000
                    },
                    "output": {
                        "type": "string"
                    }
                },
                "pulp": {
                    "arguments": {
                        "from": {
                            "in": "query",
                            "type": "string"
                        },
                        "language": {
                            "in": "query",
                            "type": "string"
                        }
                    },
                    "help": "Pulp",
                    "http": {
                        "contentType": "application/json",
                        "method": "get",
                        "path": "/pulp",
                        "port": 5000
                    },
                    "output": {
                        "type": "string"
                    }
                },
                "question": {
                    "arguments": {
                        "from": {
                            "in": "query",
                            "type": "string"
                        }
                    },
                    "help": "Question",
                    "http": {
                        "contentType": "application/json",
                        "method": "get",
                        "path": "/question",
                        "port": 5000
                    },
                    "output": {
                        "type": "string"
                    }
                },
                "ratsarse": {
                    "arguments": {
                        "from": {
                            "in": "query",
                            "type": "string"
                        }
                    },
                    "help": "Rat's Arse",
                    "http": {
                        "contentType": "application/json",
                        "method": "get",
                        "path": "/ratsarse",
                        "port": 5000
                    },
                    "output": {
                        "type": "string"
                    }
                },
                "retard": {
                    "arguments": {
                        "from": {
                            "in": "query",
                            "type": "string"
                        }
                    },
                    "help": "Retard",
                    "http": {
                        "contentType": "application/json",
                        "method": "get",
                        "path": "/retard",
                        "port": 5000
                    },
                    "output": {
                        "type": "string"
                    }
                },
                "ridiculous": {
                    "arguments": {
                        "from": {
                            "in": "query",
                            "type": "string"
                        }
                    },
                    "help": "That's fucking ridiculous",
                    "http": {
                        "contentType": "application/json",
                        "method": "get",
                        "path": "/ridiculous",
                        "port": 5000
                    },
                    "output": {
                        "type": "string"
                    }
                },
                "rtfm": {
                    "arguments": {
                        "from": {
                            "in": "query",
                            "type": "string"
                        }
                    },
                    "help": "RTFM",
                    "http": {
                        "contentType": "application/json",
                        "method": "get",
                        "path": "/rtfm",
                        "port": 5000
                    },
                    "output": {
                        "type": "string"
                    }
                },
                "sake": {
                    "arguments": {
                        "from": {
                            "in": "query",
                            "type": "string"
                        }
                    },
                    "help": "sake",
                    "http": {
                        "contentType": "application/json",
                        "method": "get",
                        "path": "/sake",
                        "port": 5000
                    },
                    "output": {
                        "type": "string"
                    }
                },
                "shakespeare": {
                    "arguments": {
                        "from": {
                            "in": "query",
                            "type": "string"
                        },
                        "name": {
                            "in": "query",
                            "type": "string"
                        }
                    },
                    "help": "Shakespeare",
                    "http": {
                        "contentType": "application/json",
                        "method": "get",
                        "path": "/shakespeare",
                        "port": 5000
                    },
                    "output": {
                        "type": "string"
                    }
                },
                "shit": {
                    "arguments": {
                        "from": {
                            "in": "query",
                            "type": "string"
                        }
                    },
                    "help": "Fuck This Shit",
                    "http": {
                        "contentType": "application/json",
                        "method": "get",
                        "path": "/shit",
                        "port": 5000
                    },
                    "output": {
                        "type": "string"
                    }
                },
                "shutup": {
                    "arguments": {
                        "from": {
                            "in": "query",
                            "type": "string"
                        },
                        "name": {
                            "in": "query",
                            "type": "string"
                        }
                    },
                    "help": "Shut Up",
                    "http": {
                        "contentType": "application/json",
                        "method": "get",
                        "path": "/shutup",
                        "port": 5000
                    },
                    "output": {
                        "type": "string"
                    }
                },
                "single": {
                    "arguments": {
                        "from": {
                            "in": "query",
                            "type": "string"
                        }
                    },
                    "help": "Single",
                    "http": {
                        "contentType": "application/json",
                        "method": "get",
                        "path": "/single",
                        "port": 5000
                    },
                    "output": {
                        "type": "string"
                    }
                },
                "thanks": {
                    "arguments": {
                        "from": {
                            "in": "query",
                            "type": "string"
                        }
                    },
                    "help": "Thanks",
                    "http": {
                        "contentType": "application/json",
                        "method": "get",
                        "path": "/thanks",
                        "port": 5000
                    },
                    "output": {
                        "type": "string"
                    }
                },
                "that": {
                    "arguments": {
                        "from": {
                            "in": "query",
                            "type": "string"
                        }
                    },
                    "help": "Fuck That",
                    "http": {
                        "contentType": "application/json",
                        "method": "get",
                        "path": "/that",
                        "port": 5000
                    },
                    "output": {
                        "type": "string"
                    }
                },
                "think": {
                    "arguments": {
                        "from": {
                            "in": "query",
                            "type": "string"
                        },
                        "name": {
                            "in": "query",
                            "type": "string"
                        }
                    },
                    "help": "You Think",
                    "http": {
                        "contentType": "application/json",
                        "method": "get",
                        "path": "/think",
                        "port": 5000
                    },
                    "output": {
                        "type": "string"
                    }
                },
                "thinking": {
                    "arguments": {
                        "from": {
                            "in": "query",
                            "type": "string"
                        },
                        "name": {
                            "in": "query",
                            "type": "string"
                        }
                    },
                    "help": "Thinking",
                    "http": {
                        "contentType": "application/json",
                        "method": "get",
                        "path": "/thinking",
                        "port": 5000
                    },
                    "output": {
                        "type": "string"
                    }
                },
                "this": {
                    "arguments": {
                        "from": {
                            "in": "query",
                            "type": "string"
                        }
                    },
                    "help": "Fuck This",
                    "http": {
                        "contentType": "application/json",
                        "method": "get",
                        "path": "/this",
                        "port": 5000
                    },
                    "output": {
                        "type": "string"
                    }
                },
                "thumbs": {
                    "arguments": {
                        "from": {
                            "in": "query",
                            "type": "string"
                        },
                        "name": {
                            "in": "query",
                            "type": "string"
                        }
                    },
                    "help": "This Guy",
                    "http": {
                        "contentType": "application/json",
                        "method": "get",
                        "path": "/thumbs",
                        "port": 5000
                    },
                    "output": {
                        "type": "string"
                    }
                },
                "too": {
                    "arguments": {
                        "from": {
                            "in": "query",
                            "type": "string"
                        }
                    },
                    "help": "Too",
                    "http": {
                        "contentType": "application/json",
                        "method": "get",
                        "path": "/too",
                        "port": 5000
                    },
                    "output": {
                        "type": "string"
                    }
                },
                "tucker": {
                    "arguments": {
                        "from": {
                            "in": "query",
                            "type": "string"
                        }
                    },
                    "help": "Tucker",
                    "http": {
                        "contentType": "application/json",
                        "method": "get",
                        "path": "/tucker",
                        "port": 5000
                    },
                    "output": {
                        "type": "string"
                    }
                },
                "waste": {
                    "arguments": {
                        "from": {
                            "in": "query",
                            "type": "string"
                        },
                        "name": {
                            "in": "query",
                            "type": "string"
                        }
                    },
                    "help": "Waste",
                    "http": {
                        "contentType": "application/json",
                        "method": "get",
                        "path": "/waste",
                        "port": 5000
                    },
                    "output": {
                        "type": "string"
                    }
                },
                "what": {
                    "arguments": {
                        "from": {
                            "in": "query",
                            "type": "string"
                        }
                    },
                    "help": "What",
                    "http": {
                        "contentType": "application/json",
                        "method": "get",
                        "path": "/what",
                        "port": 5000
                    },
                    "output": {
                        "type": "string"
                    }
                },
                "xmas": {
                    "arguments": {
                        "from": {
                            "in": "query",
                            "type": "string"
                        },
                        "name": {
                            "in": "query",
                            "type": "string"
                        }
                    },
                    "help": "Xmas",
                    "http": {
                        "contentType": "application/json",
                        "method": "get",
                        "path": "/xmas",
                        "port": 5000
                    },
                    "output": {
                        "type": "string"
                    }
                },
                "yoda": {
                    "arguments": {
                        "from": {
                            "in": "query",
                            "type": "string"
                        },
                        "name": {
                            "in": "query",
                            "type": "string"
                        }
                    },
                    "help": "Yoda",
                    "http": {
                        "contentType": "application/json",
                        "method": "get",
                        "path": "/yoda",
                        "port": 5000
                    },
                    "output": {
                        "type": "string"
                    }
                },
                "you": {
                    "arguments": {
                        "from": {
                            "in": "query",
                            "type": "string"
                        },
                        "name": {
                            "in": "query",
                            "type": "string"
                        }
                    },
                    "help": "Fuck You",
                    "http": {
                        "contentType": "application/json",
                        "method": "get",
                        "path": "/you",
                        "port": 5000
                    },
                    "output": {
                        "type": "string"
                    }
                },
                "zayn": {
                    "arguments": {
                        "from": {
                            "in": "query",
                            "type": "string"
                        }
                    },
                    "help": "Zayn",
                    "http": {
                        "contentType": "application/json",
                        "method": "get",
                        "path": "/zayn",
                        "port": 5000
                    },
                    "output": {
                        "type": "string"
                    }
                },
                "zero": {
                    "arguments": {
                        "from": {
                            "in": "query",
                            "type": "string"
                        }
                    },
                    "help": "Zero",
                    "http": {
                        "contentType": "application/json",
                        "method": "get",
                        "path": "/zero",
                        "port": 5000
                    },
                    "output": {
                        "type": "string"
                    }
                }
            },
            "health": {
                "http": {
                    "path": "/health",
                    "port": 5000
                }
            },
            "info": {
                "contact": {
                    "email": "aurelien@storyscript.io",
                    "name": "Aurelien ARINO",
                    "url": "https://storyscript.io"
                },
                "description": "FOAAS as a OMG microservice",
                "license": {
                    "name": "MIT",
                    "url": "https://opensource.org/licenses/MIT"
                },
                "title": "FOAAS",
                "version": "1.0.0"
            },
            "lifecycle": {
                "startup": {
                    "command": [
                        "node",
                        "app.js"
                    ]
                }
            },
            "omg": 1
        },
        "readme": "# FOAAS as a OMG microservice\n\n## Start service\n\n```bash\n$> node app.js\n```\n\n## Generate microservice.yml\n\n```bash\n$> node generate.js\n```\n",
        "service": {
            "alias": null,
            "description": null,
            "isCertified": false,
            "name": "foaas",
            "owner": {
                "username": "Arinono"
            },
            "public": true,
            "topics": [
                "foaas"
            ]
        },
        "serviceUuid": "66c1ce9b-50f4-45ae-a054-d43393eb24a0",
        "state": "BETA"
    },
    {
        "configuration": {
            "actions": {
                "parse": {
                    "arguments": {
                        "url": {
                            "help": "A url to parse.",
                            "in": "requestBody",
                            "required": true,
                            "type": "string"
                        }
                    },
                    "help": "Parse URL using WHATWG URL Standard.",
                    "http": {
                        "method": "post",
                        "path": "/parse",
                        "port": 8080
                    },
                    "output": {
                        "contentType": "application/json",
                        "help": "Returns the parsed URL parts.",
                        "type": "map"
                    }
                }
            },
            "health": {
                "http": {
                    "path": "/health",
                    "port": 8080
                }
            },
            "info": {
                "description": "Parse URL using WHATWG URL Standard.",
                "license": {
                    "name": "MIT",
                    "url": "https://opensource.org/licenses/MIT"
                },
                "title": "oms-parse-url",
                "version": "1.0.0"
            },
            "lifecycle": {
                "startup": {
                    "command": [
                        "node",
                        "/app/src/index.js"
                    ]
                }
            },
            "omg": 1
        },
        "readme": "# Microservice template for NodeJS\n\n![Microservice](https://img.shields.io/badge/microservice-ready-brightgreen.svg?style=for-the-badge)\n[![Build status](https://img.shields.io/travis/com/microservices/node/master.svg?style=for-the-badge)](https://travis-ci.com/microservices/node)\n\nAn OMS template for NodeJS + ExpressJS.\n\n## Setup\n\nLatest LTS version of Node.js 10.\n[See Releases](https://nodejs.org/en/about/releases/).\n\n```sh\nyarn\n```\n\nFirst, install the [Commitizen cli](https://github.com/commitizen/cz-cli) tools:\n\n```shell\nnpm install commitizen -g\n```\n\nNext, initialize your project to use the `cz-conventional-changelog` adapter by\ntyping\n\n```sh\ncommitizen init cz-conventional-changelog --yarn --dev --exact\n```\n\nUse the following to replace `git commit`:\n\n```sh\nyarn run commit\n```\n\n## Test\n\n## OMS Test Runner\n\n```sh\n> omg run message -a name=Service\n\u2139 Building Docker image\n\u2026\n\u2714 Built Docker image with name: omg/l2hvbwuvc2vil2fzew5jes9ydwj5\n\u2714 Started Docker container: 1c8a91688261\n\u2714 Health check passed\n\u2714 Ran action: `message` with output: {\"message\":\"Hello Service\"}\n\u2714 Stopped Docker container: 1c8a91688261\n```\n",
        "service": {
            "alias": null,
            "description": "Open Microservice that parses a URL.",
            "isCertified": false,
            "name": "oms-parse-url",
            "owner": {
                "username": "matthewhudson"
            },
            "public": true,
            "topics": [
                "url"
            ]
        },
        "serviceUuid": "9e3e1f84-2d70-4b29-b791-d031732d06f5",
        "state": "BETA"
    },
    {
        "configuration": {
            "actions": {
                "bot": {
                    "events": {
                        "hears": {
                            "arguments": {
                                "channel": {
                                    "help": "Only listen in a specific channel",
                                    "in": "requestBody",
                                    "required": true,
                                    "type": "string"
                                },
                                "pattern": {
                                    "help": "A regexp pattern to filter messages",
                                    "in": "requestBody",
                                    "type": "string"
                                }
                            },
                            "help": "Triggered anytime a messages matches the pattern",
                            "http": {
                                "port": 8000,
                                "subscribe": {
                                    "contentType": "application/json",
                                    "method": "post",
                                    "path": "/subscribe"
                                },
                                "unsubscribe": {
                                    "contentType": "application/json",
                                    "method": "post",
                                    "path": "/unsubscribe"
                                }
                            },
                            "output": {
                                "contentType": "application/json",
                                "properties": {
                                    "channel": {
                                        "help": "The channel ID",
                                        "type": "string"
                                    },
                                    "client_msg_id": {
                                        "help": "The message ID",
                                        "type": "string"
                                    },
                                    "text": {
                                        "help": "The message text",
                                        "type": "string"
                                    },
                                    "ts": {
                                        "help": "The message timestamp (eg- \"1535474523.000100\")",
                                        "type": "string"
                                    },
                                    "user": {
                                        "help": "The user ID",
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            }
                        },
                        "responds": {
                            "arguments": {
                                "pattern": {
                                    "help": "A regexp pattern to filter messages",
                                    "in": "requestBody",
                                    "type": "string"
                                }
                            },
                            "help": "Triggered by direct messages to the bot",
                            "http": {
                                "port": 8000,
                                "subscribe": {
                                    "contentType": "application/json",
                                    "method": "post",
                                    "path": "/subscribe"
                                },
                                "unsubscribe": {
                                    "contentType": "application/json",
                                    "method": "post",
                                    "path": "/unsubscribe"
                                }
                            },
                            "output": {
                                "contentType": "application/json",
                                "properties": {
                                    "channel": {
                                        "help": "The channel ID",
                                        "type": "string"
                                    },
                                    "client_msg_id": {
                                        "help": "The message ID",
                                        "type": "string"
                                    },
                                    "text": {
                                        "help": "The message text",
                                        "type": "string"
                                    },
                                    "ts": {
                                        "help": "The message timestamp (eg- \"1535474523.000100\")",
                                        "type": "string"
                                    },
                                    "user": {
                                        "help": "The user ID",
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    },
                    "help": "Start a Slack bot"
                },
                "channels": {
                    "arguments": {
                        "exclude_archived": {
                            "default": false,
                            "help": "Set to true to exclude archived channels from the list",
                            "in": "requestBody",
                            "type": "boolean"
                        },
                        "limit": {
                            "default": 100,
                            "help": "Limit the number of channels to return. Must be less than 1000.",
                            "in": "requestBody",
                            "type": "int"
                        },
                        "token": {
                            "help": "Authentication token bearing required scopes.\nEnvironment variable BOT_TOKEN used by default.\n",
                            "in": "requestBody",
                            "type": "string"
                        },
                        "types": {
                            "help": "Mix and match channel types: public_channel, private_channel, mpim, im\nDefault is public_channel only.\n",
                            "in": "requestBody",
                            "type": "list"
                        }
                    },
                    "help": "Get a list of channels",
                    "http": {
                        "contentType": "application/json",
                        "method": "post",
                        "path": "/api/channels.list",
                        "port": 8000
                    },
                    "output": {
                        "contentType": "application/json",
                        "type": "map"
                    }
                },
                "directChannels": {
                    "arguments": {
                        "limit": {
                            "default": 100,
                            "help": "Limit the number of channels to return. Must be less than 1000.",
                            "in": "requestBody",
                            "type": "int"
                        },
                        "token": {
                            "help": "Authentication token bearing required scopes.\nEnvironment variable BOT_TOKEN used by default.\n",
                            "in": "requestBody",
                            "type": "string"
                        }
                    },
                    "help": "Lists direct message channels for the calling user.",
                    "http": {
                        "contentType": "application/json",
                        "method": "post",
                        "path": "/api/im.list",
                        "port": 8000
                    },
                    "output": {
                        "contentType": "application/json",
                        "type": "map"
                    }
                },
                "send": {
                    "arguments": {
                        "attachments": {
                            "in": "requestBody",
                            "type": "list"
                        },
                        "channel": {
                            "help": "What channel to send message in.\nThis can be a \"#channel\" \"@user\" or a channel id.\n",
                            "in": "requestBody",
                            "required": true,
                            "type": "string"
                        },
                        "text": {
                            "help": "Text of the message to send.",
                            "in": "requestBody",
                            "required": true,
                            "type": "string"
                        },
                        "token": {
                            "help": "Authentication token bearing required scopes.\nEnvironment variable BOT_TOKEN used by default.\n",
                            "in": "requestBody",
                            "type": "string"
                        }
                    },
                    "help": "Sends a message to a channel.\nhttps://api.slack.com/methods/chat.postMessage\n",
                    "http": {
                        "contentType": "application/json",
                        "method": "post",
                        "path": "/api/chat.postMessage",
                        "port": 8000
                    },
                    "output": {
                        "contentType": "application/json",
                        "type": "map"
                    }
                },
                "users": {
                    "arguments": {
                        "cursor": {
                            "help": "Paginate through collections of data by setting the cursor parameter to a next_cursor attribute returned by a previous request's response_metadata. Default value fetches the first \"page\" of the collection. See pagination for more detail.\n",
                            "in": "requestBody",
                            "type": "string"
                        },
                        "include_locale": {
                            "help": "Set this to true to receive the locale for users. Defaults to false\n",
                            "in": "requestBody",
                            "type": "boolean"
                        },
                        "limit": {
                            "default": 0,
                            "help": "The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the users list hasn't been reached.\n",
                            "in": "requestBody",
                            "range": {
                                "min": 0
                            },
                            "type": "int"
                        },
                        "token": {
                            "help": "Authentication token bearing required scopes.\nEnvironment variable BOT_TOKEN used by default.\n",
                            "in": "requestBody",
                            "type": "string"
                        }
                    },
                    "http": {
                        "contentType": "application/json",
                        "method": "post",
                        "path": "/api/users.list",
                        "port": 8000
                    },
                    "output": {
                        "contentType": "application/json",
                        "type": "map"
                    }
                }
            },
            "environment": {
                "BOT_TOKEN": {
                    "help": "The Slack bot token",
                    "type": "string"
                }
            },
            "info": {
                "description": "This is a microservice for Slack",
                "title": "Slack Microservice",
                "version": "0.2.0"
            },
            "lifecycle": {
                "startup": {
                    "command": [
                        "python",
                        "app/main.py"
                    ]
                }
            },
            "omg": 1
        },
        "readme": "# Slack as a microservice\n\n[![Open Microservice Guide](https://img.shields.io/badge/OMG-enabled-brightgreen.svg?style=for-the-badge)](https://microservice.guide)\n\nThis microservice's goal is to fully utilise the Slack API.\n\n## [OMG](hhttps://microservice.guide) CLI\n\n### Slack Bot\n```sh\nomg exec -e TOKEN=<secret> -c bot\n```\n\nSubscribe to an event.\n```sh\nomg subscribe bot hears -a \"pattern=/^hello/\"\n```\n\n\n## [Asyncy](https://asyncy.com) Example\n\nThe `slack` service is published in the [Asyncy Hub](https://hub.asyncy.com/service/slack)\n\n```storyscript\nslack bot as client\n    when client hears channel:'general' pattern:/^welcome/ as msg\n        msg emoji key:'thumbs_up'\n        msg reply message:'Nice to have you here'\n\n    when client responds pattern:/foo/ as msg\n        # respond to direct messages\n        msg reply message:'bar'\n\n    when client slash pattern:/deploy/ as msg\n        # when user does /deploy do something awesome\n\n# send a post\nslack send text:'Hello world!' to:'general'\n```\n",
        "service": {
            "alias": null,
            "description": "Slack bot microservice",
            "isCertified": false,
            "name": "uslack",
            "owner": {
                "username": "darkLord19"
            },
            "public": true,
            "topics": [
                "uslack"
            ]
        },
        "serviceUuid": "18000b74-fb33-4414-a7f0-1078c03840e9",
        "state": "BETA"
    },
    {
        "configuration": {
            "actions": {
                "lookup": {
                    "arguments": {
                        "domain": {
                            "help": "Example: example.com (http:// and https:// are automatically stripped off)",
                            "type": "string"
                        }
                    },
                    "help": "Run whois"
                }
            },
            "omg": 1
        },
        "readme": "# whois for Asyncy\n\nThis container should be used for whois.\nThe output is raw text output from whois.\n\n#### Example\n\n```storyscript\n# Storyscript\ngoogle = whois google.com\n```\n",
        "service": {
            "alias": "whois",
            "description": "Whois agent for Asyncy",
            "isCertified": false,
            "name": "whois",
            "owner": {
                "username": "oms-services"
            },
            "public": true,
            "topics": [
                "whois-lookup",
                "whois",
                "open-microservice",
                "oms"
            ]
        },
        "serviceUuid": "3aaf3b95-bb67-4105-9c1c-f0ba6dda6186",
        "state": "BETA"
    },
    {
        "configuration": {
            "actions": {
                "lookup": {
                    "arguments": {
                        "domain": {
                            "help": "Example: example.com (http:// and https:// are automatically stripped off)",
                            "type": "string"
                        }
                    },
                    "help": "Run whois"
                }
            },
            "omg": 1
        },
        "readme": "# whois for Asyncy\n\nThis container should be used for whois.\nThe output is raw text output from whois.\n\n#### Example\n\n```storyscript\n# Storyscript\ngoogle = whois google.com\n```\n",
        "service": {
            "alias": "whois",
            "description": "Whois agent for Asyncy",
            "isCertified": false,
            "name": "whois",
            "owner": {
                "username": "oms-services"
            },
            "public": true,
            "topics": [
                "whois-lookup",
                "whois",
                "open-microservice",
                "oms"
            ]
        },
        "serviceUuid": "3aaf3b95-bb67-4105-9c1c-f0ba6dda6186",
        "state": "BETA"
    },
    {
        "configuration": {
            "actions": {
                "message": {
                    "http": {
                        "method": "post",
                        "path": "/message",
                        "port": 80
                    },
                    "output": {
                        "type": "string"
                    }
                }
            },
            "health": {
                "http": {
                    "path": "/health",
                    "port": 80
                }
            },
            "info": {
                "description": "Describe your microservice",
                "license": {
                    "name": "Apache 2.0",
                    "url": "https://opensource.org/licenses/Apache-2.0"
                },
                "title": "Your microservice",
                "version": "2.0.3"
            },
            "lifecycle": {
                "startup": {
                    "command": []
                }
            },
            "omg": 1
        },
        "readme": "# Microservice template for PHP\n\n![Microservice](https://img.shields.io/badge/microservice-ready-brightgreen.svg?style=for-the-badge)\n[![Build status](https://img.shields.io/travis/com/microservices/php/master.svg?style=for-the-badge)](https://travis-ci.com/microservices/php)\n\nAn OMG template for PHP.\n\nUsage\n-----\n\n```coffee\n# Storyscript\nyour_service message name: 'Peter'\n# {\"message\": \"Hello Peter\"}\n```\n\nTest\n----\n\n```sh\n> omg run message -a name=Service\n\u2139 Building Docker image\n\u2026\n\u2714 Built Docker image with name: omg/l2hvbwuvc2vil2fzew5jes9ydwj5\n\u2714 Started Docker container: 1c8a91688261\n\u2714 Health check passed\n\u2714 Ran action: `message` with output: {\"message\":\"Hello Service\"}\n\u2714 Stopped Docker container: 1c8a91688261\n```\n",
        "service": {
            "alias": null,
            "description": "Hello PHP",
            "isCertified": false,
            "name": "hellophp",
            "owner": {
                "username": "nickfox-leon"
            },
            "public": true,
            "topics": [
                "php"
            ]
        },
        "serviceUuid": "52c71a9d-d0b9-4799-81ac-54ebe8ddabca",
        "state": "BETA"
    },
    {
        "configuration": {
            "actions": {
                "digest": {
                    "arguments": {
                        "data": {
                            "in": "requestBody",
                            "required": true,
                            "type": "string"
                        },
                        "method": {
                            "in": "requestBody",
                            "required": true,
                            "type": "string"
                        }
                    },
                    "http": {
                        "method": "post",
                        "path": "/digest",
                        "port": 8080
                    },
                    "output": {
                        "contentType": "application/json",
                        "properties": {
                            "digest": {
                                "type": "string"
                            },
                            "method": {
                                "type": "string"
                            }
                        },
                        "type": "object"
                    }
                },
                "hmac": {
                    "arguments": {
                        "data": {
                            "in": "requestBody",
                            "required": true,
                            "type": "string"
                        },
                        "method": {
                            "in": "requestBody",
                            "required": true,
                            "type": "string"
                        },
                        "secret": {
                            "in": "requestBody",
                            "required": true,
                            "type": "string"
                        }
                    },
                    "http": {
                        "method": "post",
                        "path": "/hmac",
                        "port": 8080
                    },
                    "output": {
                        "contentType": "application/json",
                        "properties": {
                            "digest": {
                                "type": "string"
                            },
                            "method": {
                                "type": "string"
                            }
                        },
                        "type": "object"
                    }
                }
            },
            "health": {
                "http": {
                    "path": "/health",
                    "port": 8080
                }
            },
            "info": {
                "contact": {
                    "email": "core@openmicroservices.org",
                    "name": "Open Microservices",
                    "url": "https://openmicroservices.org"
                },
                "description": "Digest and hashing capabilities",
                "license": {
                    "name": "MIT",
                    "url": "https://opensource.org/licenses/MIT"
                },
                "title": "Hashes",
                "version": "0.1.0"
            },
            "lifecycle": {
                "startup": {
                    "command": []
                }
            },
            "oms": 1
        },
        "readme": "# _Hashes_ Open Microservice\n\n> Digest and hashing capabilities\n\n[![Open Microservice Specification Version](https://img.shields.io/badge/Open%20Microservice-1.0-477bf3.svg)](https://openmicroservices.org) [![Open Microservices Spectrum Chat](https://withspectrum.github.io/badge/badge.svg)](https://spectrum.chat/open-microservices) [![Open Microservices Code of Conduct](https://img.shields.io/badge/Contributor%20Covenant-v1.4%20adopted-ff69b4.svg)](https://github.com/oms-services/.github/blob/master/CODE_OF_CONDUCT.md) [![Open Microservices Commitzen](https://img.shields.io/badge/commitizen-friendly-brightgreen.svg)](http://commitizen.github.io/cz-cli/) [![PRs Welcome](https://img.shields.io/badge/PRs-welcome-brightgreen.svg)](http://makeapullrequest.com)\n[![License: MIT](https://img.shields.io/badge/License-MIT-blue.svg)](https://opensource.org/licenses/MIT)\n\n## Introduction\n\nThis project is an example implementation of the [Open Microservice Specification](https://openmicroservices.org), a standard originally created at [Storyscript](https://storyscript.io) for building highly-portable \"microservices\" that expose the events, actions, and APIs inside containerized software.\n\n## Getting Started\n\nThe `oms` command-line interface allows you to interact with Open Microservices. If you're interested in creating an Open Microservice the CLI also helps validate, test, and debug your `oms.yml` implementation!\n\nSee the [oms-cli](https://github.com/microservices/oms) project to learn more!\n\n### Installation\n\n```\nnpm install -g @microservices/oms\n```\n\n## Usage\n\n### Open Microservices CLI Usage\n\nOnce you have the [oms-cli](https://github.com/microservices/oms) installed, you can run any of the following commands from within this project's root directory:\n\n#### Actions\n\n##### digest\n\n>\n\n##### Action Arguments\n\n| Argument Name | Type     | Required | Default | Description              |\n| :------------ | :------- | :------- | :------ | :----------------------- |\n| method        | `string` | `true`   | None    | No description provided. |\n| data          | `string` | `true`   | None    | No description provided. |\n\n```shell\noms run digest \\\n    -a method='*****' \\\n    -a data='*****'\n```\n\n##### hmac\n\n>\n\n##### Action Arguments\n\n| Argument Name | Type     | Required | Default | Description              |\n| :------------ | :------- | :------- | :------ | :----------------------- |\n| method        | `string` | `true`   | None    | No description provided. |\n| data          | `string` | `true`   | None    | No description provided. |\n| secret        | `string` | `true`   | None    | No description provided. |\n\n```shell\noms run hmac \\\n    -a method='*****' \\\n    -a data='*****' \\\n    -a secret='*****'\n```\n\n## Contributing\n\nAll suggestions in how to improve the specification and this guide are very welcome. Feel free share your thoughts in the Issue tracker, or even better, fork the repository to implement your own ideas and submit a pull request.\n\n[![Edit hashes on CodeSandbox](https://codesandbox.io/static/img/play-codesandbox.svg)](https://codesandbox.io/s/github/oms-services/hashes)\n\nThis project is guided by [Contributor Covenant](https://github.com/oms-services/.github/blob/master/CODE_OF_CONDUCT.md). Please read out full [Contribution Guidelines](https://github.com/oms-services/.github/blob/master/CONTRIBUTING.md).\n\n## Additional Resources\n\n- [Install the CLI](https://github.com/microservices/oms) - The OMS CLI helps developers create, test, validate, and build microservices.\n- [Example OMS Services](https://github.com/oms-services) - Examples of OMS-compliant services written in a variety of languages.\n- [Example Language Implementations](https://github.com/microservices) - Find tooling & language implementations in Node, Python, Scala, Java, Clojure.\n- [Storyscript Hub](https://hub.storyscript.io) - A public registry of OMS services.\n- [Community Chat](https://spectrum.chat/open-microservices) - Have ideas? Questions? Join us on Spectrum.\n",
        "service": {
            "alias": null,
            "description": "An OMG service which provides various hashing capabilities",
            "isCertified": false,
            "name": "hashes",
            "owner": {
                "username": "oms-services"
            },
            "public": true,
            "topics": [
                "hashing",
                "microservice",
                "oms",
                "open-microservice"
            ]
        },
        "serviceUuid": "0ceab9e4-b353-467d-8c77-e1538ab80ec1",
        "state": "BETA"
    },
    {
        "configuration": {
            "actions": {
                "publishText": {
                    "arguments": {
                        "content": {
                            "in": "requestBody",
                            "required": true,
                            "type": "string"
                        },
                        "content_type": {
                            "in": "requestBody",
                            "type": "string"
                        },
                        "exchange": {
                            "in": "requestBody",
                            "required": true,
                            "type": "string"
                        },
                        "properties": {
                            "in": "requestBody",
                            "type": "map"
                        }
                    },
                    "http": {
                        "contentType": "application/json",
                        "method": "post",
                        "path": "/publish/text",
                        "port": 8080
                    },
                    "output": {
                        "type": "none"
                    }
                },
                "subscribeText": {
                    "events": {
                        "exchange": {
                            "arguments": {
                                "name": {
                                    "help": "The name of the exchange to subscribe to",
                                    "in": "requestBody",
                                    "required": true,
                                    "type": "string"
                                }
                            },
                            "http": {
                                "port": 8080,
                                "subscribe": {
                                    "contentType": "application/json",
                                    "method": "post",
                                    "path": "/subscribe/exchange/text"
                                }
                            },
                            "output": {
                                "contentType": "application/json",
                                "properties": {
                                    "content_type": {
                                        "type": "string"
                                    },
                                    "properties": {
                                        "type": "map"
                                    },
                                    "text": {
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                }
            },
            "environment": {
                "AMQP_URL": {
                    "help": "The AMQP 1.0 connection URL (eg: amqp://username:password@host:port)",
                    "required": true,
                    "type": "string"
                }
            },
            "info": {
                "contact": {
                    "email": "core@openmicroservices.org",
                    "name": "Open Microservices",
                    "url": "https://openmicroservices.org"
                },
                "description": "This is a amqp1 service",
                "title": "Amqp1",
                "version": "1.0.0"
            },
            "lifecycle": {
                "startup": {
                    "command": [
                        "java",
                        "-Xss256k",
                        "-Xms50m",
                        "-Xmx50m",
                        "-jar",
                        "/app/target/amqp1-1.0-SNAPSHOT.jar"
                    ]
                }
            },
            "oms": 1
        },
        "readme": "# _AMQP1_ OMG Microservice\n\n[![Open Microservice Guide](https://img.shields.io/badge/OMG%20Enabled-\ud83d\udc4d-green.svg?)](https://microservice.guide)\n\nAn OMG service for AMQP are message orientation, queuing, routing (including point-to-point and publish-and-subscribe), reliability and security.\n\n## Direct usage in [Storyscript](https://storyscript.io/):\n\n##### Publish Text\n```coffee\namqp1 publishText exchange:'exchange' content:'content' properties:'{\"map\":\"properties\"}\n```\n\nCurious to [learn more](https://docs.storyscript.io/)?\n\n\u2728\ud83c\udf70\u2728\n\n## Usage with [OMG CLI](https://www.npmjs.com/package/omg)\n\n##### Publish Text\n```shell\n$ omg run publishText -a exchange=<EXCHANGE> -a content=<CONTENT> -a properties=<MAP_OF_PROPERTIES> -e AMQP_URL=<AMQP_URL>\n```\n##### Subscribe Text\n```shell\n$ omg subscribe subscribeText exchange -a name=<EXCHANGE_NAME> -e AMQP_URL=<AMQP_URL>\n```\n\n**Note**: The OMG CLI requires [Docker](https://docs.docker.com/install/) to be installed.\n\n## License\n[MIT License](https://github.com/omg-services/ampq1/blob/master/LICENSE).\n",
        "service": {
            "alias": "amqp1",
            "description": "An OMG service to connect to an AMQP 1.0 server",
            "isCertified": true,
            "name": "amqp1",
            "owner": {
                "username": "oms-services"
            },
            "public": true,
            "topics": [
                "microservice",
                "amqp",
                "amqp10",
                "amqp-client",
                "amqp1-0",
                "amqp-1-0",
                "open-microservice"
            ]
        },
        "serviceUuid": "95434ac6-d094-4aa8-ab20-dd12f53ad9a2",
        "state": "BETA"
    },
    {
        "configuration": {
            "actions": {
                "publishText": {
                    "arguments": {
                        "content": {
                            "in": "requestBody",
                            "required": true,
                            "type": "string"
                        },
                        "content_type": {
                            "in": "requestBody",
                            "type": "string"
                        },
                        "exchange": {
                            "in": "requestBody",
                            "required": true,
                            "type": "string"
                        },
                        "properties": {
                            "in": "requestBody",
                            "type": "map"
                        }
                    },
                    "http": {
                        "contentType": "application/json",
                        "method": "post",
                        "path": "/publish/text",
                        "port": 8080
                    },
                    "output": {
                        "type": "none"
                    }
                },
                "subscribeText": {
                    "events": {
                        "exchange": {
                            "arguments": {
                                "name": {
                                    "help": "The name of the exchange to subscribe to",
                                    "in": "requestBody",
                                    "required": true,
                                    "type": "string"
                                }
                            },
                            "http": {
                                "port": 8080,
                                "subscribe": {
                                    "contentType": "application/json",
                                    "method": "post",
                                    "path": "/subscribe/exchange/text"
                                }
                            },
                            "output": {
                                "contentType": "application/json",
                                "properties": {
                                    "content_type": {
                                        "type": "string"
                                    },
                                    "properties": {
                                        "type": "map"
                                    },
                                    "text": {
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                }
            },
            "environment": {
                "AMQP_URL": {
                    "help": "The AMQP 1.0 connection URL (eg: amqp://username:password@host:port)",
                    "required": true,
                    "type": "string"
                }
            },
            "info": {
                "contact": {
                    "email": "core@openmicroservices.org",
                    "name": "Open Microservices",
                    "url": "https://openmicroservices.org"
                },
                "description": "This is a amqp1 service",
                "title": "Amqp1",
                "version": "1.0.0"
            },
            "lifecycle": {
                "startup": {
                    "command": [
                        "java",
                        "-Xss256k",
                        "-Xms50m",
                        "-Xmx50m",
                        "-jar",
                        "/app/target/amqp1-1.0-SNAPSHOT.jar"
                    ]
                }
            },
            "oms": 1
        },
        "readme": "# _AMQP1_ OMG Microservice\n\n[![Open Microservice Guide](https://img.shields.io/badge/OMG%20Enabled-\ud83d\udc4d-green.svg?)](https://microservice.guide)\n\nAn OMG service for AMQP are message orientation, queuing, routing (including point-to-point and publish-and-subscribe), reliability and security.\n\n## Direct usage in [Storyscript](https://storyscript.io/):\n\n##### Publish Text\n```coffee\namqp1 publishText exchange:'exchange' content:'content' properties:'{\"map\":\"properties\"}\n```\n\nCurious to [learn more](https://docs.storyscript.io/)?\n\n\u2728\ud83c\udf70\u2728\n\n## Usage with [OMG CLI](https://www.npmjs.com/package/omg)\n\n##### Publish Text\n```shell\n$ omg run publishText -a exchange=<EXCHANGE> -a content=<CONTENT> -a properties=<MAP_OF_PROPERTIES> -e AMQP_URL=<AMQP_URL>\n```\n##### Subscribe Text\n```shell\n$ omg subscribe subscribeText exchange -a name=<EXCHANGE_NAME> -e AMQP_URL=<AMQP_URL>\n```\n\n**Note**: The OMG CLI requires [Docker](https://docs.docker.com/install/) to be installed.\n\n## License\n[MIT License](https://github.com/omg-services/ampq1/blob/master/LICENSE).\n",
        "service": {
            "alias": "amqp1",
            "description": "An OMG service to connect to an AMQP 1.0 server",
            "isCertified": true,
            "name": "amqp1",
            "owner": {
                "username": "oms-services"
            },
            "public": true,
            "topics": [
                "microservice",
                "amqp",
                "amqp10",
                "amqp-client",
                "amqp1-0",
                "amqp-1-0",
                "open-microservice"
            ]
        },
        "serviceUuid": "95434ac6-d094-4aa8-ab20-dd12f53ad9a2",
        "state": "BETA"
    },
    {
        "configuration": {
            "actions": {
                "event": {
                    "arguments": {
                        "appVersion": {
                            "help": "The version of your application the user is on.",
                            "in": "requestBody",
                            "type": "string"
                        },
                        "carrier": {
                            "help": "Carrier of the device.",
                            "in": "requestBody",
                            "type": "string"
                        },
                        "city": {
                            "help": "What city the user is in.",
                            "in": "requestBody",
                            "type": "string"
                        },
                        "country": {
                            "help": "The country the user is in.",
                            "in": "requestBody",
                            "type": "string"
                        },
                        "deviceBrand": {
                            "help": "The device brand the user is on.",
                            "in": "requestBody",
                            "type": "string"
                        },
                        "deviceId": {
                            "help": "A device specific identifier, such as the Identifier for Vendor on iOS (required unless user_id is present).",
                            "in": "requestBody",
                            "type": "string"
                        },
                        "deviceManufacturer": {
                            "help": "The device manufacturer the user is on.",
                            "in": "requestBody",
                            "type": "string"
                        },
                        "deviceModel": {
                            "help": "The device model the user is on.",
                            "in": "requestBody",
                            "type": "string"
                        },
                        "dma": {
                            "help": "The Designated Market Area of the user.",
                            "in": "requestBody",
                            "type": "string"
                        },
                        "eventProperties": {
                            "help": "A map of key-value pairs that represent additional data to be sent along with the event(You can store property values in an array, and date values are transformed into string values.)",
                            "in": "requestBody",
                            "type": "map"
                        },
                        "eventType": {
                            "help": "A unique identifier for your event.",
                            "in": "requestBody",
                            "required": true,
                            "type": "string"
                        },
                        "groups": {
                            "help": "This feature is only available to Enterprise customers who have purchased the Accounts add-on.This field adds a map of key-value pairs that represent groups of users to the event as an event-level group.",
                            "in": "requestBody",
                            "type": "map"
                        },
                        "ip": {
                            "help": "IP address of the user. Use \"$remote\" to use your server's IP address. We will then use the collected IP address to reverse lookup a user's location user properties (City, Country, Region, and DMA).",
                            "in": "requestBody",
                            "type": "string"
                        },
                        "language": {
                            "help": "The language the user has set.",
                            "in": "requestBody",
                            "type": "string"
                        },
                        "locationLat": {
                            "help": "Provide domain to check availability.",
                            "in": "requestBody",
                            "type": "float"
                        },
                        "locationLng": {
                            "help": "Provide domain to check availability.",
                            "in": "requestBody",
                            "type": "float"
                        },
                        "osName": {
                            "help": "The mobile operating system or browser the user is on.",
                            "in": "requestBody",
                            "type": "string"
                        },
                        "osVersion": {
                            "help": "The version of the mobile operating system or browser the user is on.",
                            "in": "requestBody",
                            "type": "string"
                        },
                        "platform": {
                            "help": "Platform of the device.",
                            "in": "requestBody",
                            "type": "string"
                        },
                        "price": {
                            "help": "The price of the item purchased. You can use negative values to indicate refunds. (required for revenue data if revenue is not sent)",
                            "in": "requestBody",
                            "type": "float"
                        },
                        "productId": {
                            "help": "An identifier for the product.(You must send a price and quantity with this field.)",
                            "in": "requestBody",
                            "type": "string"
                        },
                        "quantity": {
                            "help": "The quantity of the item purchased.(required for revenue data, defaults to 1 if not specified)",
                            "in": "requestBody",
                            "type": "int"
                        },
                        "region": {
                            "help": "The geographical region the user is in.",
                            "in": "requestBody",
                            "type": "string"
                        },
                        "revenue": {
                            "help": "If you send all three fields of price, quantity, and revenue, then (price * quantity) will take precedence and be the revenue value. You can use negative values to indicate refunds.",
                            "in": "requestBody",
                            "type": "float"
                        },
                        "revenueType": {
                            "help": "Type of revenue.(example \"tax\", \"refund\")",
                            "in": "requestBody",
                            "type": "string"
                        },
                        "userId": {
                            "help": "A readable ID specified by you (example \"abc@example.com\" ) (required unless device_id is present).",
                            "in": "requestBody",
                            "type": "string"
                        },
                        "userProperties": {
                            "help": "A dictionary of key-value pairs that represent additional data tied to the user.Each distinct value will show up as a user segment on the Amplitude dashboard.",
                            "in": "requestBody",
                            "type": "map"
                        }
                    },
                    "help": "Upload the event in amplitude.",
                    "http": {
                        "contentType": "application/json",
                        "method": "post",
                        "path": "/event",
                        "port": 3000
                    },
                    "output": {
                        "contentType": "application/json",
                        "properties": {
                            "message": {
                                "help": "Notification sent message or error message if occurred.",
                                "type": "string"
                            },
                            "statusCode": {
                                "help": "Returns http status code.",
                                "type": "int"
                            },
                            "success": {
                                "help": "Returns true/false.",
                                "type": "string"
                            }
                        },
                        "type": "object"
                    }
                }
            },
            "environment": {
                "API_KEY": {
                    "help": "API Key of GoDaddy",
                    "required": true,
                    "type": "string"
                }
            },
            "info": {
                "contact": {
                    "email": "core@openmicroservices.org",
                    "name": "Open Microservices",
                    "url": "https://openmicroservices.org"
                },
                "description": "This is a amplitude service.",
                "license": {
                    "name": "MIT",
                    "url": "https://opensource.org/licenses/MIT"
                },
                "title": "Amplitude",
                "version": "1.0.0"
            },
            "lifecycle": {
                "startup": {
                    "command": [
                        "amplitude"
                    ]
                }
            },
            "oms": 1
        },
        "readme": "# _Amplitude_ OMG Microservice\n\n[![Open Microservice Guide](https://img.shields.io/badge/OMG%20Enabled-\ud83d\udc4d-green.svg?)](https://microservice.guide)\n[![Build Status](https://travis-ci.com/omg-services/amplitude.svg?branch=master)](https://travis-ci.com/omg-services/amplitude)\n[![codecov](https://codecov.io/gh/omg-services/amplitude/branch/master/graph/badge.svg)](https://codecov.io/gh/omg-services/amplitude)\n\nAn OMG service for amplitude, it is a product analytics service that makes it easier for companies to understand user behavior, ship the right features and improve business outcomes.\n\n## Direct usage in [Storyscript](https://storyscript.io/):\n\n##### Event\n```coffee\namplitude event userId:'abc@example.com' eventType:'event name' eventProperties:'{\"property1\":\"one\",\"property2\":\"two\"}' userProperties:'{\"Cohort\":\"Test A\"}'appVersion:'1.0.0' platform:'ios' osName:'ios' osVersion:'0.13' deviceBrand:'iphone' deviceManufacturer:'Apple' deviceModel:'IPhone X' city:'Pune' country:'India' region:'India' dma:'India' language:'English' price:1590.5 quantity:1 revenue:1590.52 productId:'P123' revenueType:'refund' ip:'127.0.0.1'\n{\"success\": \"true\",\"message\": \"Event uploaded successfully\",\"statusCode\": 200}\n```\n\nCurious to [learn more](https://docs.storyscript.io/)?\n\n\u2728\ud83c\udf70\u2728\n\n## Usage with [OMG CLI](https://www.npmjs.com/package/omg)\n\n##### Event\n```shell\n$ omg run event -a userId=<USER_ID> -a eventType=<EVENT_TYPE> -a eventProperties=<MAP_TYPE_EVENT_PROPERTIES> -a userProperties=<MAP_TYPE_USER_PROPERTIES> -a appVersion=<APP_VERSION> -a platform=<PLATFORM> -a osName=<OS_NAME> -a osVersion=<OS_VERSION> -a deviceBrand=<DEVICE_BRAND> -a deviceManufacturer=<DEVICE_MANUFACTURER> -a deviceModel=<DEVICE_MODEL> -a city=<USER_CITY> -a country=<USER_COUNTRY> -a region=<USER_REGION> -a dma=<DESIGNATED_MARKET_AREA> -a language=<USER_SELECTED_LANGUAGE> -a price=<ITEM_PRICE> -a quantity=<QUANTITY> -a revenue=<REVENUE> -a productId=<PRODUCT_ID> \n-a revenueType=<REVENUE_TYPE> -a ip=<IP_ADDRESS> -e API_KEY=<API_KEY>\n```\n\n**Note**: the OMG CLI requires [Docker](https://docs.docker.com/install/) to be installed.\n\n## License\n[MIT License](https://github.com/omg-services/amplitude/blob/master/LICENSE).\n",
        "service": {
            "alias": null,
            "description": "A microservice for Amplitude",
            "isCertified": false,
            "name": "amplitude",
            "owner": {
                "username": "rohit121"
            },
            "public": true,
            "topics": [
                "analytics",
                "marketing"
            ]
        },
        "serviceUuid": "a786b99e-6af8-458b-a41e-a01f260e8826",
        "state": "BETA"
    },
    {
        "configuration": {
            "actions": {
                "schedule": {
                    "events": {
                        "daily": {
                            "arguments": {
                                "hour": {
                                    "in": "requestBody",
                                    "type": "int"
                                }
                            },
                            "http": {
                                "port": 8000,
                                "subscribe": {
                                    "contentType": "application/json",
                                    "method": "post",
                                    "path": "/subscribe/daily"
                                }
                            }
                        }
                    }
                }
            },
            "lifecycle": {
                "startup": {
                    "command": [
                        "python",
                        "/app/app.py"
                    ]
                }
            },
            "omg": 1
        },
        "readme": "# cron\n\nAn empty skel for now.\n",
        "service": {
            "alias": "cron",
            "description": "Cron scheduler that runs Storyscript as a backend.",
            "isCertified": false,
            "name": "cron",
            "owner": {
                "username": "storyscript"
            },
            "public": true,
            "topics": [
                "asyncy-platform",
                "cron",
                "crontab",
                "cronjob-scheduler"
            ]
        },
        "serviceUuid": "6ffcfb64-9e93-455b-a2cb-67b9595df6d3",
        "state": "BETA"
    },
    {
        "configuration": {
            "actions": {
                "schedule": {
                    "events": {
                        "daily": {
                            "arguments": {
                                "hour": {
                                    "in": "requestBody",
                                    "type": "int"
                                }
                            },
                            "http": {
                                "port": 8000,
                                "subscribe": {
                                    "contentType": "application/json",
                                    "method": "post",
                                    "path": "/subscribe/daily"
                                }
                            }
                        }
                    }
                }
            },
            "lifecycle": {
                "startup": {
                    "command": [
                        "python",
                        "/app/app.py"
                    ]
                }
            },
            "omg": 1
        },
        "readme": "# cron\n\nAn empty skel for now.\n",
        "service": {
            "alias": "cron",
            "description": "Cron scheduler that runs Storyscript as a backend.",
            "isCertified": false,
            "name": "cron",
            "owner": {
                "username": "storyscript"
            },
            "public": true,
            "topics": [
                "asyncy-platform",
                "cron",
                "crontab",
                "cronjob-scheduler"
            ]
        },
        "serviceUuid": "6ffcfb64-9e93-455b-a2cb-67b9595df6d3",
        "state": "BETA"
    },
    {
        "configuration": {
            "actions": {
                "boolean": {
                    "help": "Generates a random boolean",
                    "http": {
                        "method": "get",
                        "path": "/boolean",
                        "port": 8080
                    },
                    "output": {
                        "contentType": "application/json",
                        "type": "map"
                    }
                },
                "integer": {
                    "arguments": {
                        "high": {
                            "default": 10,
                            "help": "Highest possible integer value",
                            "in": "query",
                            "required": true,
                            "type": "int"
                        },
                        "low": {
                            "default": 1,
                            "help": "Lowest possible integer value",
                            "in": "query",
                            "required": true,
                            "type": "int"
                        }
                    },
                    "help": "Generates a random integer",
                    "http": {
                        "method": "get",
                        "path": "/integer",
                        "port": 8080
                    },
                    "output": {
                        "contentType": "application/json",
                        "type": "map"
                    }
                },
                "list": {
                    "arguments": {
                        "integerHigh": {
                            "default": 100,
                            "help": "Highest possible integer value in the list (used if type is integer)",
                            "in": "query",
                            "type": "int"
                        },
                        "integerLow": {
                            "default": 1,
                            "help": "Lowest possible integer value in the list (used if type is integer)",
                            "in": "query",
                            "type": "int"
                        },
                        "listLength": {
                            "help": "The length of the list",
                            "in": "query",
                            "required": true,
                            "type": "int"
                        },
                        "stringLength": {
                            "default": 10,
                            "help": "Length of the strings in the list (used if type is string)",
                            "in": "query",
                            "type": "int"
                        },
                        "type": {
                            "enum": [
                                "boolean",
                                "string",
                                "integer"
                            ],
                            "help": "The type of list you want to generate",
                            "in": "query",
                            "required": true,
                            "type": "enum"
                        }
                    },
                    "help": "Generates a random list of given type",
                    "http": {
                        "method": "get",
                        "path": "/list",
                        "port": 8080
                    },
                    "output": {
                        "contentType": "application/json",
                        "type": "map"
                    }
                },
                "string": {
                    "arguments": {
                        "length": {
                            "default": 10,
                            "help": "Length of string",
                            "in": "query",
                            "required": false,
                            "type": "int"
                        }
                    },
                    "help": "Generates a random string",
                    "http": {
                        "method": "get",
                        "path": "/string",
                        "port": 8080
                    },
                    "output": {
                        "contentType": "application/json",
                        "type": "map"
                    }
                }
            },
            "info": {
                "contact": {
                    "email": "core@openmicroservices.org",
                    "name": "Open Microservices",
                    "url": "https://openmicroservices.org"
                },
                "description": "This is a random service",
                "title": "Random",
                "version": "1.0.0"
            },
            "oms": 1
        },
        "readme": "# _Random_ Open Microservice\n\n> This is a random service\n\n[![Open Microservice Specification Version](https://img.shields.io/badge/Open%20Microservice-1.0-477bf3.svg)](https://openmicroservices.org) [![Open Microservices Spectrum Chat](https://withspectrum.github.io/badge/badge.svg)](https://spectrum.chat/open-microservices) [![Open Microservices Code of Conduct](https://img.shields.io/badge/Contributor%20Covenant-v1.4%20adopted-ff69b4.svg)](https://github.com/oms-services/.github/blob/master/CODE_OF_CONDUCT.md) [![Open Microservices Commitzen](https://img.shields.io/badge/commitizen-friendly-brightgreen.svg)](http://commitizen.github.io/cz-cli/) [![PRs Welcome](https://img.shields.io/badge/PRs-welcome-brightgreen.svg)](http://makeapullrequest.com)\n\n## Introduction\n\nThis project is an example implementation of the [Open Microservice Specification](https://openmicroservices.org), a standard originally created at [Storyscript](https://storyscript.io) for building highly-portable \"microservices\" that expose the events, actions, and APIs inside containerized software.\n\n## Getting Started\n\nThe `oms` command-line interface allows you to interact with Open Microservices. If you're interested in creating an Open Microservice the CLI also helps validate, test, and debug your `oms.yml` implementation!\n\nSee the [oms-cli](https://github.com/microservices/oms) project to learn more!\n\n### Installation\n\n```\nnpm install -g @microservices/oms\n```\n\n## Usage\n\n### Open Microservices CLI Usage\n\nOnce you have the [oms-cli](https://github.com/microservices/oms) installed, you can run any of the following commands from within this project's root directory:\n\n#### Actions\n\n##### boolean\n\n> Generates a random boolean\n\n\n\n``` shell\noms run boolean\n```\n\n##### string\n\n> Generates a random string\n##### Action Arguments\n\n| Argument Name | Type | Required | Default | Description |\n|:------------- |:---- |:-------- |:--------|:----------- |\n| length | `int` | `true` | None | Length of string |\n\n\n``` shell\noms run string \\ \n    -a length='*****'\n```\n\n##### integer\n\n> Generates a random integer\n##### Action Arguments\n\n| Argument Name | Type | Required | Default | Description |\n|:------------- |:---- |:-------- |:--------|:----------- |\n| low | `int` | `true` | None | Lowest possible integer value |\n| high | `int` | `true` | None | Highest possible integer value |\n\n\n``` shell\noms run integer \\ \n    -a low='*****' \\ \n    -a high='*****'\n```\n\n##### list\n\n> Generates a random list of given type\n##### Action Arguments\n\n| Argument Name | Type | Required | Default | Description |\n|:------------- |:---- |:-------- |:--------|:----------- |\n| type | `string` | `true` | None | The type of list you want to generate |\n| length | `int` | `true` | None | The length of the list |\n| stringLength | `int` | `false` | None | Length of the strings in the list (used if type is string) |\n| integerLow | `int` | `false` | None | Lowest possible integer value in the list (used if type is integer) |\n| integerHigh | `int` | `false` | None | Highest possible integer value in the list (used if type is integer) |\n\n\n``` shell\noms run list \\ \n    -a type='*****' \\ \n    -a length='*****' \\ \n    -a stringLength='*****' \\ \n    -a integerLow='*****' \\ \n    -a integerHigh='*****'\n```\n\n## Contributing\n\nAll suggestions in how to improve the specification and this guide are very welcome. Feel free share your thoughts in the Issue tracker, or even better, fork the repository to implement your own ideas and submit a pull request.\n\n[![Edit random on CodeSandbox](https://codesandbox.io/static/img/play-codesandbox.svg)](https://codesandbox.io/s/github/oms-services/random)\n\nThis project is guided by [Contributor Covenant](https://github.com/oms-services/.github/blob/master/CODE_OF_CONDUCT.md). Please read out full [Contribution Guidelines](https://github.com/oms-services/.github/blob/master/CONTRIBUTING.md).\n\n## Additional Resources\n\n* [Install the CLI](https://github.com/microservices/oms) - The OMS CLI helps developers create, test, validate, and build microservices.\n* [Example OMS Services](https://github.com/oms-services) - Examples of OMS-compliant services written in a variety of languages.\n* [Example Language Implementations](https://github.com/microservices) - Find tooling & language implementations in Node, Python, Scala, Java, Clojure.\n* [Storyscript Hub](https://hub.storyscript.io) - A public registry of OMS services.\n* [Community Chat](https://spectrum.chat/open-microservices) - Have ideas? Questions? Join us on Spectrum.\n",
        "service": {
            "alias": "random",
            "description": "Generate random strings, numbers, and lists.",
            "isCertified": false,
            "name": "random",
            "owner": {
                "username": "oms-services"
            },
            "public": true,
            "topics": [
                "random",
                "microservice",
                "open-microservice",
                "oms"
            ]
        },
        "serviceUuid": "1295d4b0-c747-49d3-bd0b-0c213bd45b4d",
        "state": "BETA"
    },
    {
        "configuration": {
            "actions": {
                "boolean": {
                    "help": "Generates a random boolean",
                    "http": {
                        "method": "get",
                        "path": "/boolean",
                        "port": 8080
                    },
                    "output": {
                        "contentType": "application/json",
                        "type": "map"
                    }
                },
                "integer": {
                    "arguments": {
                        "high": {
                            "default": 10,
                            "help": "Highest possible integer value",
                            "in": "query",
                            "required": true,
                            "type": "int"
                        },
                        "low": {
                            "default": 1,
                            "help": "Lowest possible integer value",
                            "in": "query",
                            "required": true,
                            "type": "int"
                        }
                    },
                    "help": "Generates a random integer",
                    "http": {
                        "method": "get",
                        "path": "/integer",
                        "port": 8080
                    },
                    "output": {
                        "contentType": "application/json",
                        "type": "map"
                    }
                },
                "list": {
                    "arguments": {
                        "integerHigh": {
                            "default": 100,
                            "help": "Highest possible integer value in the list (used if type is integer)",
                            "in": "query",
                            "type": "int"
                        },
                        "integerLow": {
                            "default": 1,
                            "help": "Lowest possible integer value in the list (used if type is integer)",
                            "in": "query",
                            "type": "int"
                        },
                        "listLength": {
                            "help": "The length of the list",
                            "in": "query",
                            "required": true,
                            "type": "int"
                        },
                        "stringLength": {
                            "default": 10,
                            "help": "Length of the strings in the list (used if type is string)",
                            "in": "query",
                            "type": "int"
                        },
                        "type": {
                            "enum": [
                                "boolean",
                                "string",
                                "integer"
                            ],
                            "help": "The type of list you want to generate",
                            "in": "query",
                            "required": true,
                            "type": "enum"
                        }
                    },
                    "help": "Generates a random list of given type",
                    "http": {
                        "method": "get",
                        "path": "/list",
                        "port": 8080
                    },
                    "output": {
                        "contentType": "application/json",
                        "type": "map"
                    }
                },
                "string": {
                    "arguments": {
                        "length": {
                            "default": 10,
                            "help": "Length of string",
                            "in": "query",
                            "required": false,
                            "type": "int"
                        }
                    },
                    "help": "Generates a random string",
                    "http": {
                        "method": "get",
                        "path": "/string",
                        "port": 8080
                    },
                    "output": {
                        "contentType": "application/json",
                        "type": "map"
                    }
                }
            },
            "info": {
                "contact": {
                    "email": "core@openmicroservices.org",
                    "name": "Open Microservices",
                    "url": "https://openmicroservices.org"
                },
                "description": "This is a random service",
                "title": "Random",
                "version": "1.0.0"
            },
            "oms": 1
        },
        "readme": "# _Random_ Open Microservice\n\n> This is a random service\n\n[![Open Microservice Specification Version](https://img.shields.io/badge/Open%20Microservice-1.0-477bf3.svg)](https://openmicroservices.org) [![Open Microservices Spectrum Chat](https://withspectrum.github.io/badge/badge.svg)](https://spectrum.chat/open-microservices) [![Open Microservices Code of Conduct](https://img.shields.io/badge/Contributor%20Covenant-v1.4%20adopted-ff69b4.svg)](https://github.com/oms-services/.github/blob/master/CODE_OF_CONDUCT.md) [![Open Microservices Commitzen](https://img.shields.io/badge/commitizen-friendly-brightgreen.svg)](http://commitizen.github.io/cz-cli/) [![PRs Welcome](https://img.shields.io/badge/PRs-welcome-brightgreen.svg)](http://makeapullrequest.com)\n\n## Introduction\n\nThis project is an example implementation of the [Open Microservice Specification](https://openmicroservices.org), a standard originally created at [Storyscript](https://storyscript.io) for building highly-portable \"microservices\" that expose the events, actions, and APIs inside containerized software.\n\n## Getting Started\n\nThe `oms` command-line interface allows you to interact with Open Microservices. If you're interested in creating an Open Microservice the CLI also helps validate, test, and debug your `oms.yml` implementation!\n\nSee the [oms-cli](https://github.com/microservices/oms) project to learn more!\n\n### Installation\n\n```\nnpm install -g @microservices/oms\n```\n\n## Usage\n\n### Open Microservices CLI Usage\n\nOnce you have the [oms-cli](https://github.com/microservices/oms) installed, you can run any of the following commands from within this project's root directory:\n\n#### Actions\n\n##### boolean\n\n> Generates a random boolean\n\n\n\n``` shell\noms run boolean\n```\n\n##### string\n\n> Generates a random string\n##### Action Arguments\n\n| Argument Name | Type | Required | Default | Description |\n|:------------- |:---- |:-------- |:--------|:----------- |\n| length | `int` | `true` | None | Length of string |\n\n\n``` shell\noms run string \\ \n    -a length='*****'\n```\n\n##### integer\n\n> Generates a random integer\n##### Action Arguments\n\n| Argument Name | Type | Required | Default | Description |\n|:------------- |:---- |:-------- |:--------|:----------- |\n| low | `int` | `true` | None | Lowest possible integer value |\n| high | `int` | `true` | None | Highest possible integer value |\n\n\n``` shell\noms run integer \\ \n    -a low='*****' \\ \n    -a high='*****'\n```\n\n##### list\n\n> Generates a random list of given type\n##### Action Arguments\n\n| Argument Name | Type | Required | Default | Description |\n|:------------- |:---- |:-------- |:--------|:----------- |\n| type | `string` | `true` | None | The type of list you want to generate |\n| length | `int` | `true` | None | The length of the list |\n| stringLength | `int` | `false` | None | Length of the strings in the list (used if type is string) |\n| integerLow | `int` | `false` | None | Lowest possible integer value in the list (used if type is integer) |\n| integerHigh | `int` | `false` | None | Highest possible integer value in the list (used if type is integer) |\n\n\n``` shell\noms run list \\ \n    -a type='*****' \\ \n    -a length='*****' \\ \n    -a stringLength='*****' \\ \n    -a integerLow='*****' \\ \n    -a integerHigh='*****'\n```\n\n## Contributing\n\nAll suggestions in how to improve the specification and this guide are very welcome. Feel free share your thoughts in the Issue tracker, or even better, fork the repository to implement your own ideas and submit a pull request.\n\n[![Edit random on CodeSandbox](https://codesandbox.io/static/img/play-codesandbox.svg)](https://codesandbox.io/s/github/oms-services/random)\n\nThis project is guided by [Contributor Covenant](https://github.com/oms-services/.github/blob/master/CODE_OF_CONDUCT.md). Please read out full [Contribution Guidelines](https://github.com/oms-services/.github/blob/master/CONTRIBUTING.md).\n\n## Additional Resources\n\n* [Install the CLI](https://github.com/microservices/oms) - The OMS CLI helps developers create, test, validate, and build microservices.\n* [Example OMS Services](https://github.com/oms-services) - Examples of OMS-compliant services written in a variety of languages.\n* [Example Language Implementations](https://github.com/microservices) - Find tooling & language implementations in Node, Python, Scala, Java, Clojure.\n* [Storyscript Hub](https://hub.storyscript.io) - A public registry of OMS services.\n* [Community Chat](https://spectrum.chat/open-microservices) - Have ideas? Questions? Join us on Spectrum.\n",
        "service": {
            "alias": "random",
            "description": "Generate random strings, numbers, and lists.",
            "isCertified": false,
            "name": "random",
            "owner": {
                "username": "oms-services"
            },
            "public": true,
            "topics": [
                "random",
                "microservice",
                "open-microservice",
                "oms"
            ]
        },
        "serviceUuid": "1295d4b0-c747-49d3-bd0b-0c213bd45b4d",
        "state": "BETA"
    },
    {
        "configuration": {
            "actions": {
                "follow": {
                    "arguments": {
                        "follow": {
                            "help": "Enable notifications for the target user.",
                            "in": "requestBody",
                            "type": "boolean"
                        },
                        "handle": {
                            "help": "The screen name of the user to follow.",
                            "in": "requestBody",
                            "type": "string"
                        },
                        "user": {
                            "help": "The ID of the user to follow.",
                            "in": "requestBody",
                            "type": "int"
                        }
                    },
                    "help": "Follow an user",
                    "http": {
                        "method": "post",
                        "path": "/follow",
                        "port": 8000
                    },
                    "output": {
                        "type": "map"
                    }
                },
                "followers": {
                    "arguments": {
                        "count": {
                            "help": "The number of users to return per page, up to a maximum of 200. Defaults to 20.",
                            "in": "requestBody",
                            "range": {
                                "max": 200,
                                "min": 1
                            },
                            "type": "int"
                        },
                        "cursor": {
                            "help": "Causes the results to be broken into pages. If no cursor is provided, a value of -1 will be assumed, which is the first \u201cpage.\u201d",
                            "in": "requestBody",
                            "range": {
                                "min": -1
                            },
                            "type": "int"
                        },
                        "handle": {
                            "help": "The screen name of the user for whom to return results.",
                            "in": "requestBody",
                            "type": "string"
                        },
                        "skip_status": {
                            "help": "When set to either true, statuses will not be included in the returned user objects. If set to any other value, statuses will be included.",
                            "in": "requestBody",
                            "type": "boolean"
                        },
                        "user": {
                            "help": "The ID of the user for whom to return results.",
                            "in": "requestBody",
                            "type": "int"
                        }
                    },
                    "help": "Returns a cursored collection of user objects for users following the specified user.\n\nAt this time, results are ordered with the most recent following first \u2014 however, this ordering is subject to unannounced change and eventual consistency issues. Results are given in groups of 20 users and multiple \u201cpages\u201d of results can be navigated through using the `next_cursor` value in subsequent requests.\n",
                    "http": {
                        "method": "post",
                        "path": "/followers",
                        "port": 8000
                    },
                    "output": {
                        "type": "list"
                    }
                },
                "retweet": {
                    "arguments": {
                        "tweet": {
                            "in": "requestBody",
                            "required": true,
                            "type": "string"
                        }
                    },
                    "help": "Retweet a tweet",
                    "http": {
                        "method": "post",
                        "path": "/retweet",
                        "port": 8000
                    },
                    "output": {
                        "type": "map"
                    }
                },
                "stream": {
                    "events": {
                        "tweet": {
                            "arguments": {
                                "track": {
                                    "help": "A single string or list of phrases to track.\nhttps://developer.twitter.com/en/docs/tweets/filter-realtime/guides/basic-stream-parameters#track\n",
                                    "in": "requestBody",
                                    "type": "any"
                                }
                            },
                            "help": "Stream tweets",
                            "http": {
                                "port": 8000,
                                "subscribe": {
                                    "contentType": "application/json",
                                    "method": "post",
                                    "path": "/stream/subscribe"
                                },
                                "unsubscribe": {
                                    "method": "post",
                                    "path": "/stream/unsubscribe"
                                }
                            },
                            "output": {
                                "type": "map"
                            }
                        }
                    },
                    "help": "Stream tweets"
                },
                "tweet": {
                    "arguments": {
                        "status": {
                            "in": "requestBody",
                            "required": true,
                            "type": "string"
                        }
                    },
                    "help": "Tweet a message",
                    "http": {
                        "method": "post",
                        "path": "/tweet",
                        "port": 8000
                    },
                    "output": {
                        "type": "map"
                    }
                },
                "unfollow": {
                    "arguments": {
                        "handle": {
                            "help": "The screen name of the user to unfollow.",
                            "in": "requestBody",
                            "type": "string"
                        },
                        "user": {
                            "help": "The ID of the user to unfollow.",
                            "in": "requestBody",
                            "type": "int"
                        }
                    },
                    "help": "Unfollow an user",
                    "http": {
                        "method": "post",
                        "path": "/unfollow",
                        "port": 8000
                    },
                    "output": {
                        "type": "map"
                    }
                }
            },
            "environment": {
                "ACCESS_TOKEN": {
                    "required": true,
                    "type": "string"
                },
                "ACCESS_TOKEN_SECRET": {
                    "required": true,
                    "type": "string"
                },
                "CONSUMER_KEY": {
                    "required": true,
                    "type": "string"
                },
                "CONSUMER_SECRET": {
                    "required": true,
                    "type": "string"
                }
            },
            "info": {
                "contact": {
                    "email": "core@openmicroservices.org",
                    "name": "Open Microservices",
                    "url": "https://openmicroservices.org"
                },
                "description": "Twitter as a microservice",
                "license": {
                    "name": "MIT",
                    "url": "https://opensource.org/licenses/MIT"
                },
                "title": "Twitter",
                "version": "1.0.0"
            },
            "lifecycle": {
                "startup": {
                    "command": [
                        "python",
                        "/app/app.py"
                    ]
                }
            },
            "oms": 1
        },
        "readme": "# _Twitter_ Open Microservice\n\n> Twitter as a microservice\n\n[![Open Microservice Specification Version](https://img.shields.io/badge/Open%20Microservice-1.0-477bf3.svg)](https://openmicroservices.org)\n[![Open Microservices Spectrum Chat](https://withspectrum.github.io/badge/badge.svg)](https://spectrum.chat/open-microservices)\n[![Open Microservices Code of Conduct](https://img.shields.io/badge/Contributor%20Covenant-v1.4%20adopted-ff69b4.svg)](https://github.com/oms-services/.github/blob/master/CODE_OF_CONDUCT.md)\n[![Open Microservices Commitzen](https://img.shields.io/badge/commitizen-friendly-brightgreen.svg)](http://commitizen.github.io/cz-cli/)\n[![PRs Welcome](https://img.shields.io/badge/PRs-welcome-brightgreen.svg)](http://makeapullrequest.com)\n[![License: MIT](https://img.shields.io/badge/License-MIT-blue.svg)](https://opensource.org/licenses/MIT)\n\n## Introduction\n\nThis project is an example implementation of the [Open Microservice Specification](https://openmicroservices.org), a standard\noriginally created at [Storyscript](https://storyscript.io) for building highly-portable \"microservices\" that expose the\nevents, actions, and APIs inside containerized software.\n\n## Getting Started\n\nThe `oms` command-line interface allows you to interact with Open Microservices. If you're interested in creating an Open\nMicroservice the CLI also helps validate, test, and debug your `oms.yml` implementation!\n\nSee the [oms-cli](https://github.com/microservices/oms) project to learn more!\n\n### Installation\n\n```\nnpm install -g @microservices/oms\n```\n\n## Usage\n\n### Open Microservices CLI Usage\n\nOnce you have the [oms-cli](https://github.com/microservices/oms) installed, you can run any of the following commands from\nwithin this project's root directory:\n\n#### Actions\n\n##### follow\n\n> Follow an user\n\n##### Action Arguments\n\n| Argument Name       | Type      | Required | Default | Description                               |\n| :------------------ | :-------- | :------- | :------ | :---------------------------------------- |\n| handle              | `string`  | `false`  | None    | The screen name of the user to follow.    |\n| user                | `int`     | `false`  | None    | The ID of the user to follow.             |\n| follow              | `boolean` | `false`  | None    | Enable notifications for the target user. |\n| CONSUMER_KEY        | `string`  | `true`   | None    | No description provided.                  |\n| CONSUMER_SECRET     | `string`  | `true`   | None    | No description provided.                  |\n| ACCESS_TOKEN        | `string`  | `true`   | None    | No description provided.                  |\n| ACCESS_TOKEN_SECRET | `string`  | `true`   | None    | No description provided.                  |\n\n```shell\noms run follow \\\n    -a handle='*****' \\\n    -a user='*****' \\\n    -a follow='*****' \\\n    -e CONSUMER_KEY=$CONSUMER_KEY \\\n    -e CONSUMER_SECRET=$CONSUMER_SECRET \\\n    -e ACCESS_TOKEN=$ACCESS_TOKEN \\\n    -e ACCESS_TOKEN_SECRET=$ACCESS_TOKEN_SECRET\n```\n\n##### unfollow\n\n> Unfollow an user\n\n##### Action Arguments\n\n| Argument Name       | Type     | Required | Default | Description                              |\n| :------------------ | :------- | :------- | :------ | :--------------------------------------- |\n| handle              | `string` | `false`  | None    | The screen name of the user to unfollow. |\n| user                | `int`    | `false`  | None    | The ID of the user to unfollow.          |\n| CONSUMER_KEY        | `string` | `true`   | None    | No description provided.                 |\n| CONSUMER_SECRET     | `string` | `true`   | None    | No description provided.                 |\n| ACCESS_TOKEN        | `string` | `true`   | None    | No description provided.                 |\n| ACCESS_TOKEN_SECRET | `string` | `true`   | None    | No description provided.                 |\n\n```shell\noms run unfollow \\\n    -a handle='*****' \\\n    -a user='*****' \\\n    -e CONSUMER_KEY=$CONSUMER_KEY \\\n    -e CONSUMER_SECRET=$CONSUMER_SECRET \\\n    -e ACCESS_TOKEN=$ACCESS_TOKEN \\\n    -e ACCESS_TOKEN_SECRET=$ACCESS_TOKEN_SECRET\n```\n\n##### followers\n\n> Returns a cursored collection of user objects for users following the specified user.\n\nAt this time, results are ordered with the most recent following first \u2014 however, this ordering is subject to unannounced\nchange and eventual consistency issues. Results are given in groups of 20 users and multiple \u201cpages\u201d of results can be\nnavigated through using the `next_cursor` value in subsequent requests.\n\n##### Action Arguments\n\n| Argument Name       | Type      | Required | Default | Description                                                                                                                                |\n| :------------------ | :-------- | :------- | :------ | :----------------------------------------------------------------------------------------------------------------------------------------- |\n| handle              | `string`  | `false`  | None    | The screen name of the user for whom to return results.                                                                                    |\n| user                | `int`     | `false`  | None    | The ID of the user for whom to return results.                                                                                             |\n| cursor              | `int`     | `false`  | None    | Causes the results to be broken into pages. If no cursor is provided, a value of -1 will be assumed, which is the first \u201cpage.\u201d            |\n| count               | `int`     | `false`  | None    | The number of users to return per page, up to a maximum of 200. Defaults to 20.                                                            |\n| skip_status         | `boolean` | `false`  | None    | When set to either true, statuses will not be included in the returned user objects. If set to any other value, statuses will be included. |\n| CONSUMER_KEY        | `string`  | `true`   | None    | No description provided.                                                                                                                   |\n| CONSUMER_SECRET     | `string`  | `true`   | None    | No description provided.                                                                                                                   |\n| ACCESS_TOKEN        | `string`  | `true`   | None    | No description provided.                                                                                                                   |\n| ACCESS_TOKEN_SECRET | `string`  | `true`   | None    | No description provided.                                                                                                                   |\n\n```shell\noms run followers \\\n    -a handle='*****' \\\n    -a user='*****' \\\n    -a cursor='*****' \\\n    -a count='*****' \\\n    -a skip_status='*****' \\\n    -e CONSUMER_KEY=$CONSUMER_KEY \\\n    -e CONSUMER_SECRET=$CONSUMER_SECRET \\\n    -e ACCESS_TOKEN=$ACCESS_TOKEN \\\n    -e ACCESS_TOKEN_SECRET=$ACCESS_TOKEN_SECRET\n```\n\n##### retweet\n\n> Retweet a tweet\n\n##### Action Arguments\n\n| Argument Name       | Type     | Required | Default | Description              |\n| :------------------ | :------- | :------- | :------ | :----------------------- |\n| tweet               | `string` | `true`   | None    | No description provided. |\n| CONSUMER_KEY        | `string` | `true`   | None    | No description provided. |\n| CONSUMER_SECRET     | `string` | `true`   | None    | No description provided. |\n| ACCESS_TOKEN        | `string` | `true`   | None    | No description provided. |\n| ACCESS_TOKEN_SECRET | `string` | `true`   | None    | No description provided. |\n\n```shell\noms run retweet \\\n    -a tweet='*****' \\\n    -e CONSUMER_KEY=$CONSUMER_KEY \\\n    -e CONSUMER_SECRET=$CONSUMER_SECRET \\\n    -e ACCESS_TOKEN=$ACCESS_TOKEN \\\n    -e ACCESS_TOKEN_SECRET=$ACCESS_TOKEN_SECRET\n```\n\n##### tweet\n\n> Tweet a message\n\n##### Action Arguments\n\n| Argument Name       | Type     | Required | Default | Description              |\n| :------------------ | :------- | :------- | :------ | :----------------------- |\n| status              | `string` | `true`   | None    | No description provided. |\n| CONSUMER_KEY        | `string` | `true`   | None    | No description provided. |\n| CONSUMER_SECRET     | `string` | `true`   | None    | No description provided. |\n| ACCESS_TOKEN        | `string` | `true`   | None    | No description provided. |\n| ACCESS_TOKEN_SECRET | `string` | `true`   | None    | No description provided. |\n\n```shell\noms run tweet \\\n    -a status='*****' \\\n    -e CONSUMER_KEY=$CONSUMER_KEY \\\n    -e CONSUMER_SECRET=$CONSUMER_SECRET \\\n    -e ACCESS_TOKEN=$ACCESS_TOKEN \\\n    -e ACCESS_TOKEN_SECRET=$ACCESS_TOKEN_SECRET\n```\n\n##### tweet\n\n> Stream tweets\n\n##### Action Arguments\n\n| Argument Name       | Type     | Required | Default | Description                                                                                                                                    |\n| :------------------ | :------- | :------- | :------ | :--------------------------------------------------------------------------------------------------------------------------------------------- |\n| track               | `any`    | `false`  | None    | A single string or list of phrases to track. https://developer.twitter.com/en/docs/tweets/filter-realtime/guides/basic-stream-parameters#track |\n| CONSUMER_KEY        | `string` | `true`   | None    | No description provided.                                                                                                                       |\n| CONSUMER_SECRET     | `string` | `true`   | None    | No description provided.                                                                                                                       |\n| ACCESS_TOKEN        | `string` | `true`   | None    | No description provided.                                                                                                                       |\n| ACCESS_TOKEN_SECRET | `string` | `true`   | None    | No description provided.                                                                                                                       |\n\n```shell\noms subscribe tweet \\\n    -a track='*****' \\\n    -e CONSUMER_KEY=$CONSUMER_KEY \\\n    -e CONSUMER_SECRET=$CONSUMER_SECRET \\\n    -e ACCESS_TOKEN=$ACCESS_TOKEN \\\n    -e ACCESS_TOKEN_SECRET=$ACCESS_TOKEN_SECRET\n```\n\n## Contributing\n\nAll suggestions in how to improve the specification and this guide are very welcome. Feel free share your thoughts in the\nIssue tracker, or even better, fork the repository to implement your own ideas and submit a pull request.\n\n[![Edit twitter on CodeSandbox](https://codesandbox.io/static/img/play-codesandbox.svg)](https://codesandbox.io/s/github/oms-services/twitter)\n\nThis project is guided by [Contributor Covenant](https://github.com/oms-services/.github/blob/master/CODE_OF_CONDUCT.md).\nPlease read out full [Contribution Guidelines](https://github.com/oms-services/.github/blob/master/CONTRIBUTING.md).\n\n## Additional Resources\n\n- [Install the CLI](https://github.com/microservices/oms) - The OMS CLI helps developers create, test, validate, and build\n  microservices.\n- [Example OMS Services](https://github.com/oms-services) - Examples of OMS-compliant services written in a variety of\n  languages.\n- [Example Language Implementations](https://github.com/microservices) - Find tooling & language implementations in Node,\n  Python, Scala, Java, Clojure.\n- [Storyscript Hub](https://hub.storyscript.io) - A public registry of OMS services.\n- [Community Chat](https://spectrum.chat/open-microservices) - Have ideas? Questions? Join us on Spectrum.\n",
        "service": {
            "alias": "twitter",
            "description": "Twitter as a microservice",
            "isCertified": false,
            "name": "twitter",
            "owner": {
                "username": "oms-services"
            },
            "public": true,
            "topics": [
                "twitter",
                "microservice",
                "open-microservice",
                "open-microservices",
                "oms"
            ]
        },
        "serviceUuid": "1885036e-b647-49aa-8ce3-45d9a11a7d4d",
        "state": "BETA"
    },
    {
        "configuration": {
            "actions": {
                "follow": {
                    "arguments": {
                        "follow": {
                            "help": "Enable notifications for the target user.",
                            "in": "requestBody",
                            "type": "boolean"
                        },
                        "handle": {
                            "help": "The screen name of the user to follow.",
                            "in": "requestBody",
                            "type": "string"
                        },
                        "user": {
                            "help": "The ID of the user to follow.",
                            "in": "requestBody",
                            "type": "int"
                        }
                    },
                    "help": "Follow an user",
                    "http": {
                        "method": "post",
                        "path": "/follow",
                        "port": 8000
                    },
                    "output": {
                        "type": "map"
                    }
                },
                "followers": {
                    "arguments": {
                        "count": {
                            "help": "The number of users to return per page, up to a maximum of 200. Defaults to 20.",
                            "in": "requestBody",
                            "range": {
                                "max": 200,
                                "min": 1
                            },
                            "type": "int"
                        },
                        "cursor": {
                            "help": "Causes the results to be broken into pages. If no cursor is provided, a value of -1 will be assumed, which is the first \u201cpage.\u201d",
                            "in": "requestBody",
                            "range": {
                                "min": -1
                            },
                            "type": "int"
                        },
                        "handle": {
                            "help": "The screen name of the user for whom to return results.",
                            "in": "requestBody",
                            "type": "string"
                        },
                        "skip_status": {
                            "help": "When set to either true, statuses will not be included in the returned user objects. If set to any other value, statuses will be included.",
                            "in": "requestBody",
                            "type": "boolean"
                        },
                        "user": {
                            "help": "The ID of the user for whom to return results.",
                            "in": "requestBody",
                            "type": "int"
                        }
                    },
                    "help": "Returns a cursored collection of user objects for users following the specified user.\n\nAt this time, results are ordered with the most recent following first \u2014 however, this ordering is subject to unannounced change and eventual consistency issues. Results are given in groups of 20 users and multiple \u201cpages\u201d of results can be navigated through using the `next_cursor` value in subsequent requests.\n",
                    "http": {
                        "method": "post",
                        "path": "/followers",
                        "port": 8000
                    },
                    "output": {
                        "type": "list"
                    }
                },
                "retweet": {
                    "arguments": {
                        "tweet": {
                            "in": "requestBody",
                            "required": true,
                            "type": "string"
                        }
                    },
                    "help": "Retweet a tweet",
                    "http": {
                        "method": "post",
                        "path": "/retweet",
                        "port": 8000
                    },
                    "output": {
                        "type": "map"
                    }
                },
                "stream": {
                    "events": {
                        "tweet": {
                            "arguments": {
                                "track": {
                                    "help": "A single string or list of phrases to track.\nhttps://developer.twitter.com/en/docs/tweets/filter-realtime/guides/basic-stream-parameters#track\n",
                                    "in": "requestBody",
                                    "type": "any"
                                }
                            },
                            "help": "Stream tweets",
                            "http": {
                                "port": 8000,
                                "subscribe": {
                                    "contentType": "application/json",
                                    "method": "post",
                                    "path": "/stream/subscribe"
                                },
                                "unsubscribe": {
                                    "method": "post",
                                    "path": "/stream/unsubscribe"
                                }
                            },
                            "output": {
                                "type": "map"
                            }
                        }
                    },
                    "help": "Stream tweets"
                },
                "tweet": {
                    "arguments": {
                        "status": {
                            "in": "requestBody",
                            "required": true,
                            "type": "string"
                        }
                    },
                    "help": "Tweet a message",
                    "http": {
                        "method": "post",
                        "path": "/tweet",
                        "port": 8000
                    },
                    "output": {
                        "type": "map"
                    }
                },
                "unfollow": {
                    "arguments": {
                        "handle": {
                            "help": "The screen name of the user to unfollow.",
                            "in": "requestBody",
                            "type": "string"
                        },
                        "user": {
                            "help": "The ID of the user to unfollow.",
                            "in": "requestBody",
                            "type": "int"
                        }
                    },
                    "help": "Unfollow an user",
                    "http": {
                        "method": "post",
                        "path": "/unfollow",
                        "port": 8000
                    },
                    "output": {
                        "type": "map"
                    }
                }
            },
            "environment": {
                "ACCESS_TOKEN": {
                    "required": true,
                    "type": "string"
                },
                "ACCESS_TOKEN_SECRET": {
                    "required": true,
                    "type": "string"
                },
                "CONSUMER_KEY": {
                    "required": true,
                    "type": "string"
                },
                "CONSUMER_SECRET": {
                    "required": true,
                    "type": "string"
                }
            },
            "info": {
                "contact": {
                    "email": "core@openmicroservices.org",
                    "name": "Open Microservices",
                    "url": "https://openmicroservices.org"
                },
                "description": "Twitter as a microservice",
                "license": {
                    "name": "MIT",
                    "url": "https://opensource.org/licenses/MIT"
                },
                "title": "Twitter",
                "version": "1.0.0"
            },
            "lifecycle": {
                "startup": {
                    "command": [
                        "python",
                        "/app/app.py"
                    ]
                }
            },
            "oms": 1
        },
        "readme": "# _Twitter_ Open Microservice\n\n> Twitter as a microservice\n\n[![Open Microservice Specification Version](https://img.shields.io/badge/Open%20Microservice-1.0-477bf3.svg)](https://openmicroservices.org)\n[![Open Microservices Spectrum Chat](https://withspectrum.github.io/badge/badge.svg)](https://spectrum.chat/open-microservices)\n[![Open Microservices Code of Conduct](https://img.shields.io/badge/Contributor%20Covenant-v1.4%20adopted-ff69b4.svg)](https://github.com/oms-services/.github/blob/master/CODE_OF_CONDUCT.md)\n[![Open Microservices Commitzen](https://img.shields.io/badge/commitizen-friendly-brightgreen.svg)](http://commitizen.github.io/cz-cli/)\n[![PRs Welcome](https://img.shields.io/badge/PRs-welcome-brightgreen.svg)](http://makeapullrequest.com)\n[![License: MIT](https://img.shields.io/badge/License-MIT-blue.svg)](https://opensource.org/licenses/MIT)\n\n## Introduction\n\nThis project is an example implementation of the [Open Microservice Specification](https://openmicroservices.org), a standard\noriginally created at [Storyscript](https://storyscript.io) for building highly-portable \"microservices\" that expose the\nevents, actions, and APIs inside containerized software.\n\n## Getting Started\n\nThe `oms` command-line interface allows you to interact with Open Microservices. If you're interested in creating an Open\nMicroservice the CLI also helps validate, test, and debug your `oms.yml` implementation!\n\nSee the [oms-cli](https://github.com/microservices/oms) project to learn more!\n\n### Installation\n\n```\nnpm install -g @microservices/oms\n```\n\n## Usage\n\n### Open Microservices CLI Usage\n\nOnce you have the [oms-cli](https://github.com/microservices/oms) installed, you can run any of the following commands from\nwithin this project's root directory:\n\n#### Actions\n\n##### follow\n\n> Follow an user\n\n##### Action Arguments\n\n| Argument Name       | Type      | Required | Default | Description                               |\n| :------------------ | :-------- | :------- | :------ | :---------------------------------------- |\n| handle              | `string`  | `false`  | None    | The screen name of the user to follow.    |\n| user                | `int`     | `false`  | None    | The ID of the user to follow.             |\n| follow              | `boolean` | `false`  | None    | Enable notifications for the target user. |\n| CONSUMER_KEY        | `string`  | `true`   | None    | No description provided.                  |\n| CONSUMER_SECRET     | `string`  | `true`   | None    | No description provided.                  |\n| ACCESS_TOKEN        | `string`  | `true`   | None    | No description provided.                  |\n| ACCESS_TOKEN_SECRET | `string`  | `true`   | None    | No description provided.                  |\n\n```shell\noms run follow \\\n    -a handle='*****' \\\n    -a user='*****' \\\n    -a follow='*****' \\\n    -e CONSUMER_KEY=$CONSUMER_KEY \\\n    -e CONSUMER_SECRET=$CONSUMER_SECRET \\\n    -e ACCESS_TOKEN=$ACCESS_TOKEN \\\n    -e ACCESS_TOKEN_SECRET=$ACCESS_TOKEN_SECRET\n```\n\n##### unfollow\n\n> Unfollow an user\n\n##### Action Arguments\n\n| Argument Name       | Type     | Required | Default | Description                              |\n| :------------------ | :------- | :------- | :------ | :--------------------------------------- |\n| handle              | `string` | `false`  | None    | The screen name of the user to unfollow. |\n| user                | `int`    | `false`  | None    | The ID of the user to unfollow.          |\n| CONSUMER_KEY        | `string` | `true`   | None    | No description provided.                 |\n| CONSUMER_SECRET     | `string` | `true`   | None    | No description provided.                 |\n| ACCESS_TOKEN        | `string` | `true`   | None    | No description provided.                 |\n| ACCESS_TOKEN_SECRET | `string` | `true`   | None    | No description provided.                 |\n\n```shell\noms run unfollow \\\n    -a handle='*****' \\\n    -a user='*****' \\\n    -e CONSUMER_KEY=$CONSUMER_KEY \\\n    -e CONSUMER_SECRET=$CONSUMER_SECRET \\\n    -e ACCESS_TOKEN=$ACCESS_TOKEN \\\n    -e ACCESS_TOKEN_SECRET=$ACCESS_TOKEN_SECRET\n```\n\n##### followers\n\n> Returns a cursored collection of user objects for users following the specified user.\n\nAt this time, results are ordered with the most recent following first \u2014 however, this ordering is subject to unannounced\nchange and eventual consistency issues. Results are given in groups of 20 users and multiple \u201cpages\u201d of results can be\nnavigated through using the `next_cursor` value in subsequent requests.\n\n##### Action Arguments\n\n| Argument Name       | Type      | Required | Default | Description                                                                                                                                |\n| :------------------ | :-------- | :------- | :------ | :----------------------------------------------------------------------------------------------------------------------------------------- |\n| handle              | `string`  | `false`  | None    | The screen name of the user for whom to return results.                                                                                    |\n| user                | `int`     | `false`  | None    | The ID of the user for whom to return results.                                                                                             |\n| cursor              | `int`     | `false`  | None    | Causes the results to be broken into pages. If no cursor is provided, a value of -1 will be assumed, which is the first \u201cpage.\u201d            |\n| count               | `int`     | `false`  | None    | The number of users to return per page, up to a maximum of 200. Defaults to 20.                                                            |\n| skip_status         | `boolean` | `false`  | None    | When set to either true, statuses will not be included in the returned user objects. If set to any other value, statuses will be included. |\n| CONSUMER_KEY        | `string`  | `true`   | None    | No description provided.                                                                                                                   |\n| CONSUMER_SECRET     | `string`  | `true`   | None    | No description provided.                                                                                                                   |\n| ACCESS_TOKEN        | `string`  | `true`   | None    | No description provided.                                                                                                                   |\n| ACCESS_TOKEN_SECRET | `string`  | `true`   | None    | No description provided.                                                                                                                   |\n\n```shell\noms run followers \\\n    -a handle='*****' \\\n    -a user='*****' \\\n    -a cursor='*****' \\\n    -a count='*****' \\\n    -a skip_status='*****' \\\n    -e CONSUMER_KEY=$CONSUMER_KEY \\\n    -e CONSUMER_SECRET=$CONSUMER_SECRET \\\n    -e ACCESS_TOKEN=$ACCESS_TOKEN \\\n    -e ACCESS_TOKEN_SECRET=$ACCESS_TOKEN_SECRET\n```\n\n##### retweet\n\n> Retweet a tweet\n\n##### Action Arguments\n\n| Argument Name       | Type     | Required | Default | Description              |\n| :------------------ | :------- | :------- | :------ | :----------------------- |\n| tweet               | `string` | `true`   | None    | No description provided. |\n| CONSUMER_KEY        | `string` | `true`   | None    | No description provided. |\n| CONSUMER_SECRET     | `string` | `true`   | None    | No description provided. |\n| ACCESS_TOKEN        | `string` | `true`   | None    | No description provided. |\n| ACCESS_TOKEN_SECRET | `string` | `true`   | None    | No description provided. |\n\n```shell\noms run retweet \\\n    -a tweet='*****' \\\n    -e CONSUMER_KEY=$CONSUMER_KEY \\\n    -e CONSUMER_SECRET=$CONSUMER_SECRET \\\n    -e ACCESS_TOKEN=$ACCESS_TOKEN \\\n    -e ACCESS_TOKEN_SECRET=$ACCESS_TOKEN_SECRET\n```\n\n##### tweet\n\n> Tweet a message\n\n##### Action Arguments\n\n| Argument Name       | Type     | Required | Default | Description              |\n| :------------------ | :------- | :------- | :------ | :----------------------- |\n| status              | `string` | `true`   | None    | No description provided. |\n| CONSUMER_KEY        | `string` | `true`   | None    | No description provided. |\n| CONSUMER_SECRET     | `string` | `true`   | None    | No description provided. |\n| ACCESS_TOKEN        | `string` | `true`   | None    | No description provided. |\n| ACCESS_TOKEN_SECRET | `string` | `true`   | None    | No description provided. |\n\n```shell\noms run tweet \\\n    -a status='*****' \\\n    -e CONSUMER_KEY=$CONSUMER_KEY \\\n    -e CONSUMER_SECRET=$CONSUMER_SECRET \\\n    -e ACCESS_TOKEN=$ACCESS_TOKEN \\\n    -e ACCESS_TOKEN_SECRET=$ACCESS_TOKEN_SECRET\n```\n\n##### tweet\n\n> Stream tweets\n\n##### Action Arguments\n\n| Argument Name       | Type     | Required | Default | Description                                                                                                                                    |\n| :------------------ | :------- | :------- | :------ | :--------------------------------------------------------------------------------------------------------------------------------------------- |\n| track               | `any`    | `false`  | None    | A single string or list of phrases to track. https://developer.twitter.com/en/docs/tweets/filter-realtime/guides/basic-stream-parameters#track |\n| CONSUMER_KEY        | `string` | `true`   | None    | No description provided.                                                                                                                       |\n| CONSUMER_SECRET     | `string` | `true`   | None    | No description provided.                                                                                                                       |\n| ACCESS_TOKEN        | `string` | `true`   | None    | No description provided.                                                                                                                       |\n| ACCESS_TOKEN_SECRET | `string` | `true`   | None    | No description provided.                                                                                                                       |\n\n```shell\noms subscribe tweet \\\n    -a track='*****' \\\n    -e CONSUMER_KEY=$CONSUMER_KEY \\\n    -e CONSUMER_SECRET=$CONSUMER_SECRET \\\n    -e ACCESS_TOKEN=$ACCESS_TOKEN \\\n    -e ACCESS_TOKEN_SECRET=$ACCESS_TOKEN_SECRET\n```\n\n## Contributing\n\nAll suggestions in how to improve the specification and this guide are very welcome. Feel free share your thoughts in the\nIssue tracker, or even better, fork the repository to implement your own ideas and submit a pull request.\n\n[![Edit twitter on CodeSandbox](https://codesandbox.io/static/img/play-codesandbox.svg)](https://codesandbox.io/s/github/oms-services/twitter)\n\nThis project is guided by [Contributor Covenant](https://github.com/oms-services/.github/blob/master/CODE_OF_CONDUCT.md).\nPlease read out full [Contribution Guidelines](https://github.com/oms-services/.github/blob/master/CONTRIBUTING.md).\n\n## Additional Resources\n\n- [Install the CLI](https://github.com/microservices/oms) - The OMS CLI helps developers create, test, validate, and build\n  microservices.\n- [Example OMS Services](https://github.com/oms-services) - Examples of OMS-compliant services written in a variety of\n  languages.\n- [Example Language Implementations](https://github.com/microservices) - Find tooling & language implementations in Node,\n  Python, Scala, Java, Clojure.\n- [Storyscript Hub](https://hub.storyscript.io) - A public registry of OMS services.\n- [Community Chat](https://spectrum.chat/open-microservices) - Have ideas? Questions? Join us on Spectrum.\n",
        "service": {
            "alias": "twitter",
            "description": "Twitter as a microservice",
            "isCertified": false,
            "name": "twitter",
            "owner": {
                "username": "oms-services"
            },
            "public": true,
            "topics": [
                "twitter",
                "microservice",
                "open-microservice",
                "open-microservices",
                "oms"
            ]
        },
        "serviceUuid": "1885036e-b647-49aa-8ce3-45d9a11a7d4d",
        "state": "BETA"
    },
    {
        "configuration": {
            "actions": {
                "upload": {
                    "arguments": {
                        "url": {
                            "help": "A target URL to upload to S3.",
                            "in": "requestBody",
                            "required": true,
                            "type": "string"
                        }
                    },
                    "help": "Proxy upload a remote file to S3.",
                    "http": {
                        "method": "post",
                        "path": "/upload",
                        "port": 8080
                    },
                    "output": {
                        "contentType": "application/json",
                        "type": "map"
                    }
                }
            },
            "environment": {
                "AWS_ACCESS_KEY_ID": {
                    "help": "AWS Access Key Id credential w/ S3 permissions.",
                    "required": true,
                    "type": "string"
                },
                "AWS_S3_BUCKET_NAME": {
                    "help": "AWS S3 Bucket name",
                    "required": true,
                    "type": "string"
                },
                "AWS_S3_BUCKET_PREFIX": {
                    "help": "AWS S3 Bucket file prefix",
                    "required": false,
                    "type": "string"
                },
                "AWS_SECRET_ACCESS_KEY": {
                    "help": "AWS Secret Access Key credential w/ S3 permissions.",
                    "required": true,
                    "type": "string"
                }
            },
            "health": {
                "http": {
                    "path": "/health",
                    "port": 8080
                }
            },
            "info": {
                "description": "Proxy upload a remote URL's contents to S3.",
                "license": {
                    "name": "MIT",
                    "url": "https://opensource.org/licenses/MIT"
                },
                "title": "oms-upload-url-to-s3",
                "version": "1.0.0"
            },
            "lifecycle": {
                "startup": {
                    "command": [
                        "node",
                        "/app/src/index.js"
                    ]
                }
            },
            "omg": 1
        },
        "readme": "# Microservice template for NodeJS\n\n![Microservice](https://img.shields.io/badge/microservice-ready-brightgreen.svg?style=for-the-badge)\n[![Build status](https://img.shields.io/travis/com/microservices/node/master.svg?style=for-the-badge)](https://travis-ci.com/microservices/node)\n\nAn OMS template for NodeJS + ExpressJS.\n\n## Setup\n\nLatest LTS version of Node.js 10.\n[See Releases](https://nodejs.org/en/about/releases/).\n\n```sh\nyarn\n```\n\nFirst, install the [Commitizen cli](https://github.com/commitizen/cz-cli) tools:\n\n```shell\nnpm install commitizen -g\n```\n\nNext, initialize your project to use the `cz-conventional-changelog` adapter by\ntyping\n\n```sh\ncommitizen init cz-conventional-changelog --yarn --dev --exact\n```\n\nUse the following to replace `git commit`:\n\n```sh\nyarn run commit\n```\n\n## Test\n\n## OMS Test Runner\n\n```sh\n> omg run message -a name=Service\n\u2139 Building Docker image\n\u2026\n\u2714 Built Docker image with name: omg/l2hvbwuvc2vil2fzew5jes9ydwj5\n\u2714 Started Docker container: 1c8a91688261\n\u2714 Health check passed\n\u2714 Ran action: `message` with output: {\"message\":\"Hello Service\"}\n\u2714 Stopped Docker container: 1c8a91688261\n```\n",
        "service": {
            "alias": null,
            "description": "Open Microservice that uploads a URL to S3.",
            "isCertified": false,
            "name": "oms-upload-url-to-s3",
            "owner": {
                "username": "matthewhudson"
            },
            "public": true,
            "topics": [
                "upload",
                "storage",
                "file"
            ]
        },
        "serviceUuid": "871154d1-5cbb-45c7-8e0b-6e541fbcede7",
        "state": "BETA"
    },
    {
        "configuration": {
            "actions": {
                "get": {
                    "arguments": {
                        "id": {
                            "in": "query",
                            "required": true,
                            "type": "any"
                        }
                    },
                    "http": {
                        "method": "get",
                        "path": "/get",
                        "port": 8000
                    },
                    "output": {
                        "contentType": "application/octet-stream",
                        "type": "any"
                    }
                },
                "put": {
                    "arguments": {
                        "content": {
                            "in": "requestBody",
                            "required": true,
                            "type": "any"
                        },
                        "id": {
                            "in": "query",
                            "required": true,
                            "type": "string"
                        }
                    },
                    "http": {
                        "contentType": "multipart/form-data",
                        "method": "post",
                        "path": "/put",
                        "port": 8000
                    },
                    "output": {
                        "type": "none"
                    }
                }
            },
            "info": {
                "contact": {
                    "email": "infra@storyscript.io",
                    "name": "Storyscript",
                    "url": "https://storyscript.io"
                },
                "description": "This service provides an ephemeral storage service. It's ephemeral in nature, and data will be lost across service restarts.",
                "license": {
                    "name": "Apache 2",
                    "url": "https://opensource.org/licenses/Apache-2.0"
                },
                "title": "Ephemeral, disk based storage provider",
                "version": "1.0.1"
            },
            "lifecycle": {
                "startup": {
                    "command": [
                        "python",
                        "/app/app.py"
                    ]
                }
            },
            "omg": 1,
            "volumes": {
                "persistence": {
                    "persist": true,
                    "target": "/persistence"
                }
            }
        },
        "readme": "# storage\nAn OMG service which provides simple filesystem storage through a volume\n",
        "service": {
            "alias": "storage",
            "description": "An OMG service which provides simple filesystem storage through a volume",
            "isCertified": true,
            "name": "storage",
            "owner": {
                "username": "storyscript"
            },
            "public": true,
            "topics": [
                "microservice",
                "omg",
                "storage"
            ]
        },
        "serviceUuid": "8d2b0602-9bb4-4619-b4b4-9e47950f3d75",
        "state": "BETA"
    },
    {
        "configuration": {
            "actions": {
                "get": {
                    "arguments": {
                        "id": {
                            "in": "query",
                            "required": true,
                            "type": "any"
                        }
                    },
                    "http": {
                        "method": "get",
                        "path": "/get",
                        "port": 8000
                    },
                    "output": {
                        "contentType": "application/octet-stream",
                        "type": "any"
                    }
                },
                "put": {
                    "arguments": {
                        "content": {
                            "in": "requestBody",
                            "required": true,
                            "type": "any"
                        },
                        "id": {
                            "in": "query",
                            "required": true,
                            "type": "string"
                        }
                    },
                    "http": {
                        "contentType": "multipart/form-data",
                        "method": "post",
                        "path": "/put",
                        "port": 8000
                    },
                    "output": {
                        "type": "none"
                    }
                }
            },
            "info": {
                "contact": {
                    "email": "infra@storyscript.io",
                    "name": "Storyscript",
                    "url": "https://storyscript.io"
                },
                "description": "This service provides an ephemeral storage service. It's ephemeral in nature, and data will be lost across service restarts.",
                "license": {
                    "name": "Apache 2",
                    "url": "https://opensource.org/licenses/Apache-2.0"
                },
                "title": "Ephemeral, disk based storage provider",
                "version": "1.0.1"
            },
            "lifecycle": {
                "startup": {
                    "command": [
                        "python",
                        "/app/app.py"
                    ]
                }
            },
            "omg": 1,
            "volumes": {
                "persistence": {
                    "persist": true,
                    "target": "/persistence"
                }
            }
        },
        "readme": "# storage\nAn OMG service which provides simple filesystem storage through a volume\n",
        "service": {
            "alias": "storage",
            "description": "An OMG service which provides simple filesystem storage through a volume",
            "isCertified": true,
            "name": "storage",
            "owner": {
                "username": "storyscript"
            },
            "public": true,
            "topics": [
                "microservice",
                "omg",
                "storage"
            ]
        },
        "serviceUuid": "8d2b0602-9bb4-4619-b4b4-9e47950f3d75",
        "state": "BETA"
    },
    {
        "configuration": {
            "actions": {
                "sendSms": {
                    "arguments": {
                        "from": {
                            "in": "requestBody",
                            "required": true,
                            "type": "string"
                        },
                        "text": {
                            "in": "requestBody",
                            "required": true,
                            "type": "string"
                        },
                        "to": {
                            "in": "requestBody",
                            "required": true,
                            "type": "string"
                        }
                    },
                    "help": "Sends an SMS",
                    "http": {
                        "method": "post",
                        "path": "/sendSms",
                        "port": 3000
                    },
                    "output": {
                        "type": "string"
                    }
                }
            },
            "environment": {
                "API_KEY": {
                    "required": true,
                    "type": "string"
                },
                "API_SECRET": {
                    "required": true,
                    "type": "string"
                }
            },
            "info": {
                "description": "Use Nexmo service",
                "title": "Nexmo service",
                "version": "1.0.0"
            },
            "lifecycle": {
                "startup": {
                    "command": [
                        "yarn",
                        "start"
                    ]
                }
            },
            "omg": 1
        },
        "readme": "",
        "service": {
            "alias": null,
            "description": null,
            "isCertified": false,
            "name": "nexmo",
            "owner": {
                "username": "dariocravero"
            },
            "public": true,
            "topics": []
        },
        "serviceUuid": "5def717e-fab3-4dc5-a950-f9a3c9863bcf",
        "state": "BETA"
    },
    {
        "configuration": {
            "actions": {
                "createContact": {
                    "arguments": {
                        "email": {
                            "in": "requestBody",
                            "required": false,
                            "type": "string"
                        },
                        "mobile": {
                            "in": "requestBody",
                            "required": false,
                            "type": "int"
                        },
                        "name": {
                            "in": "requestBody",
                            "required": true,
                            "type": "string"
                        },
                        "phone": {
                            "in": "requestBody",
                            "required": false,
                            "type": "string"
                        },
                        "twitterId": {
                            "in": "requestBody",
                            "required": false,
                            "type": "string"
                        },
                        "uniqueExternalId": {
                            "in": "requestBody",
                            "required": false,
                            "type": "list"
                        }
                    },
                    "help": "Create new contact",
                    "http": {
                        "contentType": "application/json",
                        "method": "post",
                        "path": "/contact/create",
                        "port": 8000
                    },
                    "output": {
                        "contentType": "application/json",
                        "type": "map"
                    }
                },
                "createTicket": {
                    "arguments": {
                        "ccEmails": {
                            "in": "requestBody",
                            "required": false,
                            "type": "list"
                        },
                        "description": {
                            "in": "requestBody",
                            "required": true,
                            "type": "string"
                        },
                        "email": {
                            "in": "requestBody",
                            "required": true,
                            "type": "string"
                        },
                        "priority": {
                            "in": "requestBody",
                            "required": false,
                            "type": "int"
                        },
                        "status": {
                            "in": "requestBody",
                            "required": false,
                            "type": "int"
                        },
                        "subject": {
                            "in": "requestBody",
                            "required": true,
                            "type": "string"
                        }
                    },
                    "help": "Create new ticket",
                    "http": {
                        "contentType": "application/json",
                        "method": "post",
                        "path": "/ticket/create",
                        "port": 8000
                    },
                    "output": {
                        "contentType": "application/json",
                        "type": "map"
                    }
                },
                "deleteContact": {
                    "arguments": {
                        "id": {
                            "in": "requestBody",
                            "required": true,
                            "type": "int"
                        }
                    },
                    "help": "Delete contact by id",
                    "http": {
                        "contentType": "application/json",
                        "method": "post",
                        "path": "/contact/delete",
                        "port": 8000
                    },
                    "output": {
                        "contentType": "application/json",
                        "type": "map"
                    }
                },
                "deleteTicket": {
                    "arguments": {
                        "id": {
                            "in": "requestBody",
                            "required": true,
                            "type": "int"
                        }
                    },
                    "help": "Delete ticket by id",
                    "http": {
                        "contentType": "application/json",
                        "method": "post",
                        "path": "/ticket/delete",
                        "port": 8000
                    },
                    "output": {
                        "contentType": "application/json",
                        "type": "map"
                    }
                },
                "getContact": {
                    "arguments": {
                        "id": {
                            "in": "requestBody",
                            "required": true,
                            "type": "int"
                        }
                    },
                    "help": "Get contact by id",
                    "http": {
                        "contentType": "application/json",
                        "method": "post",
                        "path": "/contact/get",
                        "port": 8000
                    },
                    "output": {
                        "contentType": "application/json",
                        "type": "map"
                    }
                },
                "getTicket": {
                    "arguments": {
                        "id": {
                            "in": "requestBody",
                            "required": true,
                            "type": "int"
                        }
                    },
                    "help": "Get ticket by id",
                    "http": {
                        "contentType": "application/json",
                        "method": "post",
                        "path": "/ticket/get",
                        "port": 8000
                    },
                    "output": {
                        "contentType": "application/json",
                        "type": "map"
                    }
                },
                "listContact": {
                    "help": "Get all contacts",
                    "http": {
                        "contentType": "application/json",
                        "method": "post",
                        "path": "/contact/list",
                        "port": 8000
                    },
                    "output": {
                        "contentType": "application/json",
                        "type": "map"
                    }
                },
                "listTicket": {
                    "help": "Get all tickets",
                    "http": {
                        "contentType": "application/json",
                        "method": "post",
                        "path": "/ticket/list",
                        "port": 8000
                    },
                    "output": {
                        "contentType": "application/json",
                        "type": "list"
                    }
                }
            },
            "environment": {
                "API_KEY": {
                    "help": "A Freshdesk `API_KEY`",
                    "required": true,
                    "type": "string"
                },
                "DOMAIN": {
                    "help": "A Freshdesk account Domain name: https://{DOMAIN}.freshdesk.com/",
                    "required": true,
                    "type": "string"
                }
            },
            "info": {
                "contact": {
                    "email": "core@openmicroservices.org",
                    "name": "Open Microservices",
                    "url": "https://openmicroservices.org"
                },
                "description": "Freshdesk as a microservice",
                "license": {
                    "name": "MIT",
                    "url": "https://opensource.org/licenses/MIT"
                },
                "title": "Freshdesk",
                "version": "1.0.0"
            },
            "lifecycle": {
                "startup": {
                    "command": [
                        "python",
                        "/app/app.py"
                    ]
                }
            },
            "oms": 1
        },
        "readme": "# _Freshdesk_ Open Microservice\n\n> Freshdesk as a microservice\n\n[![Open Microservice Specification Version](https://img.shields.io/badge/Open%20Microservice-1.0-477bf3.svg)](https://openmicroservices.org)\n[![Open Microservices Spectrum Chat](https://withspectrum.github.io/badge/badge.svg)](https://spectrum.chat/open-microservices)\n[![Open Microservices Code of Conduct](https://img.shields.io/badge/Contributor%20Covenant-v1.4%20adopted-ff69b4.svg)](https://github.com/oms-services/.github/blob/master/CODE_OF_CONDUCT.md)\n[![Open Microservices Commitzen](https://img.shields.io/badge/commitizen-friendly-brightgreen.svg)](http://commitizen.github.io/cz-cli/)\n[![PRs Welcome](https://img.shields.io/badge/PRs-welcome-brightgreen.svg)](http://makeapullrequest.com)\n[![License: MIT](https://img.shields.io/badge/License-MIT-blue.svg)](https://opensource.org/licenses/MIT)\n\n## Introduction\n\nThis project is an example implementation of the [Open Microservice Specification](https://openmicroservices.org), a standard\noriginally created at [Storyscript](https://storyscript.io) for building highly-portable \"microservices\" that expose the\nevents, actions, and APIs inside containerized software.\n\n## Getting Started\n\nThe `oms` command-line interface allows you to interact with Open Microservices. If you're interested in creating an Open\nMicroservice the CLI also helps validate, test, and debug your `oms.yml` implementation!\n\nSee the [oms-cli](https://github.com/microservices/oms) project to learn more!\n\n### Installation\n\n```\nnpm install -g @microservices/oms\n```\n\n## Usage\n\n### Open Microservices CLI Usage\n\nOnce you have the [oms-cli](https://github.com/microservices/oms) installed, you can run any of the following commands from\nwithin this project's root directory:\n\n#### Actions\n\n##### getTicket\n\n> Get ticket by id\n\n##### Action Arguments\n\n| Argument Name | Type     | Required | Default | Description                                                      |\n| :------------ | :------- | :------- | :------ | :--------------------------------------------------------------- |\n| id            | `int`    | `true`   | None    | No description provided.                                         |\n| API_KEY       | `string` | `true`   | None    | A Freshdesk `API_KEY`                                            |\n| DOMAIN        | `string` | `true`   | None    | A Freshdesk account Domain name: https://{DOMAIN}.freshdesk.com/ |\n\n```shell\noms run getTicket \\\n    -a id='*****' \\\n    -e API_KEY=$API_KEY \\\n    -e DOMAIN=$DOMAIN\n```\n\n##### createTicket\n\n> Create new ticket\n\n##### Action Arguments\n\n| Argument Name | Type     | Required | Default | Description                                                      |\n| :------------ | :------- | :------- | :------ | :--------------------------------------------------------------- |\n| description   | `string` | `true`   | None    | No description provided.                                         |\n| subject       | `string` | `true`   | None    | No description provided.                                         |\n| email         | `string` | `true`   | None    | No description provided.                                         |\n| priority      | `int`    | `false`  | None    | No description provided.                                         |\n| status        | `int`    | `false`  | None    | No description provided.                                         |\n| ccEmails      | `list`   | `false`  | None    | No description provided.                                         |\n| API_KEY       | `string` | `true`   | None    | A Freshdesk `API_KEY`                                            |\n| DOMAIN        | `string` | `true`   | None    | A Freshdesk account Domain name: https://{DOMAIN}.freshdesk.com/ |\n\n```shell\noms run createTicket \\\n    -a description='*****' \\\n    -a subject='*****' \\\n    -a email='*****' \\\n    -a priority='*****' \\\n    -a status='*****' \\\n    -a ccEmails='*****' \\\n    -e API_KEY=$API_KEY \\\n    -e DOMAIN=$DOMAIN\n```\n\n##### deleteTicket\n\n> Delete ticket by id\n\n##### Action Arguments\n\n| Argument Name | Type     | Required | Default | Description                                                      |\n| :------------ | :------- | :------- | :------ | :--------------------------------------------------------------- |\n| id            | `int`    | `true`   | None    | No description provided.                                         |\n| API_KEY       | `string` | `true`   | None    | A Freshdesk `API_KEY`                                            |\n| DOMAIN        | `string` | `true`   | None    | A Freshdesk account Domain name: https://{DOMAIN}.freshdesk.com/ |\n\n```shell\noms run deleteTicket \\\n    -a id='*****' \\\n    -e API_KEY=$API_KEY \\\n    -e DOMAIN=$DOMAIN\n```\n\n##### listTicket\n\n> Get all tickets\n\n##### Action Arguments\n\n| Argument Name | Type     | Required | Default | Description                                                      |\n| :------------ | :------- | :------- | :------ | :--------------------------------------------------------------- |\n| API_KEY       | `string` | `true`   | None    | A Freshdesk `API_KEY`                                            |\n| DOMAIN        | `string` | `true`   | None    | A Freshdesk account Domain name: https://{DOMAIN}.freshdesk.com/ |\n\n```shell\noms run listTicket \\\n    -e API_KEY=$API_KEY \\\n    -e DOMAIN=$DOMAIN\n```\n\n##### getContact\n\n> Get contact by id\n\n##### Action Arguments\n\n| Argument Name | Type     | Required | Default | Description                                                      |\n| :------------ | :------- | :------- | :------ | :--------------------------------------------------------------- |\n| id            | `int`    | `true`   | None    | No description provided.                                         |\n| API_KEY       | `string` | `true`   | None    | A Freshdesk `API_KEY`                                            |\n| DOMAIN        | `string` | `true`   | None    | A Freshdesk account Domain name: https://{DOMAIN}.freshdesk.com/ |\n\n```shell\noms run getContact \\\n    -a id='*****' \\\n    -e API_KEY=$API_KEY \\\n    -e DOMAIN=$DOMAIN\n```\n\n##### createContact\n\n> Create new contact\n\n##### Action Arguments\n\n| Argument Name    | Type     | Required | Default | Description                                                      |\n| :--------------- | :------- | :------- | :------ | :--------------------------------------------------------------- |\n| name             | `string` | `true`   | None    | No description provided.                                         |\n| email            | `string` | `false`  | None    | No description provided.                                         |\n| mobile           | `int`    | `false`  | None    | No description provided.                                         |\n| phone            | `string` | `false`  | None    | No description provided.                                         |\n| twitterId        | `string` | `false`  | None    | No description provided.                                         |\n| uniqueExternalId | `list`   | `false`  | None    | No description provided.                                         |\n| API_KEY          | `string` | `true`   | None    | A Freshdesk `API_KEY`                                            |\n| DOMAIN           | `string` | `true`   | None    | A Freshdesk account Domain name: https://{DOMAIN}.freshdesk.com/ |\n\n```shell\noms run createContact \\\n    -a name='*****' \\\n    -a email='*****' \\\n    -a mobile='*****' \\\n    -a phone='*****' \\\n    -a twitterId='*****' \\\n    -a uniqueExternalId='*****' \\\n    -e API_KEY=$API_KEY \\\n    -e DOMAIN=$DOMAIN\n```\n\n##### deleteContact\n\n> Delete contact by id\n\n##### Action Arguments\n\n| Argument Name | Type     | Required | Default | Description                                                      |\n| :------------ | :------- | :------- | :------ | :--------------------------------------------------------------- |\n| id            | `int`    | `true`   | None    | No description provided.                                         |\n| API_KEY       | `string` | `true`   | None    | A Freshdesk `API_KEY`                                            |\n| DOMAIN        | `string` | `true`   | None    | A Freshdesk account Domain name: https://{DOMAIN}.freshdesk.com/ |\n\n```shell\noms run deleteContact \\\n    -a id='*****' \\\n    -e API_KEY=$API_KEY \\\n    -e DOMAIN=$DOMAIN\n```\n\n##### listContact\n\n> Get all contacts\n\n##### Action Arguments\n\n| Argument Name | Type     | Required | Default | Description                                                      |\n| :------------ | :------- | :------- | :------ | :--------------------------------------------------------------- |\n| API_KEY       | `string` | `true`   | None    | A Freshdesk `API_KEY`                                            |\n| DOMAIN        | `string` | `true`   | None    | A Freshdesk account Domain name: https://{DOMAIN}.freshdesk.com/ |\n\n```shell\noms run listContact \\\n    -e API_KEY=$API_KEY \\\n    -e DOMAIN=$DOMAIN\n```\n\n## Contributing\n\nAll suggestions in how to improve the specification and this guide are very welcome. Feel free share your thoughts in the\nIssue tracker, or even better, fork the repository to implement your own ideas and submit a pull request.\n\n[![Edit freshdesk on CodeSandbox](https://codesandbox.io/static/img/play-codesandbox.svg)](https://codesandbox.io/s/github/oms-services/freshdesk)\n\nThis project is guided by [Contributor Covenant](https://github.com/oms-services/.github/blob/master/CODE_OF_CONDUCT.md).\nPlease read out full [Contribution Guidelines](https://github.com/oms-services/.github/blob/master/CONTRIBUTING.md).\n\n## Additional Resources\n\n- [Install the CLI](https://github.com/microservices/oms) - The OMS CLI helps developers create, test, validate, and build\n  microservices.\n- [Example OMS Services](https://github.com/oms-services) - Examples of OMS-compliant services written in a variety of\n  languages.\n- [Example Language Implementations](https://github.com/microservices) - Find tooling & language implementations in Node,\n  Python, Scala, Java, Clojure.\n- [Storyscript Hub](https://hub.storyscript.io) - A public registry of OMS services.\n- [Community Chat](https://spectrum.chat/open-microservices) - Have ideas? Questions? Join us on Spectrum.\n",
        "service": {
            "alias": null,
            "description": "Customer support software.",
            "isCertified": false,
            "name": "freshdesk",
            "owner": {
                "username": "rohit121"
            },
            "public": true,
            "topics": [
                "crm"
            ]
        },
        "serviceUuid": "41cbf84f-7bf7-4e96-bbc7-f10257542fa5",
        "state": "BETA"
    },
    {
        "configuration": {
            "actions": {
                "id": {
                    "help": "Generate an awesome id. It is really cool.\n",
                    "http": {
                        "method": "get",
                        "path": "/",
                        "port": 8000
                    },
                    "output": {
                        "type": "string"
                    }
                }
            },
            "info": {
                "contact": {
                    "email": "core@openmicroservices.org",
                    "name": "Open Microservices",
                    "url": "https://openmicroservices.org"
                },
                "description": "This is a awesome service",
                "license": {
                    "name": "MIT",
                    "url": "https://opensource.org/licenses/MIT"
                },
                "title": "Awesome",
                "version": "1.0.0"
            },
            "lifecycle": {
                "startup": {
                    "command": [
                        "python3",
                        "/app/server.py"
                    ]
                }
            },
            "oms": 1
        },
        "readme": "# _Awesome_ Open Microservice\n\n> This is a awesome service\n\n[![Open Microservice Specification Version](https://img.shields.io/badge/Open%20Microservice-1.0-477bf3.svg)](https://openmicroservices.org) [![Open Microservices Spectrum Chat](https://withspectrum.github.io/badge/badge.svg)](https://spectrum.chat/open-microservices) [![Open Microservices Code of Conduct](https://img.shields.io/badge/Contributor%20Covenant-v1.4%20adopted-ff69b4.svg)](https://github.com/oms-services/.github/blob/master/CODE_OF_CONDUCT.md) [![Open Microservices Commitzen](https://img.shields.io/badge/commitizen-friendly-brightgreen.svg)](http://commitizen.github.io/cz-cli/) [![PRs Welcome](https://img.shields.io/badge/PRs-welcome-brightgreen.svg)](http://makeapullrequest.com) \n[![License: MIT](https://img.shields.io/badge/License-MIT-blue.svg)](https://opensource.org/licenses/MIT)\n\n## Introduction\n\nThis project is an example implementation of the [Open Microservice Specification](https://openmicroservices.org), a standard originally created at [Storyscript](https://storyscript.io) for building highly-portable \"microservices\" that expose the events, actions, and APIs inside containerized software.\n\n## Getting Started\n\nThe `oms` command-line interface allows you to interact with Open Microservices. If you're interested in creating an Open Microservice the CLI also helps validate, test, and debug your `oms.yml` implementation!\n\nSee the [oms-cli](https://github.com/microservices/oms) project to learn more!\n\n### Installation\n\n```\nnpm install -g @microservices/oms\n```\n\n## Usage\n\n### Open Microservices CLI Usage\n\nOnce you have the [oms-cli](https://github.com/microservices/oms) installed, you can run any of the following commands from within this project's root directory:\n\n#### Actions\n\n##### id\n\n> Generate an awesome id. It is really cool.\n\n##### Action Arguments\n\n| Argument Name | Type | Required | Default | Description |\n|:------------- |:---- |:-------- |:--------|:----------- |\n\n\n``` shell\noms run id\n```\n\n## Contributing\n\nAll suggestions in how to improve the specification and this guide are very welcome. Feel free share your thoughts in the Issue tracker, or even better, fork the repository to implement your own ideas and submit a pull request.\n\n[![Edit awesome on CodeSandbox](https://codesandbox.io/static/img/play-codesandbox.svg)](https://codesandbox.io/s/github/oms-services/awesome)\n\nThis project is guided by [Contributor Covenant](https://github.com/oms-services/.github/blob/master/CODE_OF_CONDUCT.md). Please read out full [Contribution Guidelines](https://github.com/oms-services/.github/blob/master/CONTRIBUTING.md).\n\n## Additional Resources\n\n* [Install the CLI](https://github.com/microservices/oms) - The OMS CLI helps developers create, test, validate, and build microservices.\n* [Example OMS Services](https://github.com/oms-services) - Examples of OMS-compliant services written in a variety of languages.\n* [Example Language Implementations](https://github.com/microservices) - Find tooling & language implementations in Node, Python, Scala, Java, Clojure.\n* [Storyscript Hub](https://hub.storyscript.io) - A public registry of OMS services.\n* [Community Chat](https://spectrum.chat/open-microservices) - Have ideas? Questions? Join us on Spectrum.\n",
        "service": {
            "alias": "awesome",
            "description": null,
            "isCertified": true,
            "name": "awesome",
            "owner": {
                "username": "oms-services"
            },
            "public": true,
            "topics": [
                "microservice",
                "slug",
                "slug-generator",
                "oms",
                "open-microservice",
                "open-microservices"
            ]
        },
        "serviceUuid": "0e8d89f4-2493-49a7-adb2-e995b4ae347a",
        "state": "BETA"
    },
    {
        "configuration": {
            "actions": {
                "id": {
                    "help": "Generate an awesome id. It is really cool.\n",
                    "http": {
                        "method": "get",
                        "path": "/",
                        "port": 8000
                    },
                    "output": {
                        "type": "string"
                    }
                }
            },
            "info": {
                "contact": {
                    "email": "core@openmicroservices.org",
                    "name": "Open Microservices",
                    "url": "https://openmicroservices.org"
                },
                "description": "This is a awesome service",
                "license": {
                    "name": "MIT",
                    "url": "https://opensource.org/licenses/MIT"
                },
                "title": "Awesome",
                "version": "1.0.0"
            },
            "lifecycle": {
                "startup": {
                    "command": [
                        "python3",
                        "/app/server.py"
                    ]
                }
            },
            "oms": 1
        },
        "readme": "# _Awesome_ Open Microservice\n\n> This is a awesome service\n\n[![Open Microservice Specification Version](https://img.shields.io/badge/Open%20Microservice-1.0-477bf3.svg)](https://openmicroservices.org) [![Open Microservices Spectrum Chat](https://withspectrum.github.io/badge/badge.svg)](https://spectrum.chat/open-microservices) [![Open Microservices Code of Conduct](https://img.shields.io/badge/Contributor%20Covenant-v1.4%20adopted-ff69b4.svg)](https://github.com/oms-services/.github/blob/master/CODE_OF_CONDUCT.md) [![Open Microservices Commitzen](https://img.shields.io/badge/commitizen-friendly-brightgreen.svg)](http://commitizen.github.io/cz-cli/) [![PRs Welcome](https://img.shields.io/badge/PRs-welcome-brightgreen.svg)](http://makeapullrequest.com) \n[![License: MIT](https://img.shields.io/badge/License-MIT-blue.svg)](https://opensource.org/licenses/MIT)\n\n## Introduction\n\nThis project is an example implementation of the [Open Microservice Specification](https://openmicroservices.org), a standard originally created at [Storyscript](https://storyscript.io) for building highly-portable \"microservices\" that expose the events, actions, and APIs inside containerized software.\n\n## Getting Started\n\nThe `oms` command-line interface allows you to interact with Open Microservices. If you're interested in creating an Open Microservice the CLI also helps validate, test, and debug your `oms.yml` implementation!\n\nSee the [oms-cli](https://github.com/microservices/oms) project to learn more!\n\n### Installation\n\n```\nnpm install -g @microservices/oms\n```\n\n## Usage\n\n### Open Microservices CLI Usage\n\nOnce you have the [oms-cli](https://github.com/microservices/oms) installed, you can run any of the following commands from within this project's root directory:\n\n#### Actions\n\n##### id\n\n> Generate an awesome id. It is really cool.\n\n##### Action Arguments\n\n| Argument Name | Type | Required | Default | Description |\n|:------------- |:---- |:-------- |:--------|:----------- |\n\n\n``` shell\noms run id\n```\n\n## Contributing\n\nAll suggestions in how to improve the specification and this guide are very welcome. Feel free share your thoughts in the Issue tracker, or even better, fork the repository to implement your own ideas and submit a pull request.\n\n[![Edit awesome on CodeSandbox](https://codesandbox.io/static/img/play-codesandbox.svg)](https://codesandbox.io/s/github/oms-services/awesome)\n\nThis project is guided by [Contributor Covenant](https://github.com/oms-services/.github/blob/master/CODE_OF_CONDUCT.md). Please read out full [Contribution Guidelines](https://github.com/oms-services/.github/blob/master/CONTRIBUTING.md).\n\n## Additional Resources\n\n* [Install the CLI](https://github.com/microservices/oms) - The OMS CLI helps developers create, test, validate, and build microservices.\n* [Example OMS Services](https://github.com/oms-services) - Examples of OMS-compliant services written in a variety of languages.\n* [Example Language Implementations](https://github.com/microservices) - Find tooling & language implementations in Node, Python, Scala, Java, Clojure.\n* [Storyscript Hub](https://hub.storyscript.io) - A public registry of OMS services.\n* [Community Chat](https://spectrum.chat/open-microservices) - Have ideas? Questions? Join us on Spectrum.\n",
        "service": {
            "alias": "awesome",
            "description": null,
            "isCertified": true,
            "name": "awesome",
            "owner": {
                "username": "oms-services"
            },
            "public": true,
            "topics": [
                "microservice",
                "slug",
                "slug-generator",
                "oms",
                "open-microservice",
                "open-microservices"
            ]
        },
        "serviceUuid": "0e8d89f4-2493-49a7-adb2-e995b4ae347a",
        "state": "BETA"
    },
    {
        "configuration": {
            "actions": {
                "log": {
                    "help": "Writes to stdout and stderr",
                    "http": {
                        "method": "post",
                        "path": "/log",
                        "port": 9000
                    },
                    "output": {
                        "type": "string"
                    }
                }
            },
            "info": {
                "description": "Writes to stdout and stderr",
                "license": {
                    "name": "MIT",
                    "url": "https://opensource.org/licenses/MIT"
                },
                "title": "Logger",
                "version": "0.0.1"
            },
            "lifecycle": {
                "startup": {
                    "command": [
                        "/logger"
                    ]
                }
            },
            "omg": 1
        },
        "readme": null,
        "service": {
            "alias": null,
            "description": "",
            "isCertified": false,
            "name": "logger",
            "owner": {
                "username": "williammartin"
            },
            "public": true,
            "topics": [
                "logger",
                "dev"
            ]
        },
        "serviceUuid": "c76d50ab-0ba0-4bff-94da-5d4b891235a9",
        "state": "BETA"
    },
    {
        "configuration": {
            "actions": {
                "fetch": {
                    "arguments": {
                        "users": {
                            "help": "A comma-separated string list of Instagram Usernames.",
                            "in": "query",
                            "required": false,
                            "type": "string"
                        }
                    },
                    "help": "Returns a list of posts from from one or more Instagram users.",
                    "http": {
                        "method": "get",
                        "path": "/",
                        "port": 8080
                    },
                    "output": {
                        "contentType": "application/json",
                        "type": "map"
                    }
                }
            },
            "health": {
                "http": {
                    "path": "/health",
                    "port": 8080
                }
            },
            "info": {
                "description": "Access Twitter's User Posts API",
                "license": {
                    "name": "MIT",
                    "url": "https://opensource.org/licenses/MIT"
                },
                "title": "Instagram",
                "version": "1.0.0"
            },
            "lifecycle": {
                "startup": {
                    "command": [
                        "node",
                        "/app/src/index.js"
                    ]
                }
            },
            "oms": 1
        },
        "readme": "# _Instagram_ Open Microservice\n\n> Access Twitter's User Posts API\n\n[![Open Microservice Specification Version](https://img.shields.io/badge/Open%20Microservice-1.0-477bf3.svg)](https://openmicroservices.org) [![Open Microservices Spectrum Chat](https://withspectrum.github.io/badge/badge.svg)](https://spectrum.chat/open-microservices) [![Open Microservices Code of Conduct](https://img.shields.io/badge/Contributor%20Covenant-v1.4%20adopted-ff69b4.svg)](https://github.com/oms-services/.github/blob/master/CODE_OF_CONDUCT.md) [![Open Microservices Commitzen](https://img.shields.io/badge/commitizen-friendly-brightgreen.svg)](http://commitizen.github.io/cz-cli/) [![PRs Welcome](https://img.shields.io/badge/PRs-welcome-brightgreen.svg)](http://makeapullrequest.com) \n[![License: MIT](https://img.shields.io/badge/License-MIT-blue.svg)](https://opensource.org/licenses/MIT)\n\n## Introduction\n\nThis project is an example implementation of the [Open Microservice Specification](https://openmicroservices.org), a standard originally created at [Storyscript](https://storyscript.io) for building highly-portable \"microservices\" that expose the events, actions, and APIs inside containerized software.\n\n## Getting Started\n\nThe `oms` command-line interface allows you to interact with Open Microservices. If you're interested in creating an Open Microservice the CLI also helps validate, test, and debug your `oms.yml` implementation!\n\nSee the [oms-cli](https://github.com/microservices/oms) project to learn more!\n\n### Installation\n\n```\nnpm install -g @microservices/oms\n```\n\n## Usage\n\n### Open Microservices CLI Usage\n\nOnce you have the [oms-cli](https://github.com/microservices/oms) installed, you can run any of the following commands from within this project's root directory:\n\n#### Actions\n\n##### fetch\n\n> Returns a list of posts from from one or more Instagram users.\n##### Action Arguments\n\n| Argument Name | Type | Required | Default | Description |\n|:------------- |:---- |:-------- |:--------|:----------- |\n| users | `string` | `false` | None | A comma-separated string list of Instagram Usernames. |\n\n\n``` shell\noms run fetch \\ \n    -a users='*****'\n```\n\n## Contributing\n\nAll suggestions in how to improve the specification and this guide are very welcome. Feel free share your thoughts in the Issue tracker, or even better, fork the repository to implement your own ideas and submit a pull request.\n\n[![Edit oms-instagram on CodeSandbox](https://codesandbox.io/static/img/play-codesandbox.svg)](https://codesandbox.io/s/github/oms-services/oms-instagram)\n\nThis project is guided by [Contributor Covenant](https://github.com/oms-services/.github/blob/master/CODE_OF_CONDUCT.md). Please read out full [Contribution Guidelines](https://github.com/oms-services/.github/blob/master/CONTRIBUTING.md).\n\n## Additional Resources\n\n* [Install the CLI](https://github.com/microservices/oms) - The OMS CLI helps developers create, test, validate, and build microservices.\n* [Example OMS Services](https://github.com/oms-services) - Examples of OMS-compliant services written in a variety of languages.\n* [Example Language Implementations](https://github.com/microservices) - Find tooling & language implementations in Node, Python, Scala, Java, Clojure.\n* [Storyscript Hub](https://hub.storyscript.io) - A public registry of OMS services.\n* [Community Chat](https://spectrum.chat/open-microservices) - Have ideas? Questions? Join us on Spectrum.\n",
        "service": {
            "alias": null,
            "description": "An Open Microservice to the Instagram Private API",
            "isCertified": false,
            "name": "instagram",
            "owner": {
                "username": "matthewhudson"
            },
            "public": true,
            "topics": [
                "instagram",
                "ig",
                "photos"
            ]
        },
        "serviceUuid": "edf43587-e1cc-4fdf-bf41-8b8d7e7973b4",
        "state": "BETA"
    },
    {
        "configuration": {
            "actions": {
                "basic_publish": {
                    "arguments": {
                        "app_id": {
                            "in": "requestBody",
                            "type": "string"
                        },
                        "cluster_id": {
                            "in": "requestBody",
                            "type": "string"
                        },
                        "content": {
                            "in": "requestBody",
                            "required": true,
                            "type": "string"
                        },
                        "content_encoding": {
                            "in": "requestBody",
                            "type": "string"
                        },
                        "content_type": {
                            "in": "requestBody",
                            "type": "string"
                        },
                        "exchange": {
                            "in": "requestBody",
                            "required": true,
                            "type": "string"
                        },
                        "expiration": {
                            "in": "requestBody",
                            "type": "string"
                        },
                        "headers": {
                            "in": "requestBody",
                            "type": "map"
                        },
                        "message_id": {
                            "in": "requestBody",
                            "type": "string"
                        },
                        "reply_to": {
                            "in": "requestBody",
                            "type": "string"
                        },
                        "routing_key": {
                            "in": "requestBody",
                            "required": true,
                            "type": "string"
                        },
                        "type": {
                            "in": "requestBody",
                            "type": "string"
                        }
                    },
                    "http": {
                        "contentType": "application/json",
                        "method": "post",
                        "path": "/basic/publish",
                        "port": 8080
                    },
                    "output": {
                        "type": "none"
                    }
                },
                "subscribe": {
                    "events": {
                        "exchange": {
                            "arguments": {
                                "consumer_tag": {
                                    "help": "The consumer tag",
                                    "in": "requestBody",
                                    "required": true,
                                    "type": "string"
                                },
                                "name": {
                                    "help": "The name of the exchange to subscribe to",
                                    "in": "requestBody",
                                    "required": true,
                                    "type": "string"
                                },
                                "routing_key": {
                                    "help": "The routing key to use",
                                    "in": "requestBody",
                                    "required": true,
                                    "type": "string"
                                },
                                "type": {
                                    "help": "The type of this exchange (eg: direct, topic)",
                                    "in": "requestBody",
                                    "required": true,
                                    "type": "string"
                                }
                            },
                            "http": {
                                "port": 8080,
                                "subscribe": {
                                    "contentType": "application/json",
                                    "method": "post",
                                    "path": "/subscribe/exchange"
                                }
                            },
                            "output": {
                                "contentType": "application/json",
                                "properties": {
                                    "body": {
                                        "type": "string"
                                    },
                                    "consumer_tag": {
                                        "type": "string"
                                    },
                                    "properties": {
                                        "properties": {
                                            "app_id": {
                                                "type": "string"
                                            },
                                            "cluster_id": {
                                                "type": "string"
                                            },
                                            "content_encoding": {
                                                "type": "string"
                                            },
                                            "content_type": {
                                                "type": "string"
                                            },
                                            "expiration": {
                                                "type": "string"
                                            },
                                            "headers": {
                                                "type": "map"
                                            },
                                            "message_id": {
                                                "type": "string"
                                            },
                                            "reply_to": {
                                                "type": "string"
                                            },
                                            "type": {
                                                "type": "string"
                                            }
                                        },
                                        "type": "object"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                }
            },
            "environment": {
                "RABBITMQ_URI": {
                    "help": "The RabbitMQ connection URI (eg: amqp://username:password@host:port)",
                    "required": true,
                    "type": "string"
                }
            },
            "info": {
                "contact": {
                    "email": "infra@storyscript.io",
                    "name": "Storyscript",
                    "url": "https://storyscript.io"
                },
                "description": "This service allows communication to a RabbitMQ server",
                "license": {
                    "name": "MIT",
                    "url": "https://opensource.org/licenses/MIT"
                },
                "title": "RabbitMQ",
                "version": "1.0.0"
            },
            "lifecycle": {
                "startup": {
                    "command": [
                        "java",
                        "-jar",
                        "/app/target/rabbitmq-1.0-SNAPSHOT.jar"
                    ]
                }
            },
            "oms": 1
        },
        "readme": "# _RabbitMQ_ Open Microservice\n\n> This service allows communication to a RabbitMQ server\n\n[![Open Microservice Specification Version](https://img.shields.io/badge/Open%20Microservice-1.0-477bf3.svg)](https://openmicroservices.org)\n[![Open Microservices Spectrum Chat](https://withspectrum.github.io/badge/badge.svg)](https://spectrum.chat/open-microservices)\n[![Open Microservices Code of Conduct](https://img.shields.io/badge/Contributor%20Covenant-v1.4%20adopted-ff69b4.svg)](https://github.com/oms-services/.github/blob/master/CODE_OF_CONDUCT.md)\n[![Open Microservices Commitzen](https://img.shields.io/badge/commitizen-friendly-brightgreen.svg)](http://commitizen.github.io/cz-cli/)\n[![PRs Welcome](https://img.shields.io/badge/PRs-welcome-brightgreen.svg)](http://makeapullrequest.com)\n[![License: MIT](https://img.shields.io/badge/License-MIT-blue.svg)](https://opensource.org/licenses/MIT)\n\n## Introduction\n\nThis project is an example implementation of the [Open Microservice Specification](https://openmicroservices.org), a standard\noriginally created at [Storyscript](https://storyscript.io) for building highly-portable \"microservices\" that expose the\nevents, actions, and APIs inside containerized software.\n\n## Getting Started\n\nThe `oms` command-line interface allows you to interact with Open Microservices. If you're interested in creating an Open\nMicroservice the CLI also helps validate, test, and debug your `oms.yml` implementation!\n\nSee the [oms-cli](https://github.com/microservices/oms) project to learn more!\n\n### Installation\n\n```\nnpm install -g @microservices/oms\n```\n\n## Usage\n\n### Open Microservices CLI Usage\n\nOnce you have the [oms-cli](https://github.com/microservices/oms) installed, you can run any of the following commands from\nwithin this project's root directory:\n\n#### Actions\n\n##### exchange\n\n##### Action Arguments\n\n| Argument Name | Type     | Required | Default | Description                                                          |\n| :------------ | :------- | :------- | :------ | :------------------------------------------------------------------- |\n| name          | `string` | `true`   | None    | The name of the exchange to subscribe to                             |\n| type          | `string` | `true`   | None    | The type of this exchange (eg: direct, topic)                        |\n| routing_key   | `string` | `true`   | None    | The routing key to use                                               |\n| consumer_tag  | `string` | `true`   | None    | The consumer tag                                                     |\n| RABBITMQ_URI  | `string` | `true`   | None    | The RabbitMQ connection URI (eg: amqp://username:password@host:port) |\n\n```shell\noms subscribe exchange \\\n    -a name='*****' \\\n    -a type='*****' \\\n    -a routing_key='*****' \\\n    -a consumer_tag='*****' \\\n    -e RABBITMQ_URI=$RABBITMQ_URI\n```\n\n##### basic_publish\n\n##### Action Arguments\n\n| Argument Name    | Type     | Required | Default | Description                                                          |\n| :--------------- | :------- | :------- | :------ | :------------------------------------------------------------------- |\n| exchange         | `string` | `true`   | None    | No description provided.                                             |\n| routing_key      | `string` | `true`   | None    | No description provided.                                             |\n| app_id           | `string` | `false`  | None    | No description provided.                                             |\n| cluster_id       | `string` | `false`  | None    | No description provided.                                             |\n| content_encoding | `string` | `false`  | None    | No description provided.                                             |\n| content_type     | `string` | `false`  | None    | No description provided.                                             |\n| expiration       | `string` | `false`  | None    | No description provided.                                             |\n| message_id       | `string` | `false`  | None    | No description provided.                                             |\n| type             | `string` | `false`  | None    | No description provided.                                             |\n| reply_to         | `string` | `false`  | None    | No description provided.                                             |\n| headers          | `map`    | `false`  | None    | No description provided.                                             |\n| content          | `string` | `true`   | None    | No description provided.                                             |\n| RABBITMQ_URI     | `string` | `true`   | None    | The RabbitMQ connection URI (eg: amqp://username:password@host:port) |\n\n```shell\noms run basic_publish \\\n    -a exchange='*****' \\\n    -a routing_key='*****' \\\n    -a app_id='*****' \\\n    -a cluster_id='*****' \\\n    -a content_encoding='*****' \\\n    -a content_type='*****' \\\n    -a expiration='*****' \\\n    -a message_id='*****' \\\n    -a type='*****' \\\n    -a reply_to='*****' \\\n    -a headers='*****' \\\n    -a content='*****' \\\n    -e RABBITMQ_URI=$RABBITMQ_URI\n```\n\n## Contributing\n\nAll suggestions in how to improve the specification and this guide are very welcome. Feel free share your thoughts in the\nIssue tracker, or even better, fork the repository to implement your own ideas and submit a pull request.\n\n[![Edit rabbitmq on CodeSandbox](https://codesandbox.io/static/img/play-codesandbox.svg)](https://codesandbox.io/s/github/oms-services/rabbitmq)\n\nThis project is guided by [Contributor Covenant](https://github.com/oms-services/.github/blob/master/CODE_OF_CONDUCT.md).\nPlease read out full [Contribution Guidelines](https://github.com/oms-services/.github/blob/master/CONTRIBUTING.md).\n\n## Additional Resources\n\n- [Install the CLI](https://github.com/microservices/oms) - The OMS CLI helps developers create, test, validate, and build\n  microservices.\n- [Example OMS Services](https://github.com/oms-services) - Examples of OMS-compliant services written in a variety of\n  languages.\n- [Example Language Implementations](https://github.com/microservices) - Find tooling & language implementations in Node,\n  Python, Scala, Java, Clojure.\n- [Storyscript Hub](https://hub.storyscript.io) - A public registry of OMS services.\n- [Community Chat](https://spectrum.chat/open-microservices) - Have ideas? Questions? Join us on Spectrum.\n",
        "service": {
            "alias": "rabbitmq",
            "description": "An OMG compliant container to communicate with RabbitMQ, a message broker",
            "isCertified": true,
            "name": "rabbitmq",
            "owner": {
                "username": "oms-services"
            },
            "public": true,
            "topics": [
                "microservice",
                "rabbitmq",
                "message-broker",
                "rabbitmq-client",
                "open-microservice",
                "oms"
            ]
        },
        "serviceUuid": "965ca5c7-4bf6-4004-b7e5-3e17a15aab81",
        "state": "BETA"
    },
    {
        "configuration": {
            "actions": {
                "basic_publish": {
                    "arguments": {
                        "app_id": {
                            "in": "requestBody",
                            "type": "string"
                        },
                        "cluster_id": {
                            "in": "requestBody",
                            "type": "string"
                        },
                        "content": {
                            "in": "requestBody",
                            "required": true,
                            "type": "string"
                        },
                        "content_encoding": {
                            "in": "requestBody",
                            "type": "string"
                        },
                        "content_type": {
                            "in": "requestBody",
                            "type": "string"
                        },
                        "exchange": {
                            "in": "requestBody",
                            "required": true,
                            "type": "string"
                        },
                        "expiration": {
                            "in": "requestBody",
                            "type": "string"
                        },
                        "headers": {
                            "in": "requestBody",
                            "type": "map"
                        },
                        "message_id": {
                            "in": "requestBody",
                            "type": "string"
                        },
                        "reply_to": {
                            "in": "requestBody",
                            "type": "string"
                        },
                        "routing_key": {
                            "in": "requestBody",
                            "required": true,
                            "type": "string"
                        },
                        "type": {
                            "in": "requestBody",
                            "type": "string"
                        }
                    },
                    "http": {
                        "contentType": "application/json",
                        "method": "post",
                        "path": "/basic/publish",
                        "port": 8080
                    },
                    "output": {
                        "type": "none"
                    }
                },
                "subscribe": {
                    "events": {
                        "exchange": {
                            "arguments": {
                                "consumer_tag": {
                                    "help": "The consumer tag",
                                    "in": "requestBody",
                                    "required": true,
                                    "type": "string"
                                },
                                "name": {
                                    "help": "The name of the exchange to subscribe to",
                                    "in": "requestBody",
                                    "required": true,
                                    "type": "string"
                                },
                                "routing_key": {
                                    "help": "The routing key to use",
                                    "in": "requestBody",
                                    "required": true,
                                    "type": "string"
                                },
                                "type": {
                                    "help": "The type of this exchange (eg: direct, topic)",
                                    "in": "requestBody",
                                    "required": true,
                                    "type": "string"
                                }
                            },
                            "http": {
                                "port": 8080,
                                "subscribe": {
                                    "contentType": "application/json",
                                    "method": "post",
                                    "path": "/subscribe/exchange"
                                }
                            },
                            "output": {
                                "contentType": "application/json",
                                "properties": {
                                    "body": {
                                        "type": "string"
                                    },
                                    "consumer_tag": {
                                        "type": "string"
                                    },
                                    "properties": {
                                        "properties": {
                                            "app_id": {
                                                "type": "string"
                                            },
                                            "cluster_id": {
                                                "type": "string"
                                            },
                                            "content_encoding": {
                                                "type": "string"
                                            },
                                            "content_type": {
                                                "type": "string"
                                            },
                                            "expiration": {
                                                "type": "string"
                                            },
                                            "headers": {
                                                "type": "map"
                                            },
                                            "message_id": {
                                                "type": "string"
                                            },
                                            "reply_to": {
                                                "type": "string"
                                            },
                                            "type": {
                                                "type": "string"
                                            }
                                        },
                                        "type": "object"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                }
            },
            "environment": {
                "RABBITMQ_URI": {
                    "help": "The RabbitMQ connection URI (eg: amqp://username:password@host:port)",
                    "required": true,
                    "type": "string"
                }
            },
            "info": {
                "contact": {
                    "email": "infra@storyscript.io",
                    "name": "Storyscript",
                    "url": "https://storyscript.io"
                },
                "description": "This service allows communication to a RabbitMQ server",
                "license": {
                    "name": "MIT",
                    "url": "https://opensource.org/licenses/MIT"
                },
                "title": "RabbitMQ",
                "version": "1.0.0"
            },
            "lifecycle": {
                "startup": {
                    "command": [
                        "java",
                        "-jar",
                        "/app/target/rabbitmq-1.0-SNAPSHOT.jar"
                    ]
                }
            },
            "oms": 1
        },
        "readme": "# _RabbitMQ_ Open Microservice\n\n> This service allows communication to a RabbitMQ server\n\n[![Open Microservice Specification Version](https://img.shields.io/badge/Open%20Microservice-1.0-477bf3.svg)](https://openmicroservices.org)\n[![Open Microservices Spectrum Chat](https://withspectrum.github.io/badge/badge.svg)](https://spectrum.chat/open-microservices)\n[![Open Microservices Code of Conduct](https://img.shields.io/badge/Contributor%20Covenant-v1.4%20adopted-ff69b4.svg)](https://github.com/oms-services/.github/blob/master/CODE_OF_CONDUCT.md)\n[![Open Microservices Commitzen](https://img.shields.io/badge/commitizen-friendly-brightgreen.svg)](http://commitizen.github.io/cz-cli/)\n[![PRs Welcome](https://img.shields.io/badge/PRs-welcome-brightgreen.svg)](http://makeapullrequest.com)\n[![License: MIT](https://img.shields.io/badge/License-MIT-blue.svg)](https://opensource.org/licenses/MIT)\n\n## Introduction\n\nThis project is an example implementation of the [Open Microservice Specification](https://openmicroservices.org), a standard\noriginally created at [Storyscript](https://storyscript.io) for building highly-portable \"microservices\" that expose the\nevents, actions, and APIs inside containerized software.\n\n## Getting Started\n\nThe `oms` command-line interface allows you to interact with Open Microservices. If you're interested in creating an Open\nMicroservice the CLI also helps validate, test, and debug your `oms.yml` implementation!\n\nSee the [oms-cli](https://github.com/microservices/oms) project to learn more!\n\n### Installation\n\n```\nnpm install -g @microservices/oms\n```\n\n## Usage\n\n### Open Microservices CLI Usage\n\nOnce you have the [oms-cli](https://github.com/microservices/oms) installed, you can run any of the following commands from\nwithin this project's root directory:\n\n#### Actions\n\n##### exchange\n\n##### Action Arguments\n\n| Argument Name | Type     | Required | Default | Description                                                          |\n| :------------ | :------- | :------- | :------ | :------------------------------------------------------------------- |\n| name          | `string` | `true`   | None    | The name of the exchange to subscribe to                             |\n| type          | `string` | `true`   | None    | The type of this exchange (eg: direct, topic)                        |\n| routing_key   | `string` | `true`   | None    | The routing key to use                                               |\n| consumer_tag  | `string` | `true`   | None    | The consumer tag                                                     |\n| RABBITMQ_URI  | `string` | `true`   | None    | The RabbitMQ connection URI (eg: amqp://username:password@host:port) |\n\n```shell\noms subscribe exchange \\\n    -a name='*****' \\\n    -a type='*****' \\\n    -a routing_key='*****' \\\n    -a consumer_tag='*****' \\\n    -e RABBITMQ_URI=$RABBITMQ_URI\n```\n\n##### basic_publish\n\n##### Action Arguments\n\n| Argument Name    | Type     | Required | Default | Description                                                          |\n| :--------------- | :------- | :------- | :------ | :------------------------------------------------------------------- |\n| exchange         | `string` | `true`   | None    | No description provided.                                             |\n| routing_key      | `string` | `true`   | None    | No description provided.                                             |\n| app_id           | `string` | `false`  | None    | No description provided.                                             |\n| cluster_id       | `string` | `false`  | None    | No description provided.                                             |\n| content_encoding | `string` | `false`  | None    | No description provided.                                             |\n| content_type     | `string` | `false`  | None    | No description provided.                                             |\n| expiration       | `string` | `false`  | None    | No description provided.                                             |\n| message_id       | `string` | `false`  | None    | No description provided.                                             |\n| type             | `string` | `false`  | None    | No description provided.                                             |\n| reply_to         | `string` | `false`  | None    | No description provided.                                             |\n| headers          | `map`    | `false`  | None    | No description provided.                                             |\n| content          | `string` | `true`   | None    | No description provided.                                             |\n| RABBITMQ_URI     | `string` | `true`   | None    | The RabbitMQ connection URI (eg: amqp://username:password@host:port) |\n\n```shell\noms run basic_publish \\\n    -a exchange='*****' \\\n    -a routing_key='*****' \\\n    -a app_id='*****' \\\n    -a cluster_id='*****' \\\n    -a content_encoding='*****' \\\n    -a content_type='*****' \\\n    -a expiration='*****' \\\n    -a message_id='*****' \\\n    -a type='*****' \\\n    -a reply_to='*****' \\\n    -a headers='*****' \\\n    -a content='*****' \\\n    -e RABBITMQ_URI=$RABBITMQ_URI\n```\n\n## Contributing\n\nAll suggestions in how to improve the specification and this guide are very welcome. Feel free share your thoughts in the\nIssue tracker, or even better, fork the repository to implement your own ideas and submit a pull request.\n\n[![Edit rabbitmq on CodeSandbox](https://codesandbox.io/static/img/play-codesandbox.svg)](https://codesandbox.io/s/github/oms-services/rabbitmq)\n\nThis project is guided by [Contributor Covenant](https://github.com/oms-services/.github/blob/master/CODE_OF_CONDUCT.md).\nPlease read out full [Contribution Guidelines](https://github.com/oms-services/.github/blob/master/CONTRIBUTING.md).\n\n## Additional Resources\n\n- [Install the CLI](https://github.com/microservices/oms) - The OMS CLI helps developers create, test, validate, and build\n  microservices.\n- [Example OMS Services](https://github.com/oms-services) - Examples of OMS-compliant services written in a variety of\n  languages.\n- [Example Language Implementations](https://github.com/microservices) - Find tooling & language implementations in Node,\n  Python, Scala, Java, Clojure.\n- [Storyscript Hub](https://hub.storyscript.io) - A public registry of OMS services.\n- [Community Chat](https://spectrum.chat/open-microservices) - Have ideas? Questions? Join us on Spectrum.\n",
        "service": {
            "alias": "rabbitmq",
            "description": "An OMG compliant container to communicate with RabbitMQ, a message broker",
            "isCertified": true,
            "name": "rabbitmq",
            "owner": {
                "username": "oms-services"
            },
            "public": true,
            "topics": [
                "microservice",
                "rabbitmq",
                "message-broker",
                "rabbitmq-client",
                "open-microservice",
                "oms"
            ]
        },
        "serviceUuid": "965ca5c7-4bf6-4004-b7e5-3e17a15aab81",
        "state": "BETA"
    },
    {
        "configuration": {
            "actions": {
                "convert": {
                    "arguments": {
                        "doc": {
                            "in": "requestBody",
                            "required": true,
                            "type": "string"
                        },
                        "format": {
                            "in": "query",
                            "required": true,
                            "type": "string"
                        },
                        "output": {
                            "in": "query",
                            "required": true,
                            "type": "string"
                        }
                    },
                    "help": "Converts a document, using Pandoc.\n",
                    "http": {
                        "method": "post",
                        "path": "/convert",
                        "port": 8080
                    },
                    "output": {
                        "type": "string"
                    }
                }
            },
            "info": {
                "contact": {
                    "email": "core@openmicroservices.org",
                    "name": "Open Microservices",
                    "url": "https://openmicroservices.org"
                },
                "description": "A Pandoc microservice.",
                "license": {
                    "name": "MIT",
                    "url": "https://opensource.org/licenses/MIT"
                },
                "title": "Pandoc",
                "version": "0.1.1"
            },
            "lifecycle": {
                "startup": {
                    "command": [
                        "python3",
                        "/app/service.py"
                    ]
                }
            },
            "oms": 1
        },
        "readme": "# _Pandoc_ Open Microservice\n\n> A Pandoc microservice.\n\n[![Open Microservice Specification Version](https://img.shields.io/badge/Open%20Microservice-1.0-477bf3.svg)](https://openmicroservices.org) [![Open Microservices Spectrum Chat](https://withspectrum.github.io/badge/badge.svg)](https://spectrum.chat/open-microservices) [![Open Microservices Code of Conduct](https://img.shields.io/badge/Contributor%20Covenant-v1.4%20adopted-ff69b4.svg)](https://github.com/oms-services/.github/blob/master/CODE_OF_CONDUCT.md) [![Open Microservices Commitzen](https://img.shields.io/badge/commitizen-friendly-brightgreen.svg)](http://commitizen.github.io/cz-cli/) [![PRs Welcome](https://img.shields.io/badge/PRs-welcome-brightgreen.svg)](http://makeapullrequest.com)\n[![License: MIT](https://img.shields.io/badge/License-MIT-blue.svg)](https://opensource.org/licenses/MIT)\n\n## Introduction\n\nThis project is an example implementation of the [Open Microservice Specification](https://openmicroservices.org), a standard originally created at [Storyscript](https://storyscript.io) for building highly-portable \"microservices\" that expose the events, actions, and APIs inside containerized software.\n\n## Getting Started\n\nThe `oms` command-line interface allows you to interact with Open Microservices. If you're interested in creating an Open Microservice the CLI also helps validate, test, and debug your `oms.yml` implementation!\n\nSee the [oms-cli](https://github.com/microservices/oms) project to learn more!\n\n### Installation\n\n```\nnpm install -g @microservices/oms\n```\n\n## Usage\n\n### Open Microservices CLI Usage\n\nOnce you have the [oms-cli](https://github.com/microservices/oms) installed, you can run any of the following commands from within this project's root directory:\n\n#### Actions\n\n##### convert\n\n> Converts a document, using Pandoc.\n\n##### Action Arguments\n\n| Argument Name | Type     | Required | Default | Description              |\n| :------------ | :------- | :------- | :------ | :----------------------- |\n| doc           | `string` | `true`   | None    | No description provided. |\n| format        | `string` | `true`   | None    | No description provided. |\n| output        | `string` | `true`   | None    | No description provided. |\n\n```shell\noms run convert \\\n    -a doc='*****' \\\n    -a format='*****' \\\n    -a output='*****'\n```\n\n## Contributing\n\nAll suggestions in how to improve the specification and this guide are very welcome. Feel free share your thoughts in the Issue tracker, or even better, fork the repository to implement your own ideas and submit a pull request.\n\n[![Edit pandoc on CodeSandbox](https://codesandbox.io/static/img/play-codesandbox.svg)](https://codesandbox.io/s/github/oms-services/pandoc)\n\nThis project is guided by [Contributor Covenant](https://github.com/oms-services/.github/blob/master/CODE_OF_CONDUCT.md). Please read out full [Contribution Guidelines](https://github.com/oms-services/.github/blob/master/CONTRIBUTING.md).\n\n## Additional Resources\n\n- [Install the CLI](https://github.com/microservices/oms) - The OMS CLI helps developers create, test, validate, and build microservices.\n- [Example OMS Services](https://github.com/oms-services) - Examples of OMS-compliant services written in a variety of languages.\n- [Example Language Implementations](https://github.com/microservices) - Find tooling & language implementations in Node, Python, Scala, Java, Clojure.\n- [Storyscript Hub](https://hub.storyscript.io) - A public registry of OMS services.\n- [Community Chat](https://spectrum.chat/open-microservices) - Have ideas? Questions? Join us on Spectrum.\n",
        "service": {
            "alias": null,
            "description": "a Pandoc microservice.",
            "isCertified": false,
            "name": "pandoc",
            "owner": {
                "username": "kennethreitz"
            },
            "public": true,
            "topics": [
                "microservice",
                "omg",
                "pandoc"
            ]
        },
        "serviceUuid": "1dbf7f15-8a8b-4041-81d7-5e22e90e75a6",
        "state": "BETA"
    },
    {
        "configuration": {
            "actions": {
                "addPet": {
                    "arguments": {
                        "category": {
                            "in": "requestBody",
                            "properties": {
                                "id": {
                                    "required": false,
                                    "type": "int"
                                },
                                "name": {
                                    "required": false,
                                    "type": "string"
                                }
                            },
                            "required": false,
                            "type": "object"
                        },
                        "id": {
                            "in": "requestBody",
                            "required": false,
                            "type": "int"
                        },
                        "name": {
                            "in": "requestBody",
                            "required": false,
                            "type": "string"
                        },
                        "photoUrls": {
                            "in": "requestBody",
                            "required": false,
                            "type": "list"
                        },
                        "status": {
                            "help": "pet status in the store",
                            "in": "requestBody",
                            "required": false,
                            "type": "string"
                        },
                        "tags": {
                            "in": "requestBody",
                            "required": false,
                            "type": "list"
                        }
                    },
                    "help": "Add a new pet to the store",
                    "http": {
                        "contentType": "application/json",
                        "method": "post",
                        "url": "https://petstore.swagger.io/v2/pet"
                    },
                    "output": {
                        "help": "Auto generated 2xx.",
                        "type": null
                    }
                },
                "createUser": {
                    "arguments": {
                        "email": {
                            "in": "requestBody",
                            "required": false,
                            "type": "string"
                        },
                        "firstName": {
                            "in": "requestBody",
                            "required": false,
                            "type": "string"
                        },
                        "id": {
                            "in": "requestBody",
                            "required": false,
                            "type": "int"
                        },
                        "lastName": {
                            "in": "requestBody",
                            "required": false,
                            "type": "string"
                        },
                        "password": {
                            "in": "requestBody",
                            "required": false,
                            "type": "string"
                        },
                        "phone": {
                            "in": "requestBody",
                            "required": false,
                            "type": "string"
                        },
                        "userStatus": {
                            "help": "User Status",
                            "in": "requestBody",
                            "required": false,
                            "type": "int"
                        },
                        "username": {
                            "in": "requestBody",
                            "required": false,
                            "type": "string"
                        }
                    },
                    "help": "Create user",
                    "http": {
                        "contentType": "application/json",
                        "method": "post",
                        "url": "https://petstore.swagger.io/v2/user"
                    },
                    "output": {
                        "help": "successful operation",
                        "type": null
                    }
                },
                "createUsersWithArrayInput": {
                    "arguments": {
                        "root": {
                            "help": null,
                            "in": "requestBody",
                            "required": false,
                            "type": "list"
                        }
                    },
                    "help": "Creates list of users with given input array",
                    "http": {
                        "contentType": "application/json",
                        "method": "post",
                        "url": "https://petstore.swagger.io/v2/user/createWithArray"
                    },
                    "output": {
                        "help": "successful operation",
                        "type": null
                    }
                },
                "createUsersWithListInput": {
                    "arguments": {
                        "root": {
                            "help": null,
                            "in": "requestBody",
                            "required": false,
                            "type": "list"
                        }
                    },
                    "help": "Creates list of users with given input array",
                    "http": {
                        "contentType": "application/json",
                        "method": "post",
                        "url": "https://petstore.swagger.io/v2/user/createWithList"
                    },
                    "output": {
                        "help": "successful operation",
                        "type": null
                    }
                },
                "deleteOrder": {
                    "arguments": {
                        "orderId": {
                            "help": "ID of the order that needs to be deleted",
                            "in": "path",
                            "required": true,
                            "type": "int"
                        }
                    },
                    "help": "Delete purchase order by ID",
                    "http": {
                        "method": "delete",
                        "url": "https://petstore.swagger.io/v2/store/order/{orderId}"
                    },
                    "output": {
                        "help": "Auto generated 2xx.",
                        "type": null
                    }
                },
                "deletePet": {
                    "arguments": {
                        "api_key": {
                            "help": null,
                            "in": "header",
                            "required": false,
                            "type": "string"
                        },
                        "petId": {
                            "help": "Pet id to delete",
                            "in": "path",
                            "required": true,
                            "type": "int"
                        }
                    },
                    "help": "Deletes a pet",
                    "http": {
                        "method": "delete",
                        "url": "https://petstore.swagger.io/v2/pet/{petId}"
                    },
                    "output": {
                        "help": "Auto generated 2xx.",
                        "type": null
                    }
                },
                "deleteUser": {
                    "arguments": {
                        "username": {
                            "help": "The name that needs to be deleted",
                            "in": "path",
                            "required": true,
                            "type": "string"
                        }
                    },
                    "help": "Delete user",
                    "http": {
                        "method": "delete",
                        "url": "https://petstore.swagger.io/v2/user/{username}"
                    },
                    "output": {
                        "help": "Auto generated 2xx.",
                        "type": null
                    }
                },
                "findPetsByStatus": {
                    "arguments": {
                        "status": {
                            "help": "Status values that need to be considered for filter",
                            "in": "query",
                            "required": true,
                            "type": "list"
                        }
                    },
                    "help": "Finds Pets by status",
                    "http": {
                        "method": "get",
                        "url": "https://petstore.swagger.io/v2/pet/findByStatus"
                    },
                    "output": {
                        "contentType": "application/json",
                        "properties": {},
                        "type": "list"
                    }
                },
                "findPetsByTags": {
                    "arguments": {
                        "tags": {
                            "help": "Tags to filter by",
                            "in": "query",
                            "required": true,
                            "type": "list"
                        }
                    },
                    "help": "Finds Pets by tags",
                    "http": {
                        "method": "get",
                        "url": "https://petstore.swagger.io/v2/pet/findByTags"
                    },
                    "output": {
                        "contentType": "application/json",
                        "properties": {},
                        "type": "list"
                    }
                },
                "getInventory": {
                    "arguments": {},
                    "help": "Returns pet inventories by status",
                    "http": {
                        "method": "get",
                        "url": "https://petstore.swagger.io/v2/store/inventory"
                    },
                    "output": {
                        "contentType": "application/json",
                        "properties": {},
                        "type": "object"
                    }
                },
                "getOrderById": {
                    "arguments": {
                        "orderId": {
                            "help": "ID of pet that needs to be fetched",
                            "in": "path",
                            "required": true,
                            "type": "int"
                        }
                    },
                    "help": "Find purchase order by ID",
                    "http": {
                        "method": "get",
                        "url": "https://petstore.swagger.io/v2/store/order/{orderId}"
                    },
                    "output": {
                        "contentType": "application/json",
                        "properties": {
                            "complete": {
                                "required": false,
                                "type": "boolean"
                            },
                            "id": {
                                "required": false,
                                "type": "int"
                            },
                            "petId": {
                                "required": false,
                                "type": "int"
                            },
                            "quantity": {
                                "required": false,
                                "type": "int"
                            },
                            "shipDate": {
                                "required": false,
                                "type": "string"
                            },
                            "status": {
                                "help": "Order Status",
                                "required": false,
                                "type": "string"
                            }
                        },
                        "type": "object"
                    }
                },
                "getPetById": {
                    "arguments": {
                        "petId": {
                            "help": "ID of pet to return",
                            "in": "path",
                            "required": true,
                            "type": "int"
                        }
                    },
                    "help": "Find pet by ID",
                    "http": {
                        "method": "get",
                        "url": "https://petstore.swagger.io/v2/pet/{petId}"
                    },
                    "output": {
                        "contentType": "application/json",
                        "properties": {
                            "category": {
                                "properties": {
                                    "id": {
                                        "required": false,
                                        "type": "int"
                                    },
                                    "name": {
                                        "required": false,
                                        "type": "string"
                                    }
                                },
                                "required": false,
                                "type": "object"
                            },
                            "id": {
                                "required": false,
                                "type": "int"
                            },
                            "name": {
                                "required": false,
                                "type": "string"
                            },
                            "photoUrls": {
                                "required": false,
                                "type": "list"
                            },
                            "status": {
                                "help": "pet status in the store",
                                "required": false,
                                "type": "string"
                            },
                            "tags": {
                                "required": false,
                                "type": "list"
                            }
                        },
                        "type": "object"
                    }
                },
                "getUserByName": {
                    "arguments": {
                        "username": {
                            "help": "The name that needs to be fetched. Use user1 for testing. ",
                            "in": "path",
                            "required": true,
                            "type": "string"
                        }
                    },
                    "help": "Get user by user name",
                    "http": {
                        "method": "get",
                        "url": "https://petstore.swagger.io/v2/user/{username}"
                    },
                    "output": {
                        "contentType": "application/json",
                        "properties": {
                            "email": {
                                "required": false,
                                "type": "string"
                            },
                            "firstName": {
                                "required": false,
                                "type": "string"
                            },
                            "id": {
                                "required": false,
                                "type": "int"
                            },
                            "lastName": {
                                "required": false,
                                "type": "string"
                            },
                            "password": {
                                "required": false,
                                "type": "string"
                            },
                            "phone": {
                                "required": false,
                                "type": "string"
                            },
                            "userStatus": {
                                "help": "User Status",
                                "required": false,
                                "type": "int"
                            },
                            "username": {
                                "required": false,
                                "type": "string"
                            }
                        },
                        "type": "object"
                    }
                },
                "loginUser": {
                    "arguments": {
                        "password": {
                            "help": "The password for login in clear text",
                            "in": "query",
                            "required": true,
                            "type": "string"
                        },
                        "username": {
                            "help": "The user name for login",
                            "in": "query",
                            "required": true,
                            "type": "string"
                        }
                    },
                    "help": "Logs user into the system",
                    "http": {
                        "method": "get",
                        "url": "https://petstore.swagger.io/v2/user/login"
                    },
                    "output": {
                        "contentType": "application/json",
                        "properties": {},
                        "type": "string"
                    }
                },
                "logoutUser": {
                    "arguments": {},
                    "help": "Logs out current logged in user session",
                    "http": {
                        "method": "get",
                        "url": "https://petstore.swagger.io/v2/user/logout"
                    },
                    "output": {
                        "help": "successful operation",
                        "type": null
                    }
                },
                "placeOrder": {
                    "arguments": {
                        "complete": {
                            "in": "requestBody",
                            "required": false,
                            "type": "boolean"
                        },
                        "id": {
                            "in": "requestBody",
                            "required": false,
                            "type": "int"
                        },
                        "petId": {
                            "in": "requestBody",
                            "required": false,
                            "type": "int"
                        },
                        "quantity": {
                            "in": "requestBody",
                            "required": false,
                            "type": "int"
                        },
                        "shipDate": {
                            "in": "requestBody",
                            "required": false,
                            "type": "string"
                        },
                        "status": {
                            "help": "Order Status",
                            "in": "requestBody",
                            "required": false,
                            "type": "string"
                        }
                    },
                    "help": "Place an order for a pet",
                    "http": {
                        "contentType": "application/json",
                        "method": "post",
                        "url": "https://petstore.swagger.io/v2/store/order"
                    },
                    "output": {
                        "contentType": "application/json",
                        "properties": {
                            "complete": {
                                "required": false,
                                "type": "boolean"
                            },
                            "id": {
                                "required": false,
                                "type": "int"
                            },
                            "petId": {
                                "required": false,
                                "type": "int"
                            },
                            "quantity": {
                                "required": false,
                                "type": "int"
                            },
                            "shipDate": {
                                "required": false,
                                "type": "string"
                            },
                            "status": {
                                "help": "Order Status",
                                "required": false,
                                "type": "string"
                            }
                        },
                        "type": "object"
                    }
                },
                "updatePet": {
                    "arguments": {
                        "category": {
                            "in": "requestBody",
                            "properties": {
                                "id": {
                                    "required": false,
                                    "type": "int"
                                },
                                "name": {
                                    "required": false,
                                    "type": "string"
                                }
                            },
                            "required": false,
                            "type": "object"
                        },
                        "id": {
                            "in": "requestBody",
                            "required": false,
                            "type": "int"
                        },
                        "name": {
                            "in": "requestBody",
                            "required": false,
                            "type": "string"
                        },
                        "photoUrls": {
                            "in": "requestBody",
                            "required": false,
                            "type": "list"
                        },
                        "status": {
                            "help": "pet status in the store",
                            "in": "requestBody",
                            "required": false,
                            "type": "string"
                        },
                        "tags": {
                            "in": "requestBody",
                            "required": false,
                            "type": "list"
                        }
                    },
                    "help": "Update an existing pet",
                    "http": {
                        "contentType": "application/json",
                        "method": "put",
                        "url": "https://petstore.swagger.io/v2/pet"
                    },
                    "output": {
                        "help": "Auto generated 2xx.",
                        "type": null
                    }
                },
                "updatePetWithForm": {
                    "arguments": {
                        "name": {
                            "help": "Updated name of the pet",
                            "in": "requestBody",
                            "required": false,
                            "type": "string"
                        },
                        "petId": {
                            "help": "ID of pet that needs to be updated",
                            "in": "path",
                            "required": true,
                            "type": "int"
                        },
                        "status": {
                            "help": "Updated status of the pet",
                            "in": "requestBody",
                            "required": false,
                            "type": "string"
                        }
                    },
                    "help": "Updates a pet in the store with form data",
                    "http": {
                        "contentType": "application/x-www-form-urlencoded",
                        "method": "post",
                        "url": "https://petstore.swagger.io/v2/pet/{petId}"
                    },
                    "output": {
                        "help": "Auto generated 2xx.",
                        "type": null
                    }
                },
                "updateUser": {
                    "arguments": {
                        "email": {
                            "in": "requestBody",
                            "required": false,
                            "type": "string"
                        },
                        "firstName": {
                            "in": "requestBody",
                            "required": false,
                            "type": "string"
                        },
                        "id": {
                            "in": "requestBody",
                            "required": false,
                            "type": "int"
                        },
                        "lastName": {
                            "in": "requestBody",
                            "required": false,
                            "type": "string"
                        },
                        "password": {
                            "in": "requestBody",
                            "required": false,
                            "type": "string"
                        },
                        "phone": {
                            "in": "requestBody",
                            "required": false,
                            "type": "string"
                        },
                        "userStatus": {
                            "help": "User Status",
                            "in": "requestBody",
                            "required": false,
                            "type": "int"
                        },
                        "username": {
                            "in": "requestBody",
                            "required": false,
                            "type": "string"
                        }
                    },
                    "help": "Updated user",
                    "http": {
                        "contentType": "application/json",
                        "method": "put",
                        "url": "https://petstore.swagger.io/v2/user/{username}"
                    },
                    "output": {
                        "help": "Auto generated 2xx.",
                        "type": null
                    }
                },
                "uploadFile": {
                    "arguments": {
                        "petId": {
                            "help": "ID of pet to update",
                            "in": "path",
                            "required": true,
                            "type": "int"
                        },
                        "root": {
                            "help": null,
                            "in": "requestBody",
                            "required": false,
                            "type": "string"
                        }
                    },
                    "help": "uploads an image",
                    "http": {
                        "contentType": "application/octet-stream",
                        "method": "post",
                        "url": "https://petstore.swagger.io/v2/pet/{petId}/uploadImage"
                    },
                    "output": {
                        "contentType": "application/json",
                        "properties": {
                            "code": {
                                "required": false,
                                "type": "int"
                            },
                            "message": {
                                "required": false,
                                "type": "string"
                            },
                            "type": {
                                "required": false,
                                "type": "string"
                            }
                        },
                        "type": "object"
                    }
                }
            },
            "contact": {
                "email": "",
                "name": "",
                "url": ""
            },
            "fromOpenAPIVersion": "3.0.0",
            "hostedExternally": true,
            "info": {
                "description": "This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key `special-key` to test the authorization filters.",
                "license": {
                    "name": "Apache 2.0",
                    "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
                },
                "title": "Swagger Petstore",
                "version": "1.0.0"
            },
            "omg": 1,
            "source": "openapi"
        },
        "readme": null,
        "service": {
            "alias": null,
            "description": "",
            "isCertified": false,
            "name": "petstore",
            "owner": {
                "username": "williammartin"
            },
            "public": true,
            "topics": []
        },
        "serviceUuid": "e6e5d484-4b23-4e02-a954-d3ab62e77171",
        "state": "BETA"
    },
    {
        "configuration": {
            "actions": {
                "createTable": {
                    "arguments": {
                        "columns": {
                            "help": "A map of the to be created columns with their respective types\n",
                            "in": "requestBody",
                            "required": true,
                            "type": "map"
                        },
                        "table": {
                            "help": "The table to create",
                            "in": "requestBody",
                            "required": true,
                            "type": "string"
                        }
                    },
                    "help": "Create a table",
                    "http": {
                        "contentType": "application/json",
                        "method": "post",
                        "path": "/tables/create",
                        "port": 8000
                    },
                    "output": {
                        "contentType": "application/json",
                        "type": "map"
                    }
                },
                "delete": {
                    "arguments": {
                        "table": {
                            "help": "The table to delete entries from",
                            "in": "requestBody",
                            "required": true,
                            "type": "string"
                        },
                        "where": {
                            "help": "A query string of the parameters to filter on, e.g.\n`{'columnName1': 'value2', 'columnName2': 'value2'}`\nUse `{'$or': {cond1, cond2}} for `OR` chains.\nUse e.g. `{'columName': {'$gt': 20}}} for more advanced comparisons.\n",
                            "in": "requestBody",
                            "required": false,
                            "type": "any"
                        }
                    },
                    "help": "Delete entries from a table",
                    "http": {
                        "contentType": "application/json",
                        "method": "post",
                        "path": "/delete",
                        "port": 8000
                    },
                    "output": {
                        "contentType": "application/json",
                        "type": "map"
                    }
                },
                "dropTable": {
                    "arguments": {
                        "table": {
                            "help": "The table to drop",
                            "in": "requestBody",
                            "required": true,
                            "type": "string"
                        }
                    },
                    "help": "Drop a table",
                    "http": {
                        "contentType": "application/json",
                        "method": "post",
                        "path": "/tables/drop",
                        "port": 8000
                    },
                    "output": {
                        "contentType": "application/json",
                        "type": "map"
                    }
                },
                "exec": {
                    "arguments": {
                        "data": {
                            "help": "If your query contains named parameters, such as\nSELECT * from my_table where name=%(username)s\nthen specify \"data\" as {\"name\": \"foo\"}.\n",
                            "in": "requestBody",
                            "required": false,
                            "type": "map"
                        },
                        "query": {
                            "help": "The query",
                            "in": "requestBody",
                            "required": true,
                            "type": "string"
                        }
                    },
                    "help": "Run a SELECT statement",
                    "http": {
                        "contentType": "application/json",
                        "method": "post",
                        "path": "/execute",
                        "port": 8000
                    },
                    "output": {
                        "contentType": "application/json",
                        "type": "map"
                    }
                },
                "insert": {
                    "arguments": {
                        "table": {
                            "help": "The table to insert entries into",
                            "in": "requestBody",
                            "required": true,
                            "type": "string"
                        },
                        "values": {
                            "help": "A map or a list of maps with the values to insert into the table.\n",
                            "in": "requestBody",
                            "required": true,
                            "type": "any"
                        }
                    },
                    "help": "Insert one or more entries into a table",
                    "http": {
                        "contentType": "application/json",
                        "method": "post",
                        "path": "/insert",
                        "port": 8000
                    },
                    "output": {
                        "contentType": "application/json",
                        "type": "map"
                    }
                },
                "select": {
                    "arguments": {
                        "table": {
                            "help": "The table to select entries from",
                            "in": "requestBody",
                            "required": true,
                            "type": "string"
                        },
                        "where": {
                            "help": "A query string of the parameters to filter on, e.g.\n`{'columnName1': 'value2', 'columnName2': 'value2'}`\nUse `{'$or': {cond1, cond2}} for `OR` chains.\nUse e.g. `{'columName': {'$gt': 20}}} for more advanced comparisons.\n",
                            "in": "requestBody",
                            "required": true,
                            "type": "any"
                        }
                    },
                    "help": "Select entries from a table",
                    "http": {
                        "contentType": "application/json",
                        "method": "post",
                        "path": "/select",
                        "port": 8000
                    },
                    "output": {
                        "contentType": "application/json",
                        "type": "map"
                    }
                },
                "update": {
                    "arguments": {
                        "table": {
                            "help": "The table to update entries in",
                            "in": "requestBody",
                            "required": true,
                            "type": "string"
                        },
                        "values": {
                            "help": "A map of values to update.\n",
                            "in": "requestBody",
                            "required": true,
                            "type": "map"
                        },
                        "where": {
                            "help": "A query string of the parameters to filter on, e.g.\n`{'columnName1': 'value2', 'columnName2': 'value2'}`\nUse `{'$or': {cond1, cond2}} for `OR` chains.\nUse e.g. `{'columName': {'$gt': 20}}} for more advanced comparisons.\n",
                            "in": "requestBody",
                            "required": false,
                            "type": "any"
                        }
                    },
                    "help": "Update entries in a table",
                    "http": {
                        "contentType": "application/json",
                        "method": "post",
                        "path": "/update",
                        "port": 8000
                    },
                    "output": {
                        "contentType": "application/json",
                        "type": "map"
                    }
                }
            },
            "environment": {
                "MYSQL_DATABASE": {
                    "help": "The name of the database on the MySQL server",
                    "required": true,
                    "type": "string"
                },
                "MYSQL_HOST": {
                    "help": "The hostname of the MySQL server to connect to",
                    "required": true,
                    "type": "string"
                },
                "MYSQL_PASSWORD": {
                    "help": "The username for connecting with the MySQL database",
                    "required": true,
                    "type": "string"
                },
                "MYSQL_PORT": {
                    "help": "The port of the MySQL server to connect to (default:3306)",
                    "type": "string"
                },
                "MYSQL_USER": {
                    "help": "The username for connecting with the MySQL database",
                    "required": true,
                    "type": "string"
                }
            },
            "info": {
                "contact": {
                    "email": "core@openmicroservices.org",
                    "name": "Open Microservices",
                    "url": "https://openmicroservices.org"
                },
                "description": "This is a mysql service",
                "title": "MySQL",
                "version": "1.0.0"
            },
            "lifecycle": {
                "startup": {
                    "command": [
                        "python",
                        "/app/app.py"
                    ]
                }
            },
            "oms": 1
        },
        "readme": "# _MySQL_ Open Microservice\n\n> Interact with a MySQL database.\n\n[![Open Microservice Specification Version](https://img.shields.io/badge/Open%20Microservice-1.0-477bf3.svg)](https://openmicroservices.org)\n[![Open Microservices Spectrum Chat](https://withspectrum.github.io/badge/badge.svg)](https://spectrum.chat/open-microservices)\n[![Open Microservices Code of Conduct](https://img.shields.io/badge/Contributor%20Covenant-v1.4%20adopted-ff69b4.svg)](https://github.com/oms-services/.github/blob/master/CODE_OF_CONDUCT.md)\n[![Open Microservices Commitzen](https://img.shields.io/badge/commitizen-friendly-brightgreen.svg)](http://commitizen.github.io/cz-cli/)\n[![PRs Welcome](https://img.shields.io/badge/PRs-welcome-brightgreen.svg)](http://makeapullrequest.com)\n[![License: MIT](https://img.shields.io/badge/License-MIT-blue.svg)](https://opensource.org/licenses/MIT)\n\n## Direct usage in [Storyscript](https://storyscript.io/):\n\n### Create table\n\n```coffee\nmysql createTable table: 'books' columns: {\n  'id': 'serial primary key',\n  'title': 'varchar(100)'\n}\n```\n\n### Insert an entry\n\n```coffee\nmysql insert table: 'books' values: {'title': 'Ulysses'}\n# result: [1, 'Ulysses']\n```\n\n### Insert multiple entries\n\n```coffee\nmysql insert table: 'books' values: [{'title': 'Moby Dick'}, {'title': 'War and Peace'}]\n# result: [[2, 'Ulysses'], [3, 'War and Peace']]\n```\n\n### Select entries\n\n- `$and` and `$or` can be used to combine queries\n- `$lt`, `$lte`, `$gt`, `$gte` and `$eq` can be used as comparison operators\n- if no comparison operators is provided, the query will match on equality\n\n```coffee\nmysql select table: 'books' where: {'title': 'Moby Dick'}\n# result: [[2, 'Moby Dick']\n```\n\n```coffee\nmysql select table: 'books' where: {'$or': {title: 'Moby Dick', 'id': {'$lt': 2}}}\n# result: [[1, 'Ulysses'], [2, 'Moby Dick']]\n```\n\n### Update entries\n\n```coffee\nmysql update table: 'books' values: {'title': 'UPDATED'} where: {'id': {'$gt': 2}}\n# result: [[3, 'UPDATED']]\n```\n\nThe where query is optional, but without it _all_ columns will be updated:\n\n```coffee\nmysql update table: 'books' values: {'title': 'UPDATED'}\n# result: [\n#     [1, 'Ulysses'],\n#     [2, 'Ulysses'],\n#     [3, 'War and Peace']\n# ]\n```\n\n### Delete entries\n\n`delete` uses a `where` select query and will return the deleted columns:\n\n```coffee\nmysql delete table: 'books' where: {'title': 'Moby Dick'}\n# result: [[2, 'Moby Dick']]\n```\n\nThe where query is optional, but without it _all_ columns will be deleted.\n\n### Drop table\n\nAn entire table can be dropped with `drop_table`:\n\n```coffee\nmysql dropTable table: 'books'\n```\n\n### Execute\n\n```coffee\nresult = mysql exec query: 'select * from my_table where name=%(username)s' data: {'username': 'jill'}\n# result is an array, with records as JSON objects inside it.\n```\n\nCurious to [learn more](https://docs.storyscript.io/)?\n\n\u2728\ud83c\udf70\u2728\n\n## Usage with [OMS CLI](https://www.npmjs.com/package/@microservices/oms)\n\n### Create table\n\n```shell\n$ oms run createTable -a table=<TABLE> -a columns=<MAP_OF_COLUMNS> -e MYSQL_HOST=<MYSQL_HOST> -e MYSQL_USER=<MYSQL_USER> -e MYSQL_PASSWORD=<MYSQL_PASSWORD> -e MYSQL_DATABASE=<MYSQL_DATABASE> -e MYSQL_PORT=<MYSQL_PORT>\n```\n\n### Insert an entry\n\n```shell\n$ oms run insert -a table=<TABLE> -a values=<LIST_OF_MAP_VALUES> -e MYSQL_HOST=<MYSQL_HOST> -e MYSQL_USER=<MYSQL_USER> -e MYSQL_PASSWORD=<MYSQL_PASSWORD> -e MYSQL_DATABASE=<MYSQL_DATABASE> -e MYSQL_PORT=<MYSQL_PORT>\n```\n\n### Select entries\n\n```shell\n$ oms run select -a table=<TABLE> -a where=<PARAMETERS_TO_FILTER> -e MYSQL_HOST=<MYSQL_HOST> -e MYSQL_USER=<MYSQL_USER> -e MYSQL_PASSWORD=<MYSQL_PASSWORD> -e MYSQL_DATABASE=<MYSQL_DATABASE> -e MYSQL_PORT=<MYSQL_PORT>\n```\n\n### Update entries\n\n```shell\n$ oms run update -a table=<TABLE> -a values=<LIST_OF_MAP_VALUES> -a where=<PARAMETERS_TO_FILTER> -e MYSQL_HOST=<MYSQL_HOST> -e MYSQL_USER=<MYSQL_USER> -e MYSQL_PASSWORD=<MYSQL_PASSWORD> -e MYSQL_DATABASE=<MYSQL_DATABASE> -e MYSQL_PORT=<MYSQL_PORT>\n```\n\n### Delete entries\n\n```shell\n$ oms run delete -a table=<TABLE> -a where=<PARAMETERS_TO_FILTER> -e MYSQL_HOST=<MYSQL_HOST> -e MYSQL_USER=<MYSQL_USER> -e MYSQL_PASSWORD=<MYSQL_PASSWORD> -e MYSQL_DATABASE=<MYSQL_DATABASE> -e MYSQL_PORT=<MYSQL_PORT>\n```\n\n### Drop table\n\n```shell\n$ oms run dropTable -a table=<TABLE> -e MYSQL_HOST=<MYSQL_HOST> -e MYSQL_USER=<MYSQL_USER> -e MYSQL_PASSWORD=<MYSQL_PASSWORD> -e MYSQL_DATABASE=<MYSQL_DATABASE> -e MYSQL_PORT=<MYSQL_PORT>\n```\n\n### Execute\n\n```shell\n$ oms run exec -a query=<QUERY> -a data=<MAP_DATA> -e MYSQL_HOST=<MYSQL_HOST> -e MYSQL_USER=<MYSQL_USER> -e MYSQL_PASSWORD=<MYSQL_PASSWORD> -e MYSQL_DATABASE=<MYSQL_DATABASE> -e MYSQL_PORT=<MYSQL_PORT>\n```\n\n## License\n\n[MIT License](https://github.com/oms-services/mysql/blob/master/LICENSE).\n",
        "service": {
            "alias": "mysql",
            "description": "Json mysql access in Asyncy",
            "isCertified": false,
            "name": "mysql",
            "owner": {
                "username": "oms-services"
            },
            "public": true,
            "topics": [
                "mysql",
                "open-microservice",
                "oms"
            ]
        },
        "serviceUuid": "558feaad-ca6f-46db-8ea0-339194a08a88",
        "state": "BETA"
    },
    {
        "configuration": {
            "actions": {
                "createTable": {
                    "arguments": {
                        "columns": {
                            "help": "A map of the to be created columns with their respective types\n",
                            "in": "requestBody",
                            "required": true,
                            "type": "map"
                        },
                        "table": {
                            "help": "The table to create",
                            "in": "requestBody",
                            "required": true,
                            "type": "string"
                        }
                    },
                    "help": "Create a table",
                    "http": {
                        "contentType": "application/json",
                        "method": "post",
                        "path": "/tables/create",
                        "port": 8000
                    },
                    "output": {
                        "contentType": "application/json",
                        "type": "map"
                    }
                },
                "delete": {
                    "arguments": {
                        "table": {
                            "help": "The table to delete entries from",
                            "in": "requestBody",
                            "required": true,
                            "type": "string"
                        },
                        "where": {
                            "help": "A query string of the parameters to filter on, e.g.\n`{'columnName1': 'value2', 'columnName2': 'value2'}`\nUse `{'$or': {cond1, cond2}} for `OR` chains.\nUse e.g. `{'columName': {'$gt': 20}}} for more advanced comparisons.\n",
                            "in": "requestBody",
                            "required": false,
                            "type": "any"
                        }
                    },
                    "help": "Delete entries from a table",
                    "http": {
                        "contentType": "application/json",
                        "method": "post",
                        "path": "/delete",
                        "port": 8000
                    },
                    "output": {
                        "contentType": "application/json",
                        "type": "map"
                    }
                },
                "dropTable": {
                    "arguments": {
                        "table": {
                            "help": "The table to drop",
                            "in": "requestBody",
                            "required": true,
                            "type": "string"
                        }
                    },
                    "help": "Drop a table",
                    "http": {
                        "contentType": "application/json",
                        "method": "post",
                        "path": "/tables/drop",
                        "port": 8000
                    },
                    "output": {
                        "contentType": "application/json",
                        "type": "map"
                    }
                },
                "exec": {
                    "arguments": {
                        "data": {
                            "help": "If your query contains named parameters, such as\nSELECT * from my_table where name=%(username)s\nthen specify \"data\" as {\"name\": \"foo\"}.\n",
                            "in": "requestBody",
                            "required": false,
                            "type": "map"
                        },
                        "query": {
                            "help": "The query",
                            "in": "requestBody",
                            "required": true,
                            "type": "string"
                        }
                    },
                    "help": "Run a SELECT statement",
                    "http": {
                        "contentType": "application/json",
                        "method": "post",
                        "path": "/execute",
                        "port": 8000
                    },
                    "output": {
                        "contentType": "application/json",
                        "type": "map"
                    }
                },
                "insert": {
                    "arguments": {
                        "table": {
                            "help": "The table to insert entries into",
                            "in": "requestBody",
                            "required": true,
                            "type": "string"
                        },
                        "values": {
                            "help": "A map or a list of maps with the values to insert into the table.\n",
                            "in": "requestBody",
                            "required": true,
                            "type": "any"
                        }
                    },
                    "help": "Insert one or more entries into a table",
                    "http": {
                        "contentType": "application/json",
                        "method": "post",
                        "path": "/insert",
                        "port": 8000
                    },
                    "output": {
                        "contentType": "application/json",
                        "type": "map"
                    }
                },
                "select": {
                    "arguments": {
                        "table": {
                            "help": "The table to select entries from",
                            "in": "requestBody",
                            "required": true,
                            "type": "string"
                        },
                        "where": {
                            "help": "A query string of the parameters to filter on, e.g.\n`{'columnName1': 'value2', 'columnName2': 'value2'}`\nUse `{'$or': {cond1, cond2}} for `OR` chains.\nUse e.g. `{'columName': {'$gt': 20}}} for more advanced comparisons.\n",
                            "in": "requestBody",
                            "required": true,
                            "type": "any"
                        }
                    },
                    "help": "Select entries from a table",
                    "http": {
                        "contentType": "application/json",
                        "method": "post",
                        "path": "/select",
                        "port": 8000
                    },
                    "output": {
                        "contentType": "application/json",
                        "type": "map"
                    }
                },
                "update": {
                    "arguments": {
                        "table": {
                            "help": "The table to update entries in",
                            "in": "requestBody",
                            "required": true,
                            "type": "string"
                        },
                        "values": {
                            "help": "A map of values to update.\n",
                            "in": "requestBody",
                            "required": true,
                            "type": "map"
                        },
                        "where": {
                            "help": "A query string of the parameters to filter on, e.g.\n`{'columnName1': 'value2', 'columnName2': 'value2'}`\nUse `{'$or': {cond1, cond2}} for `OR` chains.\nUse e.g. `{'columName': {'$gt': 20}}} for more advanced comparisons.\n",
                            "in": "requestBody",
                            "required": false,
                            "type": "any"
                        }
                    },
                    "help": "Update entries in a table",
                    "http": {
                        "contentType": "application/json",
                        "method": "post",
                        "path": "/update",
                        "port": 8000
                    },
                    "output": {
                        "contentType": "application/json",
                        "type": "map"
                    }
                }
            },
            "environment": {
                "MYSQL_DATABASE": {
                    "help": "The name of the database on the MySQL server",
                    "required": true,
                    "type": "string"
                },
                "MYSQL_HOST": {
                    "help": "The hostname of the MySQL server to connect to",
                    "required": true,
                    "type": "string"
                },
                "MYSQL_PASSWORD": {
                    "help": "The username for connecting with the MySQL database",
                    "required": true,
                    "type": "string"
                },
                "MYSQL_PORT": {
                    "help": "The port of the MySQL server to connect to (default:3306)",
                    "type": "string"
                },
                "MYSQL_USER": {
                    "help": "The username for connecting with the MySQL database",
                    "required": true,
                    "type": "string"
                }
            },
            "info": {
                "contact": {
                    "email": "core@openmicroservices.org",
                    "name": "Open Microservices",
                    "url": "https://openmicroservices.org"
                },
                "description": "This is a mysql service",
                "title": "MySQL",
                "version": "1.0.0"
            },
            "lifecycle": {
                "startup": {
                    "command": [
                        "python",
                        "/app/app.py"
                    ]
                }
            },
            "oms": 1
        },
        "readme": "# _MySQL_ Open Microservice\n\n> Interact with a MySQL database.\n\n[![Open Microservice Specification Version](https://img.shields.io/badge/Open%20Microservice-1.0-477bf3.svg)](https://openmicroservices.org)\n[![Open Microservices Spectrum Chat](https://withspectrum.github.io/badge/badge.svg)](https://spectrum.chat/open-microservices)\n[![Open Microservices Code of Conduct](https://img.shields.io/badge/Contributor%20Covenant-v1.4%20adopted-ff69b4.svg)](https://github.com/oms-services/.github/blob/master/CODE_OF_CONDUCT.md)\n[![Open Microservices Commitzen](https://img.shields.io/badge/commitizen-friendly-brightgreen.svg)](http://commitizen.github.io/cz-cli/)\n[![PRs Welcome](https://img.shields.io/badge/PRs-welcome-brightgreen.svg)](http://makeapullrequest.com)\n[![License: MIT](https://img.shields.io/badge/License-MIT-blue.svg)](https://opensource.org/licenses/MIT)\n\n## Direct usage in [Storyscript](https://storyscript.io/):\n\n### Create table\n\n```coffee\nmysql createTable table: 'books' columns: {\n  'id': 'serial primary key',\n  'title': 'varchar(100)'\n}\n```\n\n### Insert an entry\n\n```coffee\nmysql insert table: 'books' values: {'title': 'Ulysses'}\n# result: [1, 'Ulysses']\n```\n\n### Insert multiple entries\n\n```coffee\nmysql insert table: 'books' values: [{'title': 'Moby Dick'}, {'title': 'War and Peace'}]\n# result: [[2, 'Ulysses'], [3, 'War and Peace']]\n```\n\n### Select entries\n\n- `$and` and `$or` can be used to combine queries\n- `$lt`, `$lte`, `$gt`, `$gte` and `$eq` can be used as comparison operators\n- if no comparison operators is provided, the query will match on equality\n\n```coffee\nmysql select table: 'books' where: {'title': 'Moby Dick'}\n# result: [[2, 'Moby Dick']\n```\n\n```coffee\nmysql select table: 'books' where: {'$or': {title: 'Moby Dick', 'id': {'$lt': 2}}}\n# result: [[1, 'Ulysses'], [2, 'Moby Dick']]\n```\n\n### Update entries\n\n```coffee\nmysql update table: 'books' values: {'title': 'UPDATED'} where: {'id': {'$gt': 2}}\n# result: [[3, 'UPDATED']]\n```\n\nThe where query is optional, but without it _all_ columns will be updated:\n\n```coffee\nmysql update table: 'books' values: {'title': 'UPDATED'}\n# result: [\n#     [1, 'Ulysses'],\n#     [2, 'Ulysses'],\n#     [3, 'War and Peace']\n# ]\n```\n\n### Delete entries\n\n`delete` uses a `where` select query and will return the deleted columns:\n\n```coffee\nmysql delete table: 'books' where: {'title': 'Moby Dick'}\n# result: [[2, 'Moby Dick']]\n```\n\nThe where query is optional, but without it _all_ columns will be deleted.\n\n### Drop table\n\nAn entire table can be dropped with `drop_table`:\n\n```coffee\nmysql dropTable table: 'books'\n```\n\n### Execute\n\n```coffee\nresult = mysql exec query: 'select * from my_table where name=%(username)s' data: {'username': 'jill'}\n# result is an array, with records as JSON objects inside it.\n```\n\nCurious to [learn more](https://docs.storyscript.io/)?\n\n\u2728\ud83c\udf70\u2728\n\n## Usage with [OMS CLI](https://www.npmjs.com/package/@microservices/oms)\n\n### Create table\n\n```shell\n$ oms run createTable -a table=<TABLE> -a columns=<MAP_OF_COLUMNS> -e MYSQL_HOST=<MYSQL_HOST> -e MYSQL_USER=<MYSQL_USER> -e MYSQL_PASSWORD=<MYSQL_PASSWORD> -e MYSQL_DATABASE=<MYSQL_DATABASE> -e MYSQL_PORT=<MYSQL_PORT>\n```\n\n### Insert an entry\n\n```shell\n$ oms run insert -a table=<TABLE> -a values=<LIST_OF_MAP_VALUES> -e MYSQL_HOST=<MYSQL_HOST> -e MYSQL_USER=<MYSQL_USER> -e MYSQL_PASSWORD=<MYSQL_PASSWORD> -e MYSQL_DATABASE=<MYSQL_DATABASE> -e MYSQL_PORT=<MYSQL_PORT>\n```\n\n### Select entries\n\n```shell\n$ oms run select -a table=<TABLE> -a where=<PARAMETERS_TO_FILTER> -e MYSQL_HOST=<MYSQL_HOST> -e MYSQL_USER=<MYSQL_USER> -e MYSQL_PASSWORD=<MYSQL_PASSWORD> -e MYSQL_DATABASE=<MYSQL_DATABASE> -e MYSQL_PORT=<MYSQL_PORT>\n```\n\n### Update entries\n\n```shell\n$ oms run update -a table=<TABLE> -a values=<LIST_OF_MAP_VALUES> -a where=<PARAMETERS_TO_FILTER> -e MYSQL_HOST=<MYSQL_HOST> -e MYSQL_USER=<MYSQL_USER> -e MYSQL_PASSWORD=<MYSQL_PASSWORD> -e MYSQL_DATABASE=<MYSQL_DATABASE> -e MYSQL_PORT=<MYSQL_PORT>\n```\n\n### Delete entries\n\n```shell\n$ oms run delete -a table=<TABLE> -a where=<PARAMETERS_TO_FILTER> -e MYSQL_HOST=<MYSQL_HOST> -e MYSQL_USER=<MYSQL_USER> -e MYSQL_PASSWORD=<MYSQL_PASSWORD> -e MYSQL_DATABASE=<MYSQL_DATABASE> -e MYSQL_PORT=<MYSQL_PORT>\n```\n\n### Drop table\n\n```shell\n$ oms run dropTable -a table=<TABLE> -e MYSQL_HOST=<MYSQL_HOST> -e MYSQL_USER=<MYSQL_USER> -e MYSQL_PASSWORD=<MYSQL_PASSWORD> -e MYSQL_DATABASE=<MYSQL_DATABASE> -e MYSQL_PORT=<MYSQL_PORT>\n```\n\n### Execute\n\n```shell\n$ oms run exec -a query=<QUERY> -a data=<MAP_DATA> -e MYSQL_HOST=<MYSQL_HOST> -e MYSQL_USER=<MYSQL_USER> -e MYSQL_PASSWORD=<MYSQL_PASSWORD> -e MYSQL_DATABASE=<MYSQL_DATABASE> -e MYSQL_PORT=<MYSQL_PORT>\n```\n\n## License\n\n[MIT License](https://github.com/oms-services/mysql/blob/master/LICENSE).\n",
        "service": {
            "alias": "mysql",
            "description": "Json mysql access in Asyncy",
            "isCertified": false,
            "name": "mysql",
            "owner": {
                "username": "oms-services"
            },
            "public": true,
            "topics": [
                "mysql",
                "open-microservice",
                "oms"
            ]
        },
        "serviceUuid": "558feaad-ca6f-46db-8ea0-339194a08a88",
        "state": "BETA"
    },
    {
        "configuration": {
            "actions": {
                "sign": {
                    "arguments": {
                        "data": {
                            "help": "The content to sign",
                            "in": "requestBody",
                            "required": true,
                            "type": "any"
                        },
                        "secret": {
                            "help": "JWT secret key to be used for signing",
                            "in": "requestBody",
                            "required": true,
                            "type": "string"
                        }
                    },
                    "help": "sign data with a secret",
                    "http": {
                        "contentType": "application/json",
                        "method": "post",
                        "path": "/sign",
                        "port": 5000
                    },
                    "output": {
                        "type": "string"
                    }
                },
                "verify": {
                    "arguments": {
                        "secret": {
                            "help": "JWT secret key used to sign the provided token",
                            "in": "requestBody",
                            "type": "string"
                        },
                        "token": {
                            "help": "The token to verify",
                            "in": "requestBody",
                            "type": "string"
                        }
                    },
                    "help": "Verify a JWT token and return the decoded value",
                    "http": {
                        "contentType": "application/json",
                        "method": "post",
                        "path": "/verify",
                        "port": 5000
                    },
                    "output": {
                        "type": "string"
                    }
                }
            },
            "health": {
                "http": {
                    "path": "/health",
                    "port": 5000
                }
            },
            "info": {
                "contact": {
                    "email": "hello@asyncy.com",
                    "name": "Asyncy",
                    "url": "https://github.com/Asyncy"
                },
                "description": "An service to build and validate JWT tokens",
                "license": {
                    "name": "MIT",
                    "url": "https://opensource.org/licenses/MIT"
                },
                "title": "JWT utils",
                "version": "1.0.0"
            },
            "lifecycle": {
                "startup": {
                    "command": [
                        "node",
                        "index.js"
                    ]
                }
            },
            "omg": 1
        },
        "readme": "# jwt\nAn OMG service to build and validate JWT tokens\n\n## Usage\n\n### sign\n\n#### storyscript\n```coffee\n# Storyscript\nencoded = jwt sign data:\"hello world\" secret:\"abc\" expiresIn:\"2h\"\n```\n#### encoded value\n```\neyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJkYXRhIjoiaGVsbG8gd29ybGQiLCJpYXQiOjE1NDM5MjMyMTAsImV4cCI6MTU0MzkzMDQxMH0.FCsstg1m01goffz0cFYxZIUe0uPybUAqzGRnZPJgGBw\n```\n\n### verify\n\n#### storyscript\n```coffee\n# Storyscript\ndecoded = jwt verify token:\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJkYXRhIjoiaGVsbG8gd29ybGQiLCJpYXQiOjE1NDM5MjMyMTAsImV4cCI6MTU0MzkzMDQxMH0.FCsstg1m01goffz0cFYxZIUe0uPybUAqzGRnZPJgGBw\" secret: \"abc\"\n```\n#### decoded value\n```json\n{\n  \"data\": \"hello world\",\n  \"iat\": 1543923210,\n  \"exp\": 1543930410\n}\n```\n",
        "service": {
            "alias": null,
            "description": "An OMG service to build and validate JWT claims",
            "isCertified": false,
            "name": "jwt",
            "owner": {
                "username": "jean"
            },
            "public": true,
            "topics": [
                "jwt",
                "microservice",
                "omg"
            ]
        },
        "serviceUuid": "48ecbc8b-f9ca-4140-b5a5-6558d3361218",
        "state": "BETA"
    },
    {
        "configuration": {
            "actions": {
                "get": {
                    "help": "Generate a UUID v4 like 38788d28-6526-45c5-acf9-bb179160c7d7\n",
                    "http": {
                        "contentType": "application/json",
                        "method": "get",
                        "path": "/generate",
                        "port": 8000
                    },
                    "output": {
                        "type": "string"
                    }
                }
            },
            "info": {
                "contact": {
                    "email": "core@openmicroservices.org",
                    "name": "Open Microservices",
                    "url": "https://openmicroservices.org"
                },
                "description": "This is a UUID service",
                "title": "UUID",
                "version": "2.0.0"
            },
            "lifecycle": {
                "startup": {
                    "command": [
                        "python",
                        "/app/app.py"
                    ]
                }
            },
            "oms": 1
        },
        "readme": "# _UUID_ Open Microservice\n\n> This is a UUID service\n\n[![Open Microservice Specification Version](https://img.shields.io/badge/Open%20Microservice-1.0-477bf3.svg)](https://openmicroservices.org) [![Open Microservices Spectrum Chat](https://withspectrum.github.io/badge/badge.svg)](https://spectrum.chat/open-microservices) [![Open Microservices Code of Conduct](https://img.shields.io/badge/Contributor%20Covenant-v1.4%20adopted-ff69b4.svg)](https://github.com/oms-services/.github/blob/master/CODE_OF_CONDUCT.md) [![Open Microservices Commitzen](https://img.shields.io/badge/commitizen-friendly-brightgreen.svg)](http://commitizen.github.io/cz-cli/) [![PRs Welcome](https://img.shields.io/badge/PRs-welcome-brightgreen.svg)](http://makeapullrequest.com)\n\n## Introduction\n\nThis project is an example implementation of the [Open Microservice Specification](https://openmicroservices.org), a standard originally created at [Storyscript](https://storyscript.io) for building highly-portable \"microservices\" that expose the events, actions, and APIs inside containerized software.\n\n## Getting Started\n\nThe `oms` command-line interface allows you to interact with Open Microservices. If you're interested in creating an Open Microservice the CLI also helps validate, test, and debug your `oms.yml` implementation!\n\nSee the [oms-cli](https://github.com/microservices/oms) project to learn more!\n\n### Installation\n\n```\nnpm install -g @microservices/oms\n```\n\n## Usage\n\n### Open Microservices CLI Usage\n\nOnce you have the [oms-cli](https://github.com/microservices/oms) installed, you can run any of the following commands from within this project's root directory:\n\n#### Actions\n\n##### generate\n\n> Generate a UUID v4 like 38788d28-6526-45c5-acf9-bb179160c7d7\n\n```shell\noms run generate\n```\n\n## Contributing\n\nAll suggestions in how to improve the specification and this guide are very welcome. Feel free share your thoughts in the Issue tracker, or even better, fork the repository to implement your own ideas and submit a pull request.\n\n[![Edit uuid on CodeSandbox](https://codesandbox.io/static/img/play-codesandbox.svg)](https://codesandbox.io/s/github/oms-services/uuid)\n\nThis project is guided by [Contributor Covenant](https://github.com/oms-services/.github/blob/master/CODE_OF_CONDUCT.md). Please read out full [Contribution Guidelines](https://github.com/oms-services/.github/blob/master/CONTRIBUTING.md).\n\n## Additional Resources\n\n- [Install the CLI](https://github.com/microservices/oms) - The OMS CLI helps developers create, test, validate, and build microservices.\n- [Example OMS Services](https://github.com/oms-services) - Examples of OMS-compliant services written in a variety of languages.\n- [Example Language Implementations](https://github.com/microservices) - Find tooling & language implementations in Node, Python, Scala, Java, Clojure.\n- [Storyscript Hub](https://hub.storyscript.io) - A public registry of OMS services.\n- [Community Chat](https://spectrum.chat/open-microservices) - Have ideas? Questions? Join us on Spectrum.\n",
        "service": {
            "alias": null,
            "description": "\ud83c\udd94 Open Microservice UUID generator.",
            "isCertified": false,
            "name": "uuid",
            "owner": {
                "username": "anukul"
            },
            "public": true,
            "topics": []
        },
        "serviceUuid": "212a4d92-597b-434b-83df-b16edc79ca63",
        "state": "BETA"
    },
    {
        "configuration": {
            "actions": {
                "city": {
                    "arguments": {
                        "q": {
                            "help": "The city you want",
                            "in": "query",
                            "type": "string"
                        }
                    },
                    "help": "Gets city weather",
                    "http": {
                        "method": "get",
                        "path": "/city",
                        "port": 5000
                    },
                    "output": {
                        "type": "string"
                    }
                },
                "coords": {
                    "arguments": {
                        "lat": {
                            "help": "The lattitude you want",
                            "in": "query",
                            "type": "string"
                        },
                        "long": {
                            "help": "The longitude you want",
                            "in": "query",
                            "type": "string"
                        }
                    },
                    "help": "Gets city weather",
                    "http": {
                        "method": "get",
                        "path": "/coords",
                        "port": 5000
                    },
                    "output": {
                        "type": "string"
                    }
                }
            },
            "info": {
                "contact": {
                    "email": "hello@asyncy.com",
                    "name": "Asyncy",
                    "url": "https://asyncy.com"
                },
                "description": "MetaWeather as a microservice",
                "license": {
                    "name": "MIT",
                    "url": "https://opensource.org/licenses/MIT"
                },
                "title": "weather",
                "version": "1.0.0"
            },
            "lifecycle": {
                "startup": {
                    "command": [
                        "node",
                        "app.js"
                    ]
                }
            },
            "omg": 1
        },
        "readme": "# MetaWeather as a microservice\n\nGives Weather\n\n```bash\n$> omg exec city -a q='bordeaux'\n\n$> omg exec coords -a lat=52 -a long=4\n```\n",
        "service": {
            "alias": null,
            "description": "MetaWeather as a microservice",
            "isCertified": false,
            "name": "weather",
            "owner": {
                "username": "Arinono"
            },
            "public": true,
            "topics": []
        },
        "serviceUuid": "c9693e37-969e-46f6-aea9-a64500db3426",
        "state": "BETA"
    },
    {
        "configuration": {
            "environment": {
                "HASURA_GRAPHQL_DATABASE_URL": {
                    "help": "The URL to your postgres database, such as postgres://user:password@host/database_name",
                    "required": true,
                    "type": "string"
                },
                "HASURA_GRAPHQL_ENABLE_CONSOLE": {
                    "default": true,
                    "help": "Whether to enable the built in console or not",
                    "required": true,
                    "type": "boolean"
                }
            },
            "expose": {
                "console": {
                    "http": {
                        "path": "/console",
                        "port": 8080
                    }
                },
                "graphql": {
                    "http": {
                        "path": "/v1alpha1",
                        "port": 8080
                    }
                },
                "v1_api": {
                    "http": {
                        "path": "/v1",
                        "port": 8080
                    }
                }
            },
            "lifecycle": {
                "startup": {
                    "command": [
                        "/bin/graphql-engine",
                        "serve"
                    ]
                }
            },
            "omg": 1
        },
        "readme": "# Hasura\nAn OMG service to access Hasura, including it's console.\n\n## Usage\n### Expose the Hasura console\nTo expose the Hasura console via your app (eg: https://your_app.asyncyapp.com/console),\nadd the following to your `asyncy.yml` present in the root of your Asyncy app:\n```yaml\nexpose:\n  hasura_console:\n    service: hasura\n    name: console\n    http:\n      path: /console\n```\n\n\n## Coming soon\n- Support for webhooks\n",
        "service": {
            "alias": "hasura",
            "description": "An OMG compliant service for Hasura",
            "isCertified": false,
            "name": "hasura",
            "owner": {
                "username": "oms-services"
            },
            "public": true,
            "topics": [
                "database",
                "graphql",
                "microservice",
                "graphql-server",
                "hasura",
                "hasura-graphql",
                "oms",
                "open-microservice",
                "oms-forwards"
            ]
        },
        "serviceUuid": "0ba6c260-e70d-4425-9644-6d6831e12c8e",
        "state": "BETA"
    },
    {
        "configuration": {
            "environment": {
                "HASURA_GRAPHQL_DATABASE_URL": {
                    "help": "The URL to your postgres database, such as postgres://user:password@host/database_name",
                    "required": true,
                    "type": "string"
                },
                "HASURA_GRAPHQL_ENABLE_CONSOLE": {
                    "default": true,
                    "help": "Whether to enable the built in console or not",
                    "required": true,
                    "type": "boolean"
                }
            },
            "expose": {
                "console": {
                    "http": {
                        "path": "/console",
                        "port": 8080
                    }
                },
                "graphql": {
                    "http": {
                        "path": "/v1alpha1",
                        "port": 8080
                    }
                },
                "v1_api": {
                    "http": {
                        "path": "/v1",
                        "port": 8080
                    }
                }
            },
            "lifecycle": {
                "startup": {
                    "command": [
                        "/bin/graphql-engine",
                        "serve"
                    ]
                }
            },
            "omg": 1
        },
        "readme": "# Hasura\nAn OMG service to access Hasura, including it's console.\n\n## Usage\n### Expose the Hasura console\nTo expose the Hasura console via your app (eg: https://your_app.asyncyapp.com/console),\nadd the following to your `asyncy.yml` present in the root of your Asyncy app:\n```yaml\nexpose:\n  hasura_console:\n    service: hasura\n    name: console\n    http:\n      path: /console\n```\n\n\n## Coming soon\n- Support for webhooks\n",
        "service": {
            "alias": "hasura",
            "description": "An OMG compliant service for Hasura",
            "isCertified": false,
            "name": "hasura",
            "owner": {
                "username": "oms-services"
            },
            "public": true,
            "topics": [
                "database",
                "graphql",
                "microservice",
                "graphql-server",
                "hasura",
                "hasura-graphql",
                "oms",
                "open-microservice",
                "oms-forwards"
            ]
        },
        "serviceUuid": "0ba6c260-e70d-4425-9644-6d6831e12c8e",
        "state": "BETA"
    },
    {
        "configuration": {
            "actions": {
                "cp": {
                    "arguments": {
                        "destination": {
                            "help": "A local directory/file or other S3 bucket.\n",
                            "required": true,
                            "type": "string"
                        },
                        "origin": {
                            "help": "A local directory/file or other S3 bucket.\n",
                            "required": true,
                            "type": "string"
                        },
                        "recursive": {
                            "help": "Command is performed on all files or objects under the specified directory or prefix.\n",
                            "type": "boolean"
                        }
                    },
                    "help": "Copies a local file or S3 object to another location locally or in S3.\n"
                },
                "ls": {
                    "arguments": {
                        "page-size": {
                            "type": "int"
                        },
                        "path": {
                            "required": true,
                            "type": "string"
                        },
                        "recursive": {
                            "type": "boolean"
                        },
                        "summarize": {
                            "help": "Displays summary information (number of objects, total size).\n",
                            "type": "boolean"
                        }
                    },
                    "help": "List S3 objects and common prefixes under a prefix or all S3 buckets.\n"
                }
            },
            "environment": {
                "aws_access_key_id": {
                    "help": "The AWS access key part of your credentials"
                },
                "aws_ca_bundle": {
                    "help": "Specify the path to a certificate bundle to use for HTTPS certificate validation."
                },
                "aws_config_file": {
                    "help": "Change the location of the file that the AWS CLI uses to store configuration profiles."
                },
                "aws_default_region": {
                    "help": "AWS region. This variable overrides the default region of the in-use profile, if set."
                },
                "aws_profile": {
                    "help": "name of the CLI profile to use. This can be the name of a profile stored in a credential or config file, or default to use the default profile."
                },
                "aws_secret_access_key": {
                    "help": "The AWS secret access key part of your credentials"
                },
                "aws_session_token": {
                    "help": "The session token part of your credentials (session tokens only)"
                },
                "aws_shared_credentials_file": {
                    "help": "Change the location of the file that the AWS CLI uses to store access keys."
                },
                "metadata_service_num_attempts": {
                    "help": "The number of attempts to try to retrieve credentials. If you know for certain you will be using an IAM role on an Amazon EC2 instance, you can set this value to ensure any intermittent failures are retried. By default this value is 1."
                },
                "metadata_service_timeout": {
                    "help": "The number of seconds to wait until the metadata service request times out. This is used if you are using an IAM role to provide your credentials."
                }
            },
            "omg": 1,
            "volumes": {
                "cache": {
                    "target": "/cache"
                }
            }
        },
        "readme": "# AWS S3 for Asyncy\n\n\n```sh\n# usage.story\nresult = s3 ls s3://bucket/path\n\nfor file in result\n  print file.path\n\n>>> filename.txt\n```\n",
        "service": {
            "alias": "aws-s3",
            "description": "AWS S3",
            "isCertified": false,
            "name": "aws-s3",
            "owner": {
                "username": "oms-services"
            },
            "public": true,
            "topics": [
                "container",
                "microservice",
                "s3",
                "aws",
                "file-storage"
            ]
        },
        "serviceUuid": "98e5224e-8501-4240-8c9f-e01c71e1f19e",
        "state": "BETA"
    },
    {
        "configuration": {
            "actions": {
                "cp": {
                    "arguments": {
                        "destination": {
                            "help": "A local directory/file or other S3 bucket.\n",
                            "required": true,
                            "type": "string"
                        },
                        "origin": {
                            "help": "A local directory/file or other S3 bucket.\n",
                            "required": true,
                            "type": "string"
                        },
                        "recursive": {
                            "help": "Command is performed on all files or objects under the specified directory or prefix.\n",
                            "type": "boolean"
                        }
                    },
                    "help": "Copies a local file or S3 object to another location locally or in S3.\n"
                },
                "ls": {
                    "arguments": {
                        "page-size": {
                            "type": "int"
                        },
                        "path": {
                            "required": true,
                            "type": "string"
                        },
                        "recursive": {
                            "type": "boolean"
                        },
                        "summarize": {
                            "help": "Displays summary information (number of objects, total size).\n",
                            "type": "boolean"
                        }
                    },
                    "help": "List S3 objects and common prefixes under a prefix or all S3 buckets.\n"
                }
            },
            "environment": {
                "aws_access_key_id": {
                    "help": "The AWS access key part of your credentials"
                },
                "aws_ca_bundle": {
                    "help": "Specify the path to a certificate bundle to use for HTTPS certificate validation."
                },
                "aws_config_file": {
                    "help": "Change the location of the file that the AWS CLI uses to store configuration profiles."
                },
                "aws_default_region": {
                    "help": "AWS region. This variable overrides the default region of the in-use profile, if set."
                },
                "aws_profile": {
                    "help": "name of the CLI profile to use. This can be the name of a profile stored in a credential or config file, or default to use the default profile."
                },
                "aws_secret_access_key": {
                    "help": "The AWS secret access key part of your credentials"
                },
                "aws_session_token": {
                    "help": "The session token part of your credentials (session tokens only)"
                },
                "aws_shared_credentials_file": {
                    "help": "Change the location of the file that the AWS CLI uses to store access keys."
                },
                "metadata_service_num_attempts": {
                    "help": "The number of attempts to try to retrieve credentials. If you know for certain you will be using an IAM role on an Amazon EC2 instance, you can set this value to ensure any intermittent failures are retried. By default this value is 1."
                },
                "metadata_service_timeout": {
                    "help": "The number of seconds to wait until the metadata service request times out. This is used if you are using an IAM role to provide your credentials."
                }
            },
            "omg": 1,
            "volumes": {
                "cache": {
                    "target": "/cache"
                }
            }
        },
        "readme": "# AWS S3 for Asyncy\n\n\n```sh\n# usage.story\nresult = s3 ls s3://bucket/path\n\nfor file in result\n  print file.path\n\n>>> filename.txt\n```\n",
        "service": {
            "alias": "aws-s3",
            "description": "AWS S3",
            "isCertified": false,
            "name": "aws-s3",
            "owner": {
                "username": "oms-services"
            },
            "public": true,
            "topics": [
                "container",
                "microservice",
                "s3",
                "aws",
                "file-storage"
            ]
        },
        "serviceUuid": "98e5224e-8501-4240-8c9f-e01c71e1f19e",
        "state": "BETA"
    },
    {
        "configuration": {
            "commands": {
                "entrypoint": {
                    "arguments": {
                        "tab": {
                            "help": "* * * * * *\n| | | | | |\n| | | | | +-- Year              (range: 1900-3000)\n| | | | +---- Day of the Week   (range: 1-7, 1 standing for Monday)\n| | | +------ Month of the Year (range: 1-12)\n| | +-------- Day of the Month  (range: 1-31)\n| +---------- Hour              (range: 0-23)\n+------------ Minute            (range: 0-59)\n",
                            "type": "string"
                        }
                    },
                    "output": {
                        "type": null
                    }
                }
            }
        },
        "readme": "",
        "service": {
            "alias": "crontab",
            "description": "Crontab in Asyncy",
            "isCertified": false,
            "name": "crontab",
            "owner": {
                "username": "storyscript"
            },
            "public": true,
            "topics": [
                "cron",
                "microservice",
                "crontab"
            ]
        },
        "serviceUuid": "fa8ae7bb-05c9-432d-aa4f-433c314fa3cf",
        "state": "BETA"
    },
    {
        "configuration": {
            "commands": {
                "entrypoint": {
                    "arguments": {
                        "tab": {
                            "help": "* * * * * *\n| | | | | |\n| | | | | +-- Year              (range: 1900-3000)\n| | | | +---- Day of the Week   (range: 1-7, 1 standing for Monday)\n| | | +------ Month of the Year (range: 1-12)\n| | +-------- Day of the Month  (range: 1-31)\n| +---------- Hour              (range: 0-23)\n+------------ Minute            (range: 0-59)\n",
                            "type": "string"
                        }
                    },
                    "output": {
                        "type": null
                    }
                }
            }
        },
        "readme": "",
        "service": {
            "alias": "crontab",
            "description": "Crontab in Asyncy",
            "isCertified": false,
            "name": "crontab",
            "owner": {
                "username": "storyscript"
            },
            "public": true,
            "topics": [
                "cron",
                "microservice",
                "crontab"
            ]
        },
        "serviceUuid": "fa8ae7bb-05c9-432d-aa4f-433c314fa3cf",
        "state": "BETA"
    },
    {
        "configuration": {
            "actions": {
                "download": {
                    "arguments": {
                        "path": {
                            "help": "Path of file to be downloaded.",
                            "in": "requestBody",
                            "type": "string"
                        },
                        "url": {
                            "help": "Shared of the file to be downloaded",
                            "in": "requestBody",
                            "type": "string"
                        }
                    },
                    "help": "download file using path or url",
                    "http": {
                        "contentType": "application/json",
                        "method": "post",
                        "path": "/download",
                        "port": 3000
                    },
                    "output": {
                        "properties": {
                            "allow_download": {
                                "help": "The download permission from link (for \"url\" argument)",
                                "type": "boolean"
                            },
                            "fileBinary": {
                                "help": "The binary object of file content (for \"url and path\" argument)",
                                "type": "map"
                            },
                            "id": {
                                "help": "The file id (for \"url and path\" argument)",
                                "type": "string"
                            },
                            "link_permissions": {
                                "help": "The access permission for link (for \"url\" argument)",
                                "type": "map"
                            },
                            "name": {
                                "help": "The file name (for \"url and path\" argument)",
                                "type": "string"
                            },
                            "url": {
                                "help": "The url for file (for \"url\" argument)",
                                "type": "string"
                            }
                        },
                        "type": "object"
                    }
                },
                "list": {
                    "help": "List all folders",
                    "http": {
                        "contentType": "application/json",
                        "method": "get",
                        "path": "/list",
                        "port": 3000
                    },
                    "output": {
                        "properties": {
                            "client_modified": {
                                "help": "The client modified date time",
                                "type": "string"
                            },
                            "content_hash": {
                                "help": "The content of hash (eg- \"f40c1228343d7e2a632281c75w7d5w7x3491b9b63ddfd0eb10fee2c913f6cfa7\")",
                                "type": "string"
                            },
                            "id": {
                                "help": "The file id",
                                "type": "string"
                            },
                            "name": {
                                "help": "The file name",
                                "type": "string"
                            },
                            "path_display": {
                                "help": "The display path",
                                "type": "string"
                            },
                            "path_lower": {
                                "help": "The lower path",
                                "type": "string"
                            }
                        },
                        "type": "object"
                    }
                },
                "upload": {
                    "arguments": {
                        "fileContent": {
                            "help": "Content of the file in base64 format",
                            "in": "requestBody",
                            "required": true,
                            "type": "any"
                        },
                        "fileName": {
                            "help": "Name of the file to be uploaded",
                            "in": "requestBody",
                            "required": true,
                            "type": "string"
                        },
                        "fileType": {
                            "help": "Type of the file to be uploaded",
                            "in": "requestBody",
                            "required": true,
                            "type": "string"
                        }
                    },
                    "help": "Upload file using filename",
                    "http": {
                        "contentType": "application/json",
                        "method": "post",
                        "path": "/upload",
                        "port": 3000
                    },
                    "output": {
                        "properties": {
                            "client_modified": {
                                "help": "The client modified date time",
                                "type": "string"
                            },
                            "content_hash": {
                                "help": "The content of hash (eg- \"f40c1228343d7e2a632281c75w7d5w7x3491b9b63ddfd0eb10fee2c913f6cfa7\")",
                                "type": "string"
                            },
                            "id": {
                                "help": "The file id",
                                "type": "string"
                            },
                            "name": {
                                "help": "The file name",
                                "type": "string"
                            },
                            "path_display": {
                                "help": "The display path",
                                "type": "string"
                            },
                            "path_lower": {
                                "help": "The lower path",
                                "type": "string"
                            }
                        },
                        "type": "object"
                    }
                },
                "userInfo": {
                    "help": "Get user information",
                    "http": {
                        "contentType": "application/json",
                        "method": "get",
                        "path": "/userinfo",
                        "port": 3000
                    },
                    "output": {
                        "contentType": "application/json",
                        "properties": {
                            "account_id": {
                                "help": "The user account id",
                                "type": "string"
                            },
                            "account_type": {
                                "help": "The account type (eg- basic)",
                                "type": "map"
                            },
                            "country": {
                                "help": "The country abbrivation",
                                "type": "string"
                            },
                            "email": {
                                "help": "The user email address",
                                "type": "string"
                            },
                            "email_verified": {
                                "help": "The email varification (eg- \"true\"/\"false\")",
                                "type": "boolean"
                            },
                            "name": {
                                "help": "The object of name with \"given_name\",\"surname\",\"familiar_name\",\"display_name\",\"abbreviated_name\"",
                                "type": "map"
                            },
                            "referral_link": {
                                "help": "The dropbox accout referral link",
                                "type": "string"
                            },
                            "root_info": {
                                "help": "The root_info object with \"root_namespace_id\",\"home_namespace_id\"",
                                "type": "map"
                            }
                        },
                        "type": "object"
                    }
                }
            },
            "environment": {
                "ACCESS_TOKEN": {
                    "help": "access token for dropbox",
                    "required": true,
                    "type": "string"
                }
            },
            "info": {
                "contact": {
                    "email": "core@openmicroservices.org",
                    "name": "Open Microservices",
                    "url": "https://openmicroservices.org"
                },
                "description": "Dropbox Service",
                "license": {
                    "name": "MIT",
                    "url": "https://opensource.org/licenses/MIT"
                },
                "title": "Dropbox",
                "version": "1.0.0"
            },
            "lifecycle": {
                "startup": {
                    "command": [
                        "node",
                        "app.js"
                    ]
                }
            },
            "oms": 1
        },
        "readme": "# _Dropbox_ Open Microservice\n\n> Dropbox Service\n\n[![Open Microservice Specification Version](https://img.shields.io/badge/Open%20Microservice-1.0-477bf3.svg)](https://openmicroservices.org) [![Open Microservices Spectrum Chat](https://withspectrum.github.io/badge/badge.svg)](https://spectrum.chat/open-microservices) [![Open Microservices Code of Conduct](https://img.shields.io/badge/Contributor%20Covenant-v1.4%20adopted-ff69b4.svg)](https://github.com/oms-services/.github/blob/master/CODE_OF_CONDUCT.md) [![Open Microservices Commitzen](https://img.shields.io/badge/commitizen-friendly-brightgreen.svg)](http://commitizen.github.io/cz-cli/) [![PRs Welcome](https://img.shields.io/badge/PRs-welcome-brightgreen.svg)](http://makeapullrequest.com) \n[![License: MIT](https://img.shields.io/badge/License-MIT-blue.svg)](https://opensource.org/licenses/MIT)\n\n## Introduction\n\nThis project is an example implementation of the [Open Microservice Specification](https://openmicroservices.org), a standard originally created at [Storyscript](https://storyscript.io) for building highly-portable \"microservices\" that expose the events, actions, and APIs inside containerized software.\n\n## Getting Started\n\nThe `oms` command-line interface allows you to interact with Open Microservices. If you're interested in creating an Open Microservice the CLI also helps validate, test, and debug your `oms.yml` implementation!\n\nSee the [oms-cli](https://github.com/microservices/oms) project to learn more!\n\n### Installation\n\n```\nnpm install -g @microservices/oms\n```\n\n## Usage\n\n### Open Microservices CLI Usage\n\nOnce you have the [oms-cli](https://github.com/microservices/oms) installed, you can run any of the following commands from within this project's root directory:\n\n#### Actions\n\n##### list\n\n> List all folders\n##### Action Arguments\n\n| Argument Name | Type | Required | Default | Description |\n|:------------- |:---- |:-------- |:--------|:----------- |\n| ACCESS_TOKEN | `string` | `true` | None | access token for dropbox |\n\n``` shell\noms run list \\ \n    -e ACCESS_TOKEN=$ACCESS_TOKEN\n```\n\n##### userInfo\n\n> Get user information\n##### Action Arguments\n\n| Argument Name | Type | Required | Default | Description |\n|:------------- |:---- |:-------- |:--------|:----------- |\n| ACCESS_TOKEN | `string` | `true` | None | access token for dropbox |\n\n``` shell\noms run userInfo \\ \n    -e ACCESS_TOKEN=$ACCESS_TOKEN\n```\n\n##### upload\n\n> Upload file using filename\n##### Action Arguments\n\n| Argument Name | Type | Required | Default | Description |\n|:------------- |:---- |:-------- |:--------|:----------- |\n| fileName | `string` | `true` | None | Name of the file to be uploaded |\n| fileContent | `any` | `true` | None | Content of the file in base64 format |\n| fileType | `string` | `true` | None | Type of the file to be uploaded |\n| ACCESS_TOKEN | `string` | `true` | None | access token for dropbox |\n\n``` shell\noms run upload \\ \n    -a fileName='*****' \\ \n    -a fileContent='*****' \\ \n    -a fileType='*****' \\ \n    -e ACCESS_TOKEN=$ACCESS_TOKEN\n```\n\n##### download\n\n> download file using path or url\n##### Action Arguments\n\n| Argument Name | Type | Required | Default | Description |\n|:------------- |:---- |:-------- |:--------|:----------- |\n| path | `string` | `false` | None | Path of file to be downloaded. |\n| url | `string` | `false` | None | Shared of the file to be downloaded |\n| ACCESS_TOKEN | `string` | `true` | None | access token for dropbox |\n\n``` shell\noms run download \\ \n    -a path='*****' \\ \n    -a url='*****' \\ \n    -e ACCESS_TOKEN=$ACCESS_TOKEN\n```\n\n## Contributing\n\nAll suggestions in how to improve the specification and this guide are very welcome. Feel free share your thoughts in the Issue tracker, or even better, fork the repository to implement your own ideas and submit a pull request.\n\n[![Edit dropbox on CodeSandbox](https://codesandbox.io/static/img/play-codesandbox.svg)](https://codesandbox.io/s/github/oms-services/dropbox)\n\nThis project is guided by [Contributor Covenant](https://github.com/oms-services/.github/blob/master/CODE_OF_CONDUCT.md). Please read out full [Contribution Guidelines](https://github.com/oms-services/.github/blob/master/CONTRIBUTING.md).\n\n## Additional Resources\n\n* [Install the CLI](https://github.com/microservices/oms) - The OMS CLI helps developers create, test, validate, and build microservices.\n* [Example OMS Services](https://github.com/oms-services) - Examples of OMS-compliant services written in a variety of languages.\n* [Example Language Implementations](https://github.com/microservices) - Find tooling & language implementations in Node, Python, Scala, Java, Clojure.\n* [Storyscript Hub](https://hub.storyscript.io) - A public registry of OMS services.\n* [Community Chat](https://spectrum.chat/open-microservices) - Have ideas? Questions? Join us on Spectrum.\n",
        "service": {
            "alias": "dropbox",
            "description": null,
            "isCertified": false,
            "name": "microservice-dropbox",
            "owner": {
                "username": "heaptracetechnology"
            },
            "public": true,
            "topics": [
                "open-microservice",
                "oms",
                "dropbox",
                "microservice"
            ]
        },
        "serviceUuid": "0bab1c0b-914b-421d-ad17-fd25d2ed42d5",
        "state": "BETA"
    },
    {
        "configuration": {
            "actions": {
                "download": {
                    "arguments": {
                        "path": {
                            "help": "Path of file to be downloaded.",
                            "in": "requestBody",
                            "type": "string"
                        },
                        "url": {
                            "help": "Shared of the file to be downloaded",
                            "in": "requestBody",
                            "type": "string"
                        }
                    },
                    "help": "download file using path or url",
                    "http": {
                        "contentType": "application/json",
                        "method": "post",
                        "path": "/download",
                        "port": 3000
                    },
                    "output": {
                        "properties": {
                            "allow_download": {
                                "help": "The download permission from link (for \"url\" argument)",
                                "type": "boolean"
                            },
                            "fileBinary": {
                                "help": "The binary object of file content (for \"url and path\" argument)",
                                "type": "map"
                            },
                            "id": {
                                "help": "The file id (for \"url and path\" argument)",
                                "type": "string"
                            },
                            "link_permissions": {
                                "help": "The access permission for link (for \"url\" argument)",
                                "type": "map"
                            },
                            "name": {
                                "help": "The file name (for \"url and path\" argument)",
                                "type": "string"
                            },
                            "url": {
                                "help": "The url for file (for \"url\" argument)",
                                "type": "string"
                            }
                        },
                        "type": "object"
                    }
                },
                "list": {
                    "help": "List all folders",
                    "http": {
                        "contentType": "application/json",
                        "method": "get",
                        "path": "/list",
                        "port": 3000
                    },
                    "output": {
                        "properties": {
                            "client_modified": {
                                "help": "The client modified date time",
                                "type": "string"
                            },
                            "content_hash": {
                                "help": "The content of hash (eg- \"f40c1228343d7e2a632281c75w7d5w7x3491b9b63ddfd0eb10fee2c913f6cfa7\")",
                                "type": "string"
                            },
                            "id": {
                                "help": "The file id",
                                "type": "string"
                            },
                            "name": {
                                "help": "The file name",
                                "type": "string"
                            },
                            "path_display": {
                                "help": "The display path",
                                "type": "string"
                            },
                            "path_lower": {
                                "help": "The lower path",
                                "type": "string"
                            }
                        },
                        "type": "object"
                    }
                },
                "upload": {
                    "arguments": {
                        "fileContent": {
                            "help": "Content of the file in base64 format",
                            "in": "requestBody",
                            "required": true,
                            "type": "any"
                        },
                        "fileName": {
                            "help": "Name of the file to be uploaded",
                            "in": "requestBody",
                            "required": true,
                            "type": "string"
                        },
                        "fileType": {
                            "help": "Type of the file to be uploaded",
                            "in": "requestBody",
                            "required": true,
                            "type": "string"
                        }
                    },
                    "help": "Upload file using filename",
                    "http": {
                        "contentType": "application/json",
                        "method": "post",
                        "path": "/upload",
                        "port": 3000
                    },
                    "output": {
                        "properties": {
                            "client_modified": {
                                "help": "The client modified date time",
                                "type": "string"
                            },
                            "content_hash": {
                                "help": "The content of hash (eg- \"f40c1228343d7e2a632281c75w7d5w7x3491b9b63ddfd0eb10fee2c913f6cfa7\")",
                                "type": "string"
                            },
                            "id": {
                                "help": "The file id",
                                "type": "string"
                            },
                            "name": {
                                "help": "The file name",
                                "type": "string"
                            },
                            "path_display": {
                                "help": "The display path",
                                "type": "string"
                            },
                            "path_lower": {
                                "help": "The lower path",
                                "type": "string"
                            }
                        },
                        "type": "object"
                    }
                },
                "userInfo": {
                    "help": "Get user information",
                    "http": {
                        "contentType": "application/json",
                        "method": "get",
                        "path": "/userinfo",
                        "port": 3000
                    },
                    "output": {
                        "contentType": "application/json",
                        "properties": {
                            "account_id": {
                                "help": "The user account id",
                                "type": "string"
                            },
                            "account_type": {
                                "help": "The account type (eg- basic)",
                                "type": "map"
                            },
                            "country": {
                                "help": "The country abbrivation",
                                "type": "string"
                            },
                            "email": {
                                "help": "The user email address",
                                "type": "string"
                            },
                            "email_verified": {
                                "help": "The email varification (eg- \"true\"/\"false\")",
                                "type": "boolean"
                            },
                            "name": {
                                "help": "The object of name with \"given_name\",\"surname\",\"familiar_name\",\"display_name\",\"abbreviated_name\"",
                                "type": "map"
                            },
                            "referral_link": {
                                "help": "The dropbox accout referral link",
                                "type": "string"
                            },
                            "root_info": {
                                "help": "The root_info object with \"root_namespace_id\",\"home_namespace_id\"",
                                "type": "map"
                            }
                        },
                        "type": "object"
                    }
                }
            },
            "environment": {
                "ACCESS_TOKEN": {
                    "help": "access token for dropbox",
                    "required": true,
                    "type": "string"
                }
            },
            "info": {
                "contact": {
                    "email": "core@openmicroservices.org",
                    "name": "Open Microservices",
                    "url": "https://openmicroservices.org"
                },
                "description": "Dropbox Service",
                "license": {
                    "name": "MIT",
                    "url": "https://opensource.org/licenses/MIT"
                },
                "title": "Dropbox",
                "version": "1.0.0"
            },
            "lifecycle": {
                "startup": {
                    "command": [
                        "node",
                        "app.js"
                    ]
                }
            },
            "oms": 1
        },
        "readme": "# _Dropbox_ Open Microservice\n\n> Dropbox Service\n\n[![Open Microservice Specification Version](https://img.shields.io/badge/Open%20Microservice-1.0-477bf3.svg)](https://openmicroservices.org) [![Open Microservices Spectrum Chat](https://withspectrum.github.io/badge/badge.svg)](https://spectrum.chat/open-microservices) [![Open Microservices Code of Conduct](https://img.shields.io/badge/Contributor%20Covenant-v1.4%20adopted-ff69b4.svg)](https://github.com/oms-services/.github/blob/master/CODE_OF_CONDUCT.md) [![Open Microservices Commitzen](https://img.shields.io/badge/commitizen-friendly-brightgreen.svg)](http://commitizen.github.io/cz-cli/) [![PRs Welcome](https://img.shields.io/badge/PRs-welcome-brightgreen.svg)](http://makeapullrequest.com) \n[![License: MIT](https://img.shields.io/badge/License-MIT-blue.svg)](https://opensource.org/licenses/MIT)\n\n## Introduction\n\nThis project is an example implementation of the [Open Microservice Specification](https://openmicroservices.org), a standard originally created at [Storyscript](https://storyscript.io) for building highly-portable \"microservices\" that expose the events, actions, and APIs inside containerized software.\n\n## Getting Started\n\nThe `oms` command-line interface allows you to interact with Open Microservices. If you're interested in creating an Open Microservice the CLI also helps validate, test, and debug your `oms.yml` implementation!\n\nSee the [oms-cli](https://github.com/microservices/oms) project to learn more!\n\n### Installation\n\n```\nnpm install -g @microservices/oms\n```\n\n## Usage\n\n### Open Microservices CLI Usage\n\nOnce you have the [oms-cli](https://github.com/microservices/oms) installed, you can run any of the following commands from within this project's root directory:\n\n#### Actions\n\n##### list\n\n> List all folders\n##### Action Arguments\n\n| Argument Name | Type | Required | Default | Description |\n|:------------- |:---- |:-------- |:--------|:----------- |\n| ACCESS_TOKEN | `string` | `true` | None | access token for dropbox |\n\n``` shell\noms run list \\ \n    -e ACCESS_TOKEN=$ACCESS_TOKEN\n```\n\n##### userInfo\n\n> Get user information\n##### Action Arguments\n\n| Argument Name | Type | Required | Default | Description |\n|:------------- |:---- |:-------- |:--------|:----------- |\n| ACCESS_TOKEN | `string` | `true` | None | access token for dropbox |\n\n``` shell\noms run userInfo \\ \n    -e ACCESS_TOKEN=$ACCESS_TOKEN\n```\n\n##### upload\n\n> Upload file using filename\n##### Action Arguments\n\n| Argument Name | Type | Required | Default | Description |\n|:------------- |:---- |:-------- |:--------|:----------- |\n| fileName | `string` | `true` | None | Name of the file to be uploaded |\n| fileContent | `any` | `true` | None | Content of the file in base64 format |\n| fileType | `string` | `true` | None | Type of the file to be uploaded |\n| ACCESS_TOKEN | `string` | `true` | None | access token for dropbox |\n\n``` shell\noms run upload \\ \n    -a fileName='*****' \\ \n    -a fileContent='*****' \\ \n    -a fileType='*****' \\ \n    -e ACCESS_TOKEN=$ACCESS_TOKEN\n```\n\n##### download\n\n> download file using path or url\n##### Action Arguments\n\n| Argument Name | Type | Required | Default | Description |\n|:------------- |:---- |:-------- |:--------|:----------- |\n| path | `string` | `false` | None | Path of file to be downloaded. |\n| url | `string` | `false` | None | Shared of the file to be downloaded |\n| ACCESS_TOKEN | `string` | `true` | None | access token for dropbox |\n\n``` shell\noms run download \\ \n    -a path='*****' \\ \n    -a url='*****' \\ \n    -e ACCESS_TOKEN=$ACCESS_TOKEN\n```\n\n## Contributing\n\nAll suggestions in how to improve the specification and this guide are very welcome. Feel free share your thoughts in the Issue tracker, or even better, fork the repository to implement your own ideas and submit a pull request.\n\n[![Edit dropbox on CodeSandbox](https://codesandbox.io/static/img/play-codesandbox.svg)](https://codesandbox.io/s/github/oms-services/dropbox)\n\nThis project is guided by [Contributor Covenant](https://github.com/oms-services/.github/blob/master/CODE_OF_CONDUCT.md). Please read out full [Contribution Guidelines](https://github.com/oms-services/.github/blob/master/CONTRIBUTING.md).\n\n## Additional Resources\n\n* [Install the CLI](https://github.com/microservices/oms) - The OMS CLI helps developers create, test, validate, and build microservices.\n* [Example OMS Services](https://github.com/oms-services) - Examples of OMS-compliant services written in a variety of languages.\n* [Example Language Implementations](https://github.com/microservices) - Find tooling & language implementations in Node, Python, Scala, Java, Clojure.\n* [Storyscript Hub](https://hub.storyscript.io) - A public registry of OMS services.\n* [Community Chat](https://spectrum.chat/open-microservices) - Have ideas? Questions? Join us on Spectrum.\n",
        "service": {
            "alias": "dropbox",
            "description": null,
            "isCertified": false,
            "name": "microservice-dropbox",
            "owner": {
                "username": "heaptracetechnology"
            },
            "public": true,
            "topics": [
                "open-microservice",
                "oms",
                "dropbox",
                "microservice"
            ]
        },
        "serviceUuid": "0bab1c0b-914b-421d-ad17-fd25d2ed42d5",
        "state": "BETA"
    },
    {
        "configuration": {
            "actions": {
                "bot": {
                    "events": {
                        "hears": {
                            "arguments": {
                                "channel": {
                                    "help": "Only listen in a specific channel",
                                    "in": "requestBody",
                                    "required": true,
                                    "type": "string"
                                },
                                "pattern": {
                                    "help": "A regexp pattern to filter messages",
                                    "in": "requestBody",
                                    "type": "string"
                                }
                            },
                            "help": "Triggered anytime a messages matches the pattern",
                            "http": {
                                "port": 8000,
                                "subscribe": {
                                    "contentType": "application/json",
                                    "method": "post",
                                    "path": "/subscribe"
                                },
                                "unsubscribe": {
                                    "contentType": "application/json",
                                    "method": "post",
                                    "path": "/unsubscribe"
                                }
                            }
                        },
                        "responds": {
                            "arguments": {
                                "pattern": {
                                    "help": "A regexp pattern to filter messages",
                                    "in": "requestBody",
                                    "type": "string"
                                }
                            },
                            "help": "Triggered by direct messages to the bot",
                            "http": {
                                "port": 8000,
                                "subscribe": {
                                    "contentType": "application/json",
                                    "method": "post",
                                    "path": "/subscribe"
                                },
                                "unsubscribe": {
                                    "contentType": "application/json",
                                    "method": "post",
                                    "path": "/unsubscribe"
                                }
                            },
                            "output": {
                                "contentType": "application/json",
                                "properties": {
                                    "channel": {
                                        "help": "The channel ID",
                                        "type": "string"
                                    },
                                    "client_msg_id": {
                                        "help": "The message ID",
                                        "type": "string"
                                    },
                                    "text": {
                                        "help": "The message text",
                                        "type": "string"
                                    },
                                    "ts": {
                                        "help": "The message timestamp (eg: \"1535474523.000100\")",
                                        "type": "string"
                                    },
                                    "user": {
                                        "help": "The user ID",
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    },
                    "help": "Start a Slack bot"
                },
                "channels": {
                    "arguments": {
                        "exclude_archived": {
                            "default": false,
                            "help": "Set to true to exclude archived channels from the list",
                            "in": "requestBody",
                            "type": "boolean"
                        },
                        "limit": {
                            "default": 100,
                            "help": "Limit the number of channels to return. Must be less than 1000.",
                            "in": "requestBody",
                            "type": "int"
                        },
                        "token": {
                            "help": "Authentication token bearing required scopes.\nEnvironment variable BOT_TOKEN used by default.\n",
                            "in": "requestBody",
                            "type": "string"
                        },
                        "types": {
                            "help": "Mix and match channel types: public_channel, private_channel, mpim, im\nDefault is public_channel only.\n",
                            "in": "requestBody",
                            "type": "list"
                        }
                    },
                    "help": "Get a list of channels",
                    "http": {
                        "contentType": "application/json",
                        "method": "post",
                        "path": "/api/channels.list",
                        "port": 8000
                    },
                    "output": {
                        "contentType": "application/json",
                        "type": "map"
                    }
                },
                "directChannels": {
                    "arguments": {
                        "limit": {
                            "default": 100,
                            "help": "Limit the number of channels to return. Must be less than 1000.",
                            "in": "requestBody",
                            "type": "int"
                        },
                        "token": {
                            "help": "Authentication token bearing required scopes.\nEnvironment variable BOT_TOKEN used by default.\n",
                            "in": "requestBody",
                            "type": "string"
                        }
                    },
                    "help": "Lists direct message channels for the calling user.",
                    "http": {
                        "contentType": "application/json",
                        "method": "post",
                        "path": "/api/im.list",
                        "port": 8000
                    },
                    "output": {
                        "contentType": "application/json",
                        "type": "map"
                    }
                },
                "send": {
                    "arguments": {
                        "attachments": {
                            "in": "requestBody",
                            "type": "list"
                        },
                        "channel": {
                            "help": "What channel to send message in.\nThis can be a \"#channel\" \"@user\" or a channel id.\n",
                            "in": "requestBody",
                            "required": true,
                            "type": "string"
                        },
                        "text": {
                            "help": "Text of the message to send.",
                            "in": "requestBody",
                            "required": true,
                            "type": "string"
                        },
                        "token": {
                            "help": "Authentication token bearing required scopes.\nEnvironment variable BOT_TOKEN used by default.\n",
                            "in": "requestBody",
                            "type": "string"
                        }
                    },
                    "help": "Sends a message to a channel.\nhttps://api.slack.com/methods/chat.postMessage\n",
                    "http": {
                        "contentType": "application/json",
                        "method": "post",
                        "path": "/api/chat.postMessage",
                        "port": 8000
                    },
                    "output": {
                        "contentType": "application/json",
                        "type": "map"
                    }
                },
                "users": {
                    "arguments": {
                        "cursor": {
                            "help": "Paginate through collections of data by setting the cursor parameter to a next_cursor attribute returned by a previous request's response_metadata. Default value fetches the first \"page\" of the collection. See pagination for more detail.\n",
                            "in": "requestBody",
                            "type": "string"
                        },
                        "include_locale": {
                            "help": "Set this to true to receive the locale for users. Defaults to false\n",
                            "in": "requestBody",
                            "type": "boolean"
                        },
                        "limit": {
                            "default": 0,
                            "help": "The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the users list hasn't been reached.\n",
                            "in": "requestBody",
                            "range": {
                                "min": 0
                            },
                            "type": "int"
                        },
                        "token": {
                            "help": "Authentication token bearing required scopes.\nEnvironment variable BOT_TOKEN used by default.\n",
                            "in": "requestBody",
                            "type": "string"
                        }
                    },
                    "http": {
                        "contentType": "application/json",
                        "method": "post",
                        "path": "/api/users.list",
                        "port": 8000
                    },
                    "output": {
                        "contentType": "application/json",
                        "type": "map"
                    }
                }
            },
            "environment": {
                "BOT_TOKEN": {
                    "help": "The Slack bot token",
                    "type": "string"
                }
            },
            "health": {
                "http": {
                    "path": "/health",
                    "port": 8000
                }
            },
            "info": {
                "contact": {
                    "email": "core@openmicroservices.org",
                    "name": "Open Microservices",
                    "url": "https://openmicroservices.org"
                },
                "description": "Wrapper for the Slack API",
                "title": "Slack",
                "version": "0.2.0"
            },
            "lifecycle": {
                "startup": {
                    "command": [
                        "python",
                        "app/main.py"
                    ]
                }
            },
            "oms": 1
        },
        "readme": "# _Slack_ Open Microservice\n\n> Wrapper for the Slack API\n\n[![Open Microservice Specification Version](https://img.shields.io/badge/Open%20Microservice-1.0-477bf3.svg)](https://openmicroservices.org) [![Open Microservices Spectrum Chat](https://withspectrum.github.io/badge/badge.svg)](https://spectrum.chat/open-microservices) [![Open Microservices Code of Conduct](https://img.shields.io/badge/Contributor%20Covenant-v1.4%20adopted-ff69b4.svg)](https://github.com/oms-services/.github/blob/master/CODE_OF_CONDUCT.md) [![Open Microservices Commitzen](https://img.shields.io/badge/commitizen-friendly-brightgreen.svg)](http://commitizen.github.io/cz-cli/) [![PRs Welcome](https://img.shields.io/badge/PRs-welcome-brightgreen.svg)](http://makeapullrequest.com)\n\n## Introduction\n\nThis project is an example implementation of the [Open Microservice Specification](https://openmicroservices.org), a standard originally created at [Storyscript](https://storyscript.io) for building highly-portable \"microservices\" that expose the events, actions, and APIs inside containerized software.\n\n## Getting Started\n\nThe `oms` command-line interface allows you to interact with Open Microservices. If you're interested in creating an Open Microservice the CLI also helps validate, test, and debug your `oms.yml` implementation!\n\nSee the [oms-cli](https://github.com/microservices/oms) project to learn more!\n\n### Installation\n\n```\nnpm install -g @microservices/oms\n```\n\n## Usage\n\n### Open Microservices CLI Usage\n\nOnce you have the [oms-cli](https://github.com/microservices/oms) installed, you can run any of the following commands from within this project's root directory:\n\n#### Actions\n\n##### send\n\n> Sends a message to a channel.\nhttps://api.slack.com/methods/chat.postMessage\n\n##### Action Arguments\n\n| Argument Name | Type | Required | Default | Description |\n|:------------- |:---- |:-------- |:--------|:----------- |\n| text | `string` | `true` | None | Text of the message to send. |\n| channel | `string` | `true` | None | What channel to send message in. This can be a \"#channel\" \"@user\" or a channel id.  |\n| attachments | `list` | `false` | None | No description provided. |\n| token | `string` | `false` | None | Authentication token bearing required scopes. Environment variable BOT_TOKEN used by default.  |\n| BOT_TOKEN | `string` | `false` | None | The Slack bot token |\n\n``` shell\noms run send \\ \n    -a text='*****' \\ \n    -a channel='*****' \\ \n    -a attachments='*****' \\ \n    -a token='*****' \\ \n    -e BOT_TOKEN=$BOT_TOKEN\n```\n\n##### hears\n\n> Triggered anytime a messages matches the pattern\n##### Action Arguments\n\n| Argument Name | Type | Required | Default | Description |\n|:------------- |:---- |:-------- |:--------|:----------- |\n| pattern | `string` | `false` | None | A regexp pattern to filter messages |\n| channel | `string` | `true` | None | Only listen in a specific channel |\n| BOT_TOKEN | `string` | `false` | None | The Slack bot token |\n\n``` shell\noms subscribe hears \\ \n    -a pattern='*****' \\ \n    -a channel='*****' \\ \n    -e BOT_TOKEN=$BOT_TOKEN\n```\n,##### responds\n\n> Triggered by direct messages to the bot\n##### Action Arguments\n\n| Argument Name | Type | Required | Default | Description |\n|:------------- |:---- |:-------- |:--------|:----------- |\n| pattern | `string` | `false` | None | A regexp pattern to filter messages |\n| BOT_TOKEN | `string` | `false` | None | The Slack bot token |\n\n``` shell\noms subscribe responds \\ \n    -a pattern='*****' \\ \n    -e BOT_TOKEN=$BOT_TOKEN\n```\n\n##### users\n\n> \n##### Action Arguments\n\n| Argument Name | Type | Required | Default | Description |\n|:------------- |:---- |:-------- |:--------|:----------- |\n| token | `string` | `false` | None | Authentication token bearing required scopes. Environment variable BOT_TOKEN used by default.  |\n| include_locale | `boolean` | `false` | None | Set this to true to receive the locale for users. Defaults to false  |\n| limit | `int` | `false` | None | The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the users list hasn't been reached.  |\n| cursor | `string` | `false` | None | Paginate through collections of data by setting the cursor parameter to a next_cursor attribute returned by a previous request's response_metadata. Default value fetches the first \"page\" of the collection. See pagination for more detail.  |\n| BOT_TOKEN | `string` | `false` | None | The Slack bot token |\n\n``` shell\noms run users \\ \n    -a token='*****' \\ \n    -a include_locale='*****' \\ \n    -a limit='*****' \\ \n    -a cursor='*****' \\ \n    -e BOT_TOKEN=$BOT_TOKEN\n```\n\n##### channels\n\n> Get a list of channels\n##### Action Arguments\n\n| Argument Name | Type | Required | Default | Description |\n|:------------- |:---- |:-------- |:--------|:----------- |\n| token | `string` | `false` | None | Authentication token bearing required scopes. Environment variable BOT_TOKEN used by default.  |\n| limit | `int` | `false` | None | Limit the number of channels to return. Must be less than 1000. |\n| exclude_archived | `boolean` | `false` | None | Set to true to exclude archived channels from the list |\n| types | `list` | `false` | None | Mix and match channel types: public_channel, private_channel, mpim, im Default is public_channel only.  |\n| BOT_TOKEN | `string` | `false` | None | The Slack bot token |\n\n``` shell\noms run channels \\ \n    -a token='*****' \\ \n    -a limit='*****' \\ \n    -a exclude_archived='*****' \\ \n    -a types='*****' \\ \n    -e BOT_TOKEN=$BOT_TOKEN\n```\n\n##### directChannels\n\n> Lists direct message channels for the calling user.\n##### Action Arguments\n\n| Argument Name | Type | Required | Default | Description |\n|:------------- |:---- |:-------- |:--------|:----------- |\n| token | `string` | `false` | None | Authentication token bearing required scopes. Environment variable BOT_TOKEN used by default.  |\n| limit | `int` | `false` | None | Limit the number of channels to return. Must be less than 1000. |\n| BOT_TOKEN | `string` | `false` | None | The Slack bot token |\n\n``` shell\noms run directChannels \\ \n    -a token='*****' \\ \n    -a limit='*****' \\ \n    -e BOT_TOKEN=$BOT_TOKEN\n```\n\n## Contributing\n\nAll suggestions in how to improve the specification and this guide are very welcome. Feel free share your thoughts in the Issue tracker, or even better, fork the repository to implement your own ideas and submit a pull request.\n\n[![Edit slack on CodeSandbox](https://codesandbox.io/static/img/play-codesandbox.svg)](https://codesandbox.io/s/github/oms-services/slack)\n\nThis project is guided by [Contributor Covenant](https://github.com/oms-services/.github/blob/master/CODE_OF_CONDUCT.md). Please read out full [Contribution Guidelines](https://github.com/oms-services/.github/blob/master/CONTRIBUTING.md).\n\n## Additional Resources\n\n* [Install the CLI](https://github.com/microservices/oms) - The OMS CLI helps developers create, test, validate, and build microservices.\n* [Example OMS Services](https://github.com/oms-services) - Examples of OMS-compliant services written in a variety of languages.\n* [Example Language Implementations](https://github.com/microservices) - Find tooling & language implementations in Node, Python, Scala, Java, Clojure.\n* [Storyscript Hub](https://hub.storyscript.io) - A public registry of OMS services.\n* [Community Chat](https://spectrum.chat/open-microservices) - Have ideas? Questions? Join us on Spectrum.\n",
        "service": {
            "alias": "slack",
            "description": "Slack bot microservice",
            "isCertified": true,
            "name": "slack",
            "owner": {
                "username": "oms-services"
            },
            "public": true,
            "topics": [
                "slack-bot",
                "slack",
                "microservice",
                "oms"
            ]
        },
        "serviceUuid": "f7f099d5-da2c-45eb-b56a-84d1f7756a42",
        "state": "BETA"
    },
    {
        "configuration": {
            "actions": {
                "bot": {
                    "events": {
                        "hears": {
                            "arguments": {
                                "channel": {
                                    "help": "Only listen in a specific channel",
                                    "in": "requestBody",
                                    "required": true,
                                    "type": "string"
                                },
                                "pattern": {
                                    "help": "A regexp pattern to filter messages",
                                    "in": "requestBody",
                                    "type": "string"
                                }
                            },
                            "help": "Triggered anytime a messages matches the pattern",
                            "http": {
                                "port": 8000,
                                "subscribe": {
                                    "contentType": "application/json",
                                    "method": "post",
                                    "path": "/subscribe"
                                },
                                "unsubscribe": {
                                    "contentType": "application/json",
                                    "method": "post",
                                    "path": "/unsubscribe"
                                }
                            }
                        },
                        "responds": {
                            "arguments": {
                                "pattern": {
                                    "help": "A regexp pattern to filter messages",
                                    "in": "requestBody",
                                    "type": "string"
                                }
                            },
                            "help": "Triggered by direct messages to the bot",
                            "http": {
                                "port": 8000,
                                "subscribe": {
                                    "contentType": "application/json",
                                    "method": "post",
                                    "path": "/subscribe"
                                },
                                "unsubscribe": {
                                    "contentType": "application/json",
                                    "method": "post",
                                    "path": "/unsubscribe"
                                }
                            },
                            "output": {
                                "contentType": "application/json",
                                "properties": {
                                    "channel": {
                                        "help": "The channel ID",
                                        "type": "string"
                                    },
                                    "client_msg_id": {
                                        "help": "The message ID",
                                        "type": "string"
                                    },
                                    "text": {
                                        "help": "The message text",
                                        "type": "string"
                                    },
                                    "ts": {
                                        "help": "The message timestamp (eg: \"1535474523.000100\")",
                                        "type": "string"
                                    },
                                    "user": {
                                        "help": "The user ID",
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    },
                    "help": "Start a Slack bot"
                },
                "channels": {
                    "arguments": {
                        "exclude_archived": {
                            "default": false,
                            "help": "Set to true to exclude archived channels from the list",
                            "in": "requestBody",
                            "type": "boolean"
                        },
                        "limit": {
                            "default": 100,
                            "help": "Limit the number of channels to return. Must be less than 1000.",
                            "in": "requestBody",
                            "type": "int"
                        },
                        "token": {
                            "help": "Authentication token bearing required scopes.\nEnvironment variable BOT_TOKEN used by default.\n",
                            "in": "requestBody",
                            "type": "string"
                        },
                        "types": {
                            "help": "Mix and match channel types: public_channel, private_channel, mpim, im\nDefault is public_channel only.\n",
                            "in": "requestBody",
                            "type": "list"
                        }
                    },
                    "help": "Get a list of channels",
                    "http": {
                        "contentType": "application/json",
                        "method": "post",
                        "path": "/api/channels.list",
                        "port": 8000
                    },
                    "output": {
                        "contentType": "application/json",
                        "type": "map"
                    }
                },
                "directChannels": {
                    "arguments": {
                        "limit": {
                            "default": 100,
                            "help": "Limit the number of channels to return. Must be less than 1000.",
                            "in": "requestBody",
                            "type": "int"
                        },
                        "token": {
                            "help": "Authentication token bearing required scopes.\nEnvironment variable BOT_TOKEN used by default.\n",
                            "in": "requestBody",
                            "type": "string"
                        }
                    },
                    "help": "Lists direct message channels for the calling user.",
                    "http": {
                        "contentType": "application/json",
                        "method": "post",
                        "path": "/api/im.list",
                        "port": 8000
                    },
                    "output": {
                        "contentType": "application/json",
                        "type": "map"
                    }
                },
                "send": {
                    "arguments": {
                        "attachments": {
                            "in": "requestBody",
                            "type": "list"
                        },
                        "channel": {
                            "help": "What channel to send message in.\nThis can be a \"#channel\" \"@user\" or a channel id.\n",
                            "in": "requestBody",
                            "required": true,
                            "type": "string"
                        },
                        "text": {
                            "help": "Text of the message to send.",
                            "in": "requestBody",
                            "required": true,
                            "type": "string"
                        },
                        "token": {
                            "help": "Authentication token bearing required scopes.\nEnvironment variable BOT_TOKEN used by default.\n",
                            "in": "requestBody",
                            "type": "string"
                        }
                    },
                    "help": "Sends a message to a channel.\nhttps://api.slack.com/methods/chat.postMessage\n",
                    "http": {
                        "contentType": "application/json",
                        "method": "post",
                        "path": "/api/chat.postMessage",
                        "port": 8000
                    },
                    "output": {
                        "contentType": "application/json",
                        "type": "map"
                    }
                },
                "users": {
                    "arguments": {
                        "cursor": {
                            "help": "Paginate through collections of data by setting the cursor parameter to a next_cursor attribute returned by a previous request's response_metadata. Default value fetches the first \"page\" of the collection. See pagination for more detail.\n",
                            "in": "requestBody",
                            "type": "string"
                        },
                        "include_locale": {
                            "help": "Set this to true to receive the locale for users. Defaults to false\n",
                            "in": "requestBody",
                            "type": "boolean"
                        },
                        "limit": {
                            "default": 0,
                            "help": "The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the users list hasn't been reached.\n",
                            "in": "requestBody",
                            "range": {
                                "min": 0
                            },
                            "type": "int"
                        },
                        "token": {
                            "help": "Authentication token bearing required scopes.\nEnvironment variable BOT_TOKEN used by default.\n",
                            "in": "requestBody",
                            "type": "string"
                        }
                    },
                    "http": {
                        "contentType": "application/json",
                        "method": "post",
                        "path": "/api/users.list",
                        "port": 8000
                    },
                    "output": {
                        "contentType": "application/json",
                        "type": "map"
                    }
                }
            },
            "environment": {
                "BOT_TOKEN": {
                    "help": "The Slack bot token",
                    "type": "string"
                }
            },
            "health": {
                "http": {
                    "path": "/health",
                    "port": 8000
                }
            },
            "info": {
                "contact": {
                    "email": "core@openmicroservices.org",
                    "name": "Open Microservices",
                    "url": "https://openmicroservices.org"
                },
                "description": "Wrapper for the Slack API",
                "title": "Slack",
                "version": "0.2.0"
            },
            "lifecycle": {
                "startup": {
                    "command": [
                        "python",
                        "app/main.py"
                    ]
                }
            },
            "oms": 1
        },
        "readme": "# _Slack_ Open Microservice\n\n> Wrapper for the Slack API\n\n[![Open Microservice Specification Version](https://img.shields.io/badge/Open%20Microservice-1.0-477bf3.svg)](https://openmicroservices.org) [![Open Microservices Spectrum Chat](https://withspectrum.github.io/badge/badge.svg)](https://spectrum.chat/open-microservices) [![Open Microservices Code of Conduct](https://img.shields.io/badge/Contributor%20Covenant-v1.4%20adopted-ff69b4.svg)](https://github.com/oms-services/.github/blob/master/CODE_OF_CONDUCT.md) [![Open Microservices Commitzen](https://img.shields.io/badge/commitizen-friendly-brightgreen.svg)](http://commitizen.github.io/cz-cli/) [![PRs Welcome](https://img.shields.io/badge/PRs-welcome-brightgreen.svg)](http://makeapullrequest.com)\n\n## Introduction\n\nThis project is an example implementation of the [Open Microservice Specification](https://openmicroservices.org), a standard originally created at [Storyscript](https://storyscript.io) for building highly-portable \"microservices\" that expose the events, actions, and APIs inside containerized software.\n\n## Getting Started\n\nThe `oms` command-line interface allows you to interact with Open Microservices. If you're interested in creating an Open Microservice the CLI also helps validate, test, and debug your `oms.yml` implementation!\n\nSee the [oms-cli](https://github.com/microservices/oms) project to learn more!\n\n### Installation\n\n```\nnpm install -g @microservices/oms\n```\n\n## Usage\n\n### Open Microservices CLI Usage\n\nOnce you have the [oms-cli](https://github.com/microservices/oms) installed, you can run any of the following commands from within this project's root directory:\n\n#### Actions\n\n##### send\n\n> Sends a message to a channel.\nhttps://api.slack.com/methods/chat.postMessage\n\n##### Action Arguments\n\n| Argument Name | Type | Required | Default | Description |\n|:------------- |:---- |:-------- |:--------|:----------- |\n| text | `string` | `true` | None | Text of the message to send. |\n| channel | `string` | `true` | None | What channel to send message in. This can be a \"#channel\" \"@user\" or a channel id.  |\n| attachments | `list` | `false` | None | No description provided. |\n| token | `string` | `false` | None | Authentication token bearing required scopes. Environment variable BOT_TOKEN used by default.  |\n| BOT_TOKEN | `string` | `false` | None | The Slack bot token |\n\n``` shell\noms run send \\ \n    -a text='*****' \\ \n    -a channel='*****' \\ \n    -a attachments='*****' \\ \n    -a token='*****' \\ \n    -e BOT_TOKEN=$BOT_TOKEN\n```\n\n##### hears\n\n> Triggered anytime a messages matches the pattern\n##### Action Arguments\n\n| Argument Name | Type | Required | Default | Description |\n|:------------- |:---- |:-------- |:--------|:----------- |\n| pattern | `string` | `false` | None | A regexp pattern to filter messages |\n| channel | `string` | `true` | None | Only listen in a specific channel |\n| BOT_TOKEN | `string` | `false` | None | The Slack bot token |\n\n``` shell\noms subscribe hears \\ \n    -a pattern='*****' \\ \n    -a channel='*****' \\ \n    -e BOT_TOKEN=$BOT_TOKEN\n```\n,##### responds\n\n> Triggered by direct messages to the bot\n##### Action Arguments\n\n| Argument Name | Type | Required | Default | Description |\n|:------------- |:---- |:-------- |:--------|:----------- |\n| pattern | `string` | `false` | None | A regexp pattern to filter messages |\n| BOT_TOKEN | `string` | `false` | None | The Slack bot token |\n\n``` shell\noms subscribe responds \\ \n    -a pattern='*****' \\ \n    -e BOT_TOKEN=$BOT_TOKEN\n```\n\n##### users\n\n> \n##### Action Arguments\n\n| Argument Name | Type | Required | Default | Description |\n|:------------- |:---- |:-------- |:--------|:----------- |\n| token | `string` | `false` | None | Authentication token bearing required scopes. Environment variable BOT_TOKEN used by default.  |\n| include_locale | `boolean` | `false` | None | Set this to true to receive the locale for users. Defaults to false  |\n| limit | `int` | `false` | None | The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the users list hasn't been reached.  |\n| cursor | `string` | `false` | None | Paginate through collections of data by setting the cursor parameter to a next_cursor attribute returned by a previous request's response_metadata. Default value fetches the first \"page\" of the collection. See pagination for more detail.  |\n| BOT_TOKEN | `string` | `false` | None | The Slack bot token |\n\n``` shell\noms run users \\ \n    -a token='*****' \\ \n    -a include_locale='*****' \\ \n    -a limit='*****' \\ \n    -a cursor='*****' \\ \n    -e BOT_TOKEN=$BOT_TOKEN\n```\n\n##### channels\n\n> Get a list of channels\n##### Action Arguments\n\n| Argument Name | Type | Required | Default | Description |\n|:------------- |:---- |:-------- |:--------|:----------- |\n| token | `string` | `false` | None | Authentication token bearing required scopes. Environment variable BOT_TOKEN used by default.  |\n| limit | `int` | `false` | None | Limit the number of channels to return. Must be less than 1000. |\n| exclude_archived | `boolean` | `false` | None | Set to true to exclude archived channels from the list |\n| types | `list` | `false` | None | Mix and match channel types: public_channel, private_channel, mpim, im Default is public_channel only.  |\n| BOT_TOKEN | `string` | `false` | None | The Slack bot token |\n\n``` shell\noms run channels \\ \n    -a token='*****' \\ \n    -a limit='*****' \\ \n    -a exclude_archived='*****' \\ \n    -a types='*****' \\ \n    -e BOT_TOKEN=$BOT_TOKEN\n```\n\n##### directChannels\n\n> Lists direct message channels for the calling user.\n##### Action Arguments\n\n| Argument Name | Type | Required | Default | Description |\n|:------------- |:---- |:-------- |:--------|:----------- |\n| token | `string` | `false` | None | Authentication token bearing required scopes. Environment variable BOT_TOKEN used by default.  |\n| limit | `int` | `false` | None | Limit the number of channels to return. Must be less than 1000. |\n| BOT_TOKEN | `string` | `false` | None | The Slack bot token |\n\n``` shell\noms run directChannels \\ \n    -a token='*****' \\ \n    -a limit='*****' \\ \n    -e BOT_TOKEN=$BOT_TOKEN\n```\n\n## Contributing\n\nAll suggestions in how to improve the specification and this guide are very welcome. Feel free share your thoughts in the Issue tracker, or even better, fork the repository to implement your own ideas and submit a pull request.\n\n[![Edit slack on CodeSandbox](https://codesandbox.io/static/img/play-codesandbox.svg)](https://codesandbox.io/s/github/oms-services/slack)\n\nThis project is guided by [Contributor Covenant](https://github.com/oms-services/.github/blob/master/CODE_OF_CONDUCT.md). Please read out full [Contribution Guidelines](https://github.com/oms-services/.github/blob/master/CONTRIBUTING.md).\n\n## Additional Resources\n\n* [Install the CLI](https://github.com/microservices/oms) - The OMS CLI helps developers create, test, validate, and build microservices.\n* [Example OMS Services](https://github.com/oms-services) - Examples of OMS-compliant services written in a variety of languages.\n* [Example Language Implementations](https://github.com/microservices) - Find tooling & language implementations in Node, Python, Scala, Java, Clojure.\n* [Storyscript Hub](https://hub.storyscript.io) - A public registry of OMS services.\n* [Community Chat](https://spectrum.chat/open-microservices) - Have ideas? Questions? Join us on Spectrum.\n",
        "service": {
            "alias": "slack",
            "description": "Slack bot microservice",
            "isCertified": true,
            "name": "slack",
            "owner": {
                "username": "oms-services"
            },
            "public": true,
            "topics": [
                "slack-bot",
                "slack",
                "microservice",
                "oms"
            ]
        },
        "serviceUuid": "f7f099d5-da2c-45eb-b56a-84d1f7756a42",
        "state": "BETA"
    },
    {
        "configuration": {
            "actions": {
                "job": {
                    "events": {
                        "schedule": {
                            "arguments": {
                                "pattern": {
                                    "help": "A cron pattern (e.g. '* * * * *')",
                                    "in": "requestBody",
                                    "type": "string"
                                }
                            },
                            "help": "Triggered anytime a cron job is ticked",
                            "http": {
                                "port": 5000,
                                "subscribe": {
                                    "contentType": "application/json",
                                    "method": "post",
                                    "path": "/subscribe"
                                },
                                "unsubscribe": {
                                    "contentType": "application/json",
                                    "method": "post",
                                    "path": "/unsubscribe"
                                }
                            },
                            "output": {
                                "contentType": "application/json",
                                "properties": {
                                    "pattern": {
                                        "help": "The pattern that has been scheduled",
                                        "type": "string"
                                    },
                                    "ticked": {
                                        "help": "should be true",
                                        "type": "boolean"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    },
                    "help": "Schedule a cron job"
                }
            },
            "health": {
                "http": {
                    "path": "/health",
                    "port": 5000
                }
            },
            "info": {
                "description": "Schedule events using patterns",
                "title": "cron",
                "version": "1.0.0"
            },
            "lifecycle": {
                "startup": {
                    "command": [
                        "node",
                        "index.js"
                    ]
                }
            },
            "oms": 1
        },
        "readme": null,
        "service": {
            "alias": null,
            "description": "node-cron as a microservice",
            "isCertified": false,
            "name": "cron",
            "owner": {
                "username": "jean"
            },
            "public": true,
            "topics": [
                "cron",
                "schedule"
            ]
        },
        "serviceUuid": "ed9eb273-9b0d-4065-b0b7-82a1ff351183",
        "state": "BETA"
    },
    {
        "configuration": {
            "actions": {
                "createTable": {
                    "arguments": {
                        "columns": {
                            "help": "A map of the to be created columns with their respective types\n",
                            "in": "requestBody",
                            "required": true,
                            "type": "map"
                        },
                        "table": {
                            "help": "The table to create",
                            "in": "requestBody",
                            "required": true,
                            "type": "string"
                        }
                    },
                    "help": "Create a table",
                    "http": {
                        "contentType": "application/json",
                        "method": "post",
                        "path": "/tables/create",
                        "port": 8000
                    },
                    "output": {
                        "contentType": "application/json",
                        "type": "string"
                    }
                },
                "delete": {
                    "arguments": {
                        "table": {
                            "help": "The table to delete entries from",
                            "in": "requestBody",
                            "required": true,
                            "type": "string"
                        },
                        "where": {
                            "help": "A query string of the parameters to filter on, e.g.\n`{'columnName1': 'value2', 'columnName2': 'value2'}`\nUse `{'$or': {cond1, cond2}} for `OR` chains.\nUse e.g. `{'columName': {'$gt': 20}}} for more advanced comparisons.\n",
                            "in": "requestBody",
                            "required": false,
                            "type": "any"
                        }
                    },
                    "help": "Delete entries from a table",
                    "http": {
                        "contentType": "application/json",
                        "method": "post",
                        "path": "/delete",
                        "port": 8000
                    },
                    "output": {
                        "contentType": "application/json",
                        "type": "string"
                    }
                },
                "dropTable": {
                    "arguments": {
                        "table": {
                            "help": "The table to drop",
                            "in": "requestBody",
                            "required": true,
                            "type": "string"
                        }
                    },
                    "help": "Drop a table",
                    "http": {
                        "contentType": "application/json",
                        "method": "post",
                        "path": "/tables/drop",
                        "port": 8000
                    },
                    "output": {
                        "contentType": "application/json",
                        "type": "string"
                    }
                },
                "exec": {
                    "arguments": {
                        "data": {
                            "help": "If your query contains named parameters, such as\nSELECT * from my_table where name=%(username)s\nthen specify \"data\" as {\"name\": \"foo\"}.\n",
                            "in": "requestBody",
                            "required": false,
                            "type": "map"
                        },
                        "query": {
                            "help": "The query",
                            "in": "requestBody",
                            "required": true,
                            "type": "string"
                        }
                    },
                    "help": "Run a SELECT statement",
                    "http": {
                        "contentType": "application/json",
                        "method": "post",
                        "path": "/execute",
                        "port": 8000
                    },
                    "output": {
                        "contentType": "application/json",
                        "type": "string"
                    }
                },
                "insert": {
                    "arguments": {
                        "table": {
                            "help": "The table to insert entries into",
                            "in": "requestBody",
                            "required": true,
                            "type": "string"
                        },
                        "values": {
                            "help": "A map or a list of maps with the values to insert into the table.\n",
                            "in": "requestBody",
                            "required": true,
                            "type": "any"
                        }
                    },
                    "help": "Insert one or more entries into a table",
                    "http": {
                        "contentType": "application/json",
                        "method": "post",
                        "path": "/insert",
                        "port": 8000
                    },
                    "output": {
                        "contentType": "application/json",
                        "type": "string"
                    }
                },
                "select": {
                    "arguments": {
                        "table": {
                            "help": "The table to select entries from",
                            "in": "requestBody",
                            "required": true,
                            "type": "string"
                        },
                        "where": {
                            "help": "A query string of the parameters to filter on, e.g.\n`{'columnName1': 'value2', 'columnName2': 'value2'}`\nUse `{'$or': {cond1, cond2}} for `OR` chains.\nUse e.g. `{'columName': {'$gt': 20}}} for more advanced comparisons.\n",
                            "in": "requestBody",
                            "required": true,
                            "type": "any"
                        }
                    },
                    "help": "Select entries from a table",
                    "http": {
                        "contentType": "application/json",
                        "method": "post",
                        "path": "/select",
                        "port": 8000
                    },
                    "output": {
                        "contentType": "application/json",
                        "type": "string"
                    }
                },
                "update": {
                    "arguments": {
                        "table": {
                            "help": "The table to update entries in",
                            "in": "requestBody",
                            "required": true,
                            "type": "string"
                        },
                        "values": {
                            "help": "A map of values to update.\n",
                            "in": "requestBody",
                            "required": true,
                            "type": "map"
                        },
                        "where": {
                            "help": "A query string of the parameters to filter on, e.g.\n`{'columnName1': 'value2', 'columnName2': 'value2'}`\nUse `{'$or': {cond1, cond2}} for `OR` chains.\nUse e.g. `{'columName': {'$gt': 20}}} for more advanced comparisons.\n",
                            "in": "requestBody",
                            "required": false,
                            "type": "any"
                        }
                    },
                    "help": "Update entries in a table",
                    "http": {
                        "contentType": "application/json",
                        "method": "post",
                        "path": "/update",
                        "port": 8000
                    },
                    "output": {
                        "contentType": "application/json",
                        "type": "string"
                    }
                }
            },
            "environment": {
                "MYSQL_DATABASE": {
                    "help": "The name of the database on the MySQL server",
                    "required": true,
                    "type": "string"
                },
                "MYSQL_HOST": {
                    "help": "The hostname of the MySQL server to connect to",
                    "required": true,
                    "type": "string"
                },
                "MYSQL_PASSWORD": {
                    "help": "The username for connecting with the MySQL database",
                    "required": true,
                    "type": "string"
                },
                "MYSQL_PORT": {
                    "help": "The port of the MySQL server to connect to (default:3306)",
                    "type": "string"
                },
                "MYSQL_USER": {
                    "help": "The username for connecting with the MySQL database",
                    "required": true,
                    "type": "string"
                }
            },
            "health": {
                "http": {
                    "path": "/health",
                    "port": 8000
                }
            },
            "info": {
                "description": "This is a mysql service",
                "title": "MySQL",
                "version": "1.0.0"
            },
            "lifecycle": {
                "startup": {
                    "command": [
                        "python",
                        "/app/app.py"
                    ]
                }
            },
            "omg": 1
        },
        "readme": "# _MySQL_ OMG Microservice\n\n[![Open Microservice Guide](https://img.shields.io/badge/OMG%20Enabled-\ud83d\udc4d-green.svg?)](https://microservice.guide)\n\nInteract with a MySQL database.\n\n## Direct usage in [Storyscript](https://storyscript.io/):\n\n### Create table\n```coffee\nmysql createTable table: 'books' columns: {\n  'id': 'serial primary key',\n  'title': 'varchar(100)'\n}\n```\n\n### Insert an entry\n```coffee\nmysql insert table: 'books' values: {'title': 'Ulysses'}\n# result: [1, 'Ulysses']\n```\n\n### Insert multiple entries\n```coffee\nmysql insert table: 'books' values: [{'title': 'Moby Dick'}, {'title': 'War and Peace'}]\n# result: [[2, 'Ulysses'], [3, 'War and Peace']]\n```\n\n### Select entries\n- `$and` and `$or` can be used to combine queries\n- `$lt`, `$lte`, `$gt`, `$gte` and `$eq` can be used as comparison operators\n- if no comparison operators is provided, the query will match on equality\n\n```coffee\nmysql select table: 'books' where: {'title': 'Moby Dick'}\n# result: [[2, 'Moby Dick']\n```\n\n```coffee\nmysql select table: 'books' where: {'$or': {title: 'Moby Dick', 'id': {'$lt': 2}}}\n# result: [[1, 'Ulysses'], [2, 'Moby Dick']]\n```\n\n### Update entries\n```coffee\nmysql update table: 'books' values: {'title': 'UPDATED'} where: {'id': {'$gt': 2}}\n# result: [[3, 'UPDATED']]\n```\n\nThe where query is optional, but without it _all_ columns will be updated:\n```coffee\nmysql update table: 'books' values: {'title': 'UPDATED'}\n# result: [\n#     [1, 'Ulysses'],\n#     [2, 'Ulysses'],\n#     [3, 'War and Peace']\n# ]\n```\n\n### Delete entries\n`delete` uses a `where` select query and will return the deleted columns:\n```coffee\nmysql delete table: 'books' where: {'title': 'Moby Dick'}\n# result: [[2, 'Moby Dick']]\n```\nThe where query is optional, but without it _all_ columns will be deleted.\n\n### Drop table\nAn entire table can be dropped with `drop_table`:\n```coffee\nmysql dropTable table: 'books'\n```\n\n### Execute\n```coffee\nresult = mysql exec query: 'select * from my_table where name=%(username)s' data: {'username': 'jill'}\n# result is an array, with records as JSON objects inside it.\n```\n\nCurious to [learn more](https://docs.storyscript.io/)?\n\n\u2728\ud83c\udf70\u2728\n\n## Usage with [OMG CLI](https://www.npmjs.com/package/omg)\n\n### Create table\n```shell\n$ omg run createTable -a table=<TABLE> -a columns=<MAP_OF_COLUMNS> -e MYSQL_HOST=<MYSQL_HOST> -e MYSQL_USER=<MYSQL_USER> -e MYSQL_PASSWORD=<MYSQL_PASSWORD> -e MYSQL_DATABASE=<MYSQL_DATABASE> -e MYSQL_PORT=<MYSQL_PORT>\n```\n### Insert an entry\n```shell\n$ omg run insert -a table=<TABLE> -a values=<LIST_OF_MAP_VALUES> -e MYSQL_HOST=<MYSQL_HOST> -e MYSQL_USER=<MYSQL_USER> -e MYSQL_PASSWORD=<MYSQL_PASSWORD> -e MYSQL_DATABASE=<MYSQL_DATABASE> -e MYSQL_PORT=<MYSQL_PORT>\n```\n### Select entries\n```shell\n$ omg run select -a table=<TABLE> -a where=<PARAMETERS_TO_FILTER> -e MYSQL_HOST=<MYSQL_HOST> -e MYSQL_USER=<MYSQL_USER> -e MYSQL_PASSWORD=<MYSQL_PASSWORD> -e MYSQL_DATABASE=<MYSQL_DATABASE> -e MYSQL_PORT=<MYSQL_PORT>\n```\n### Update entries\n```shell\n$ omg run update -a table=<TABLE> -a values=<LIST_OF_MAP_VALUES> -a where=<PARAMETERS_TO_FILTER> -e MYSQL_HOST=<MYSQL_HOST> -e MYSQL_USER=<MYSQL_USER> -e MYSQL_PASSWORD=<MYSQL_PASSWORD> -e MYSQL_DATABASE=<MYSQL_DATABASE> -e MYSQL_PORT=<MYSQL_PORT>\n```\n### Delete entries\n```shell\n$ omg run delete -a table=<TABLE> -a where=<PARAMETERS_TO_FILTER> -e MYSQL_HOST=<MYSQL_HOST> -e MYSQL_USER=<MYSQL_USER> -e MYSQL_PASSWORD=<MYSQL_PASSWORD> -e MYSQL_DATABASE=<MYSQL_DATABASE> -e MYSQL_PORT=<MYSQL_PORT>\n```\n### Drop table\n```shell\n$ omg run dropTable -a table=<TABLE> -e MYSQL_HOST=<MYSQL_HOST> -e MYSQL_USER=<MYSQL_USER> -e MYSQL_PASSWORD=<MYSQL_PASSWORD> -e MYSQL_DATABASE=<MYSQL_DATABASE> -e MYSQL_PORT=<MYSQL_PORT>\n```\n### Execute\n```shell\n$ omg run exec -a query=<QUERY> -a data=<MAP_DATA> -e MYSQL_HOST=<MYSQL_HOST> -e MYSQL_USER=<MYSQL_USER> -e MYSQL_PASSWORD=<MYSQL_PASSWORD> -e MYSQL_DATABASE=<MYSQL_DATABASE> -e MYSQL_PORT=<MYSQL_PORT>\n```\n\n**Note**: The OMG CLI requires [Docker](https://docs.docker.com/install/) to be installed.\n\n## License\n[MIT License](https://github.com/omg-services/mysql/blob/master/LICENSE).\n",
        "service": {
            "alias": null,
            "description": "Mysql as a service",
            "isCertified": false,
            "name": "mysql",
            "owner": {
                "username": "ht68rohit"
            },
            "public": true,
            "topics": [
                "microservice",
                "mysql",
                "mysql-database"
            ]
        },
        "serviceUuid": "74159524-c2b5-465b-8b30-ddb248a45fad",
        "state": "BETA"
    },
    {
        "configuration": {
            "actions": {
                "generate": {
                    "help": "Generate a UUID v4 like 38788d28-6526-45c5-acf9-bb179160c7d7\n",
                    "http": {
                        "contentType": "application/json",
                        "method": "get",
                        "path": "/generate",
                        "port": 8000
                    },
                    "output": {
                        "type": "string"
                    }
                }
            },
            "info": {
                "contact": {
                    "email": "core@openmicroservices.org",
                    "name": "Open Microservices",
                    "url": "https://openmicroservices.org"
                },
                "description": "This is a UUID service",
                "title": "UUID",
                "version": "1.0.0"
            },
            "lifecycle": {
                "startup": {
                    "command": [
                        "python",
                        "/app/app.py"
                    ]
                }
            },
            "oms": 1
        },
        "readme": "# _UUID_ Open Microservice\n\n> This is a UUID service\n\n[![Open Microservice Specification Version](https://img.shields.io/badge/Open%20Microservice-1.0-477bf3.svg)](https://openmicroservices.org) [![Open Microservices Spectrum Chat](https://withspectrum.github.io/badge/badge.svg)](https://spectrum.chat/open-microservices) [![Open Microservices Code of Conduct](https://img.shields.io/badge/Contributor%20Covenant-v1.4%20adopted-ff69b4.svg)](https://github.com/oms-services/.github/blob/master/CODE_OF_CONDUCT.md) [![Open Microservices Commitzen](https://img.shields.io/badge/commitizen-friendly-brightgreen.svg)](http://commitizen.github.io/cz-cli/) [![PRs Welcome](https://img.shields.io/badge/PRs-welcome-brightgreen.svg)](http://makeapullrequest.com)\n\n## Introduction\n\nThis project is an example implementation of the [Open Microservice Specification](https://openmicroservices.org), a standard originally created at [Storyscript](https://storyscript.io) for building highly-portable \"microservices\" that expose the events, actions, and APIs inside containerized software.\n\n## Getting Started\n\nThe `oms` command-line interface allows you to interact with Open Microservices. If you're interested in creating an Open Microservice the CLI also helps validate, test, and debug your `oms.yml` implementation!\n\nSee the [oms-cli](https://github.com/microservices/oms) project to learn more!\n\n### Installation\n\n```\nnpm install -g @microservices/oms\n```\n\n## Usage\n\n### Open Microservices CLI Usage\n\nOnce you have the [oms-cli](https://github.com/microservices/oms) installed, you can run any of the following commands from within this project's root directory:\n\n#### Actions\n\n##### generate\n\n> Generate a UUID v4 like 38788d28-6526-45c5-acf9-bb179160c7d7\n\n```shell\noms run generate\n```\n\n## Contributing\n\nAll suggestions in how to improve the specification and this guide are very welcome. Feel free share your thoughts in the Issue tracker, or even better, fork the repository to implement your own ideas and submit a pull request.\n\n[![Edit uuid on CodeSandbox](https://codesandbox.io/static/img/play-codesandbox.svg)](https://codesandbox.io/s/github/oms-services/uuid)\n\nThis project is guided by [Contributor Covenant](https://github.com/oms-services/.github/blob/master/CODE_OF_CONDUCT.md). Please read out full [Contribution Guidelines](https://github.com/oms-services/.github/blob/master/CONTRIBUTING.md).\n\n## Additional Resources\n\n- [Install the CLI](https://github.com/microservices/oms) - The OMS CLI helps developers create, test, validate, and build microservices.\n- [Example OMS Services](https://github.com/oms-services) - Examples of OMS-compliant services written in a variety of languages.\n- [Example Language Implementations](https://github.com/microservices) - Find tooling & language implementations in Node, Python, Scala, Java, Clojure.\n- [Storyscript Hub](https://hub.storyscript.io) - A public registry of OMS services.\n- [Community Chat](https://spectrum.chat/open-microservices) - Have ideas? Questions? Join us on Spectrum.\n",
        "service": {
            "alias": "uuid",
            "description": "UUID generator",
            "isCertified": true,
            "name": "uuid",
            "owner": {
                "username": "oms-services"
            },
            "public": true,
            "topics": [
                "uuid-generator",
                "microservice",
                "open-microservice",
                "oms"
            ]
        },
        "serviceUuid": "f156707b-594c-4cff-8e09-45c196024364",
        "state": "BETA"
    },
    {
        "configuration": {
            "actions": {
                "generate": {
                    "help": "Generate a UUID v4 like 38788d28-6526-45c5-acf9-bb179160c7d7\n",
                    "http": {
                        "contentType": "application/json",
                        "method": "get",
                        "path": "/generate",
                        "port": 8000
                    },
                    "output": {
                        "type": "string"
                    }
                }
            },
            "info": {
                "contact": {
                    "email": "core@openmicroservices.org",
                    "name": "Open Microservices",
                    "url": "https://openmicroservices.org"
                },
                "description": "This is a UUID service",
                "title": "UUID",
                "version": "1.0.0"
            },
            "lifecycle": {
                "startup": {
                    "command": [
                        "python",
                        "/app/app.py"
                    ]
                }
            },
            "oms": 1
        },
        "readme": "# _UUID_ Open Microservice\n\n> This is a UUID service\n\n[![Open Microservice Specification Version](https://img.shields.io/badge/Open%20Microservice-1.0-477bf3.svg)](https://openmicroservices.org) [![Open Microservices Spectrum Chat](https://withspectrum.github.io/badge/badge.svg)](https://spectrum.chat/open-microservices) [![Open Microservices Code of Conduct](https://img.shields.io/badge/Contributor%20Covenant-v1.4%20adopted-ff69b4.svg)](https://github.com/oms-services/.github/blob/master/CODE_OF_CONDUCT.md) [![Open Microservices Commitzen](https://img.shields.io/badge/commitizen-friendly-brightgreen.svg)](http://commitizen.github.io/cz-cli/) [![PRs Welcome](https://img.shields.io/badge/PRs-welcome-brightgreen.svg)](http://makeapullrequest.com)\n\n## Introduction\n\nThis project is an example implementation of the [Open Microservice Specification](https://openmicroservices.org), a standard originally created at [Storyscript](https://storyscript.io) for building highly-portable \"microservices\" that expose the events, actions, and APIs inside containerized software.\n\n## Getting Started\n\nThe `oms` command-line interface allows you to interact with Open Microservices. If you're interested in creating an Open Microservice the CLI also helps validate, test, and debug your `oms.yml` implementation!\n\nSee the [oms-cli](https://github.com/microservices/oms) project to learn more!\n\n### Installation\n\n```\nnpm install -g @microservices/oms\n```\n\n## Usage\n\n### Open Microservices CLI Usage\n\nOnce you have the [oms-cli](https://github.com/microservices/oms) installed, you can run any of the following commands from within this project's root directory:\n\n#### Actions\n\n##### generate\n\n> Generate a UUID v4 like 38788d28-6526-45c5-acf9-bb179160c7d7\n\n```shell\noms run generate\n```\n\n## Contributing\n\nAll suggestions in how to improve the specification and this guide are very welcome. Feel free share your thoughts in the Issue tracker, or even better, fork the repository to implement your own ideas and submit a pull request.\n\n[![Edit uuid on CodeSandbox](https://codesandbox.io/static/img/play-codesandbox.svg)](https://codesandbox.io/s/github/oms-services/uuid)\n\nThis project is guided by [Contributor Covenant](https://github.com/oms-services/.github/blob/master/CODE_OF_CONDUCT.md). Please read out full [Contribution Guidelines](https://github.com/oms-services/.github/blob/master/CONTRIBUTING.md).\n\n## Additional Resources\n\n- [Install the CLI](https://github.com/microservices/oms) - The OMS CLI helps developers create, test, validate, and build microservices.\n- [Example OMS Services](https://github.com/oms-services) - Examples of OMS-compliant services written in a variety of languages.\n- [Example Language Implementations](https://github.com/microservices) - Find tooling & language implementations in Node, Python, Scala, Java, Clojure.\n- [Storyscript Hub](https://hub.storyscript.io) - A public registry of OMS services.\n- [Community Chat](https://spectrum.chat/open-microservices) - Have ideas? Questions? Join us on Spectrum.\n",
        "service": {
            "alias": "uuid",
            "description": "UUID generator",
            "isCertified": true,
            "name": "uuid",
            "owner": {
                "username": "oms-services"
            },
            "public": true,
            "topics": [
                "uuid-generator",
                "microservice",
                "open-microservice",
                "oms"
            ]
        },
        "serviceUuid": "f156707b-594c-4cff-8e09-45c196024364",
        "state": "BETA"
    },
    {
        "configuration": {
            "actions": {
                "format": {
                    "arguments": {
                        "data": {
                            "in": "requestBody",
                            "required": true,
                            "type": "any"
                        }
                    },
                    "http": {
                        "method": "post",
                        "path": "/format",
                        "port": 8080
                    },
                    "output": {
                        "contentType": "application/json",
                        "type": "string"
                    }
                },
                "parse": {
                    "arguments": {
                        "data": {
                            "in": "requestBody",
                            "required": true,
                            "type": "string"
                        }
                    },
                    "http": {
                        "method": "post",
                        "path": "/parse",
                        "port": 8080
                    },
                    "output": {
                        "contentType": "application/json",
                        "type": "any"
                    }
                }
            },
            "health": {
                "http": {
                    "path": "/health",
                    "port": 8080
                }
            },
            "info": {
                "contact": {
                    "email": "core@openmicroservices.org",
                    "name": "Open Microservices",
                    "url": "https://openmicroservices.org"
                },
                "description": "YAML parser and formatting service",
                "license": {
                    "name": "Apache 2.0",
                    "url": "https://opensource.org/licenses/Apache-2.0"
                },
                "title": "YAML",
                "version": "1.0.0"
            },
            "lifecycle": {
                "startup": {
                    "command": [
                        "ruby",
                        "/app/app.rb"
                    ]
                }
            },
            "oms": 1
        },
        "readme": "# _YAML_ Open Microservice\n\n> YAML parser and formatting service\n\n[![Open Microservice Specification Version](https://img.shields.io/badge/Open%20Microservice-1.0-477bf3.svg)](https://openmicroservices.org) [![Open Microservices Spectrum Chat](https://withspectrum.github.io/badge/badge.svg)](https://spectrum.chat/open-microservices) [![Open Microservices Code of Conduct](https://img.shields.io/badge/Contributor%20Covenant-v1.4%20adopted-ff69b4.svg)](https://github.com/oms-services/.github/blob/master/CODE_OF_CONDUCT.md) [![Open Microservices Commitzen](https://img.shields.io/badge/commitizen-friendly-brightgreen.svg)](http://commitizen.github.io/cz-cli/) [![PRs Welcome](https://img.shields.io/badge/PRs-welcome-brightgreen.svg)](http://makeapullrequest.com)\n[![License: Apache 2.0](https://img.shields.io/badge/License-Apache%202.0-blue.svg)](https://opensource.org/licenses/Apache-2.0)\n\n## Introduction\n\nThis project is an example implementation of the [Open Microservice Specification](https://openmicroservices.org), a standard originally created at [Storyscript](https://storyscript.io) for building highly-portable \"microservices\" that expose the events, actions, and APIs inside containerized software.\n\n## Getting Started\n\nThe `oms` command-line interface allows you to interact with Open Microservices. If you're interested in creating an Open Microservice the CLI also helps validate, test, and debug your `oms.yml` implementation!\n\nSee the [oms-cli](https://github.com/microservices/oms) project to learn more!\n\n### Installation\n\n```\nnpm install -g @microservices/oms\n```\n\n## Usage\n\n### Open Microservices CLI Usage\n\nOnce you have the [oms-cli](https://github.com/microservices/oms) installed, you can run any of the following commands from within this project's root directory:\n\n#### Actions\n\n##### format\n\n>\n\n##### Action Arguments\n\n| Argument Name | Type  | Required | Default | Description              |\n| :------------ | :---- | :------- | :------ | :----------------------- |\n| data          | `any` | `true`   | None    | No description provided. |\n\n```shell\noms run format \\\n    -a data='*****'\n```\n\n##### parse\n\n>\n\n##### Action Arguments\n\n| Argument Name | Type     | Required | Default | Description              |\n| :------------ | :------- | :------- | :------ | :----------------------- |\n| data          | `string` | `true`   | None    | No description provided. |\n\n```shell\noms run parse \\\n    -a data='*****'\n```\n\n## Contributing\n\nAll suggestions in how to improve the specification and this guide are very welcome. Feel free share your thoughts in the Issue tracker, or even better, fork the repository to implement your own ideas and submit a pull request.\n\n[![Edit yaml on CodeSandbox](https://codesandbox.io/static/img/play-codesandbox.svg)](https://codesandbox.io/s/github/oms-services/yaml)\n\nThis project is guided by [Contributor Covenant](https://github.com/oms-services/.github/blob/master/CODE_OF_CONDUCT.md). Please read out full [Contribution Guidelines](https://github.com/oms-services/.github/blob/master/CONTRIBUTING.md).\n\n## Additional Resources\n\n- [Install the CLI](https://github.com/microservices/oms) - The OMS CLI helps developers create, test, validate, and build microservices.\n- [Example OMS Services](https://github.com/oms-services) - Examples of OMS-compliant services written in a variety of languages.\n- [Example Language Implementations](https://github.com/microservices) - Find tooling & language implementations in Node, Python, Scala, Java, Clojure.\n- [Storyscript Hub](https://hub.storyscript.io) - A public registry of OMS services.\n- [Community Chat](https://spectrum.chat/open-microservices) - Have ideas? Questions? Join us on Spectrum.\n",
        "service": {
            "alias": "yaml",
            "description": "Yaml, parse, validate, return json",
            "isCertified": false,
            "name": "yaml",
            "owner": {
                "username": "oms-services"
            },
            "public": true,
            "topics": [
                "yaml",
                "yaml-parser",
                "yaml-validator",
                "microservice",
                "oms",
                "open-microservice"
            ]
        },
        "serviceUuid": "ef6459ed-79e4-4806-8eb3-c3b39c13a07f",
        "state": "BETA"
    },
    {
        "configuration": {
            "actions": {
                "format": {
                    "arguments": {
                        "data": {
                            "in": "requestBody",
                            "required": true,
                            "type": "any"
                        }
                    },
                    "http": {
                        "method": "post",
                        "path": "/format",
                        "port": 8080
                    },
                    "output": {
                        "contentType": "application/json",
                        "type": "string"
                    }
                },
                "parse": {
                    "arguments": {
                        "data": {
                            "in": "requestBody",
                            "required": true,
                            "type": "string"
                        }
                    },
                    "http": {
                        "method": "post",
                        "path": "/parse",
                        "port": 8080
                    },
                    "output": {
                        "contentType": "application/json",
                        "type": "any"
                    }
                }
            },
            "health": {
                "http": {
                    "path": "/health",
                    "port": 8080
                }
            },
            "info": {
                "contact": {
                    "email": "core@openmicroservices.org",
                    "name": "Open Microservices",
                    "url": "https://openmicroservices.org"
                },
                "description": "YAML parser and formatting service",
                "license": {
                    "name": "Apache 2.0",
                    "url": "https://opensource.org/licenses/Apache-2.0"
                },
                "title": "YAML",
                "version": "1.0.0"
            },
            "lifecycle": {
                "startup": {
                    "command": [
                        "ruby",
                        "/app/app.rb"
                    ]
                }
            },
            "oms": 1
        },
        "readme": "# _YAML_ Open Microservice\n\n> YAML parser and formatting service\n\n[![Open Microservice Specification Version](https://img.shields.io/badge/Open%20Microservice-1.0-477bf3.svg)](https://openmicroservices.org) [![Open Microservices Spectrum Chat](https://withspectrum.github.io/badge/badge.svg)](https://spectrum.chat/open-microservices) [![Open Microservices Code of Conduct](https://img.shields.io/badge/Contributor%20Covenant-v1.4%20adopted-ff69b4.svg)](https://github.com/oms-services/.github/blob/master/CODE_OF_CONDUCT.md) [![Open Microservices Commitzen](https://img.shields.io/badge/commitizen-friendly-brightgreen.svg)](http://commitizen.github.io/cz-cli/) [![PRs Welcome](https://img.shields.io/badge/PRs-welcome-brightgreen.svg)](http://makeapullrequest.com)\n[![License: Apache 2.0](https://img.shields.io/badge/License-Apache%202.0-blue.svg)](https://opensource.org/licenses/Apache-2.0)\n\n## Introduction\n\nThis project is an example implementation of the [Open Microservice Specification](https://openmicroservices.org), a standard originally created at [Storyscript](https://storyscript.io) for building highly-portable \"microservices\" that expose the events, actions, and APIs inside containerized software.\n\n## Getting Started\n\nThe `oms` command-line interface allows you to interact with Open Microservices. If you're interested in creating an Open Microservice the CLI also helps validate, test, and debug your `oms.yml` implementation!\n\nSee the [oms-cli](https://github.com/microservices/oms) project to learn more!\n\n### Installation\n\n```\nnpm install -g @microservices/oms\n```\n\n## Usage\n\n### Open Microservices CLI Usage\n\nOnce you have the [oms-cli](https://github.com/microservices/oms) installed, you can run any of the following commands from within this project's root directory:\n\n#### Actions\n\n##### format\n\n>\n\n##### Action Arguments\n\n| Argument Name | Type  | Required | Default | Description              |\n| :------------ | :---- | :------- | :------ | :----------------------- |\n| data          | `any` | `true`   | None    | No description provided. |\n\n```shell\noms run format \\\n    -a data='*****'\n```\n\n##### parse\n\n>\n\n##### Action Arguments\n\n| Argument Name | Type     | Required | Default | Description              |\n| :------------ | :------- | :------- | :------ | :----------------------- |\n| data          | `string` | `true`   | None    | No description provided. |\n\n```shell\noms run parse \\\n    -a data='*****'\n```\n\n## Contributing\n\nAll suggestions in how to improve the specification and this guide are very welcome. Feel free share your thoughts in the Issue tracker, or even better, fork the repository to implement your own ideas and submit a pull request.\n\n[![Edit yaml on CodeSandbox](https://codesandbox.io/static/img/play-codesandbox.svg)](https://codesandbox.io/s/github/oms-services/yaml)\n\nThis project is guided by [Contributor Covenant](https://github.com/oms-services/.github/blob/master/CODE_OF_CONDUCT.md). Please read out full [Contribution Guidelines](https://github.com/oms-services/.github/blob/master/CONTRIBUTING.md).\n\n## Additional Resources\n\n- [Install the CLI](https://github.com/microservices/oms) - The OMS CLI helps developers create, test, validate, and build microservices.\n- [Example OMS Services](https://github.com/oms-services) - Examples of OMS-compliant services written in a variety of languages.\n- [Example Language Implementations](https://github.com/microservices) - Find tooling & language implementations in Node, Python, Scala, Java, Clojure.\n- [Storyscript Hub](https://hub.storyscript.io) - A public registry of OMS services.\n- [Community Chat](https://spectrum.chat/open-microservices) - Have ideas? Questions? Join us on Spectrum.\n",
        "service": {
            "alias": "yaml",
            "description": "Yaml, parse, validate, return json",
            "isCertified": false,
            "name": "yaml",
            "owner": {
                "username": "oms-services"
            },
            "public": true,
            "topics": [
                "yaml",
                "yaml-parser",
                "yaml-validator",
                "microservice",
                "oms",
                "open-microservice"
            ]
        },
        "serviceUuid": "ef6459ed-79e4-4806-8eb3-c3b39c13a07f",
        "state": "BETA"
    },
    {
        "configuration": {
            "actions": {
                "addCard": {
                    "arguments": {
                        "description": {
                            "help": "The description for the card.",
                            "in": "requestBody",
                            "type": "string"
                        },
                        "listId": {
                            "help": "The ID of list where card has to add.",
                            "in": "requestBody",
                            "required": true,
                            "type": "string"
                        },
                        "name": {
                            "help": "The name of card to be added.",
                            "in": "requestBody",
                            "required": true,
                            "type": "string"
                        }
                    },
                    "help": "Create new card on list.",
                    "http": {
                        "contentType": "application/json",
                        "method": "post",
                        "path": "/addCard",
                        "port": 3000
                    },
                    "output": {
                        "contentType": "application/json",
                        "type": "map"
                    }
                },
                "copyCard": {
                    "arguments": {
                        "cardId": {
                            "help": "The ID of card to copy.",
                            "in": "requestBody",
                            "required": true,
                            "type": "string"
                        },
                        "listId": {
                            "help": "The ID of list where to copy the card.",
                            "in": "requestBody",
                            "required": true,
                            "type": "string"
                        }
                    },
                    "help": "Copy card from one list to another.",
                    "http": {
                        "contentType": "application/json",
                        "method": "post",
                        "path": "/copyCard",
                        "port": 3000
                    },
                    "output": {
                        "contentType": "application/json",
                        "type": "map"
                    }
                },
                "createBoard": {
                    "arguments": {
                        "boardName": {
                            "help": "The name for new board.",
                            "in": "requestBody",
                            "required": true,
                            "type": "string"
                        }
                    },
                    "help": "Create new board in trello.",
                    "http": {
                        "contentType": "application/json",
                        "method": "post",
                        "path": "/createBoard",
                        "port": 3000
                    },
                    "output": {
                        "contentType": "application/json",
                        "type": "map"
                    }
                },
                "createList": {
                    "arguments": {
                        "boardId": {
                            "help": "The board ID to where to create list.",
                            "in": "requestBody",
                            "required": true,
                            "type": "string"
                        },
                        "listName": {
                            "help": "The name for new list.",
                            "in": "requestBody",
                            "required": true,
                            "type": "string"
                        }
                    },
                    "help": "Create new list in trello.",
                    "http": {
                        "contentType": "application/json",
                        "method": "post",
                        "path": "/createList",
                        "port": 3000
                    },
                    "output": {
                        "contentType": "application/json",
                        "type": "map"
                    }
                },
                "deleteBoard": {
                    "arguments": {
                        "boardId": {
                            "help": "The board ID to delete.",
                            "in": "requestBody",
                            "required": true,
                            "type": "string"
                        }
                    },
                    "help": "Delete board from trello.",
                    "http": {
                        "contentType": "application/json",
                        "method": "post",
                        "path": "/deleteBoard",
                        "port": 3000
                    },
                    "output": {
                        "contentType": "application/json",
                        "type": "map"
                    }
                },
                "getAllBoards": {
                    "arguments": {
                        "username": {
                            "help": "The username of trello account.",
                            "in": "requestBody",
                            "required": true,
                            "type": "string"
                        }
                    },
                    "help": "Get board details from trello.",
                    "http": {
                        "contentType": "application/json",
                        "method": "post",
                        "path": "/getAllBoards",
                        "port": 3000
                    },
                    "output": {
                        "contentType": "application/json",
                        "type": "list"
                    }
                },
                "getBoard": {
                    "arguments": {
                        "boardId": {
                            "help": "The board ID of trello account.",
                            "in": "requestBody",
                            "required": true,
                            "type": "string"
                        }
                    },
                    "help": "Get board details from trello.",
                    "http": {
                        "contentType": "application/json",
                        "method": "post",
                        "path": "/getBoard",
                        "port": 3000
                    },
                    "output": {
                        "contentType": "application/json",
                        "type": "map"
                    }
                },
                "getCards": {
                    "arguments": {
                        "boardId": {
                            "help": "The board ID of trello account.",
                            "in": "requestBody",
                            "required": true,
                            "type": "string"
                        }
                    },
                    "help": "Get all card details from all lists.",
                    "http": {
                        "contentType": "application/json",
                        "method": "post",
                        "path": "/getCards",
                        "port": 3000
                    },
                    "output": {
                        "contentType": "application/json",
                        "type": "list"
                    }
                },
                "getLists": {
                    "arguments": {
                        "boardId": {
                            "help": "The board ID of trello account.",
                            "in": "requestBody",
                            "required": true,
                            "type": "string"
                        }
                    },
                    "help": "Get all list details from trello board.",
                    "http": {
                        "contentType": "application/json",
                        "method": "post",
                        "path": "/getLists",
                        "port": 3000
                    },
                    "output": {
                        "contentType": "application/json",
                        "type": "list"
                    }
                },
                "moveCard": {
                    "arguments": {
                        "cardId": {
                            "help": "The ID of card to move.",
                            "in": "requestBody",
                            "required": true,
                            "type": "string"
                        },
                        "listId": {
                            "help": "The ID of list where to move the card.",
                            "in": "requestBody",
                            "required": true,
                            "type": "string"
                        }
                    },
                    "help": "Move card from one list to another.",
                    "http": {
                        "contentType": "application/json",
                        "method": "post",
                        "path": "/moveCard",
                        "port": 3000
                    },
                    "output": {
                        "contentType": "application/json",
                        "type": "map"
                    }
                },
                "receive": {
                    "events": {
                        "card": {
                            "arguments": {
                                "boardId": {
                                    "help": "The board ID to subscribe.",
                                    "in": "requestBody",
                                    "required": true,
                                    "type": "string"
                                },
                                "existing": {
                                    "help": "Set true to get all existing cards or false to get only new card added to board after subscription.",
                                    "in": "requestBody",
                                    "required": true,
                                    "type": "boolean"
                                },
                                "listId": {
                                    "help": "The list ID to subscribe the list.",
                                    "in": "requestBody",
                                    "type": "string"
                                }
                            },
                            "help": "Triggered anytime when any new card is added in list.",
                            "http": {
                                "port": 3000,
                                "subscribe": {
                                    "contentType": "application/json",
                                    "method": "post",
                                    "path": "/subscribe"
                                }
                            },
                            "output": {
                                "contentType": "application/json",
                                "type": "map"
                            }
                        }
                    },
                    "help": "Start receiving newly added card details from board list."
                }
            },
            "environment": {
                "ACCESS_TOKEN": {
                    "help": "The access token of trello account.",
                    "required": true,
                    "type": "string"
                },
                "API_KEY": {
                    "help": "The API key of trello account.",
                    "required": true,
                    "type": "string"
                }
            },
            "health": {
                "http": {
                    "path": "/health",
                    "port": 3000
                }
            },
            "info": {
                "contact": {
                    "email": "rohits@heaptrace.com",
                    "name": "Rohit Shetty",
                    "url": "https://github.com/ht68rohit"
                },
                "description": "This is an trello service",
                "license": {
                    "name": "MIT",
                    "url": "https://opensource.org/licenses/MIT"
                },
                "title": "Trello",
                "version": "1.0.0"
            },
            "lifecycle": {
                "startup": {
                    "command": [
                        "microservice-trello"
                    ]
                }
            },
            "omg": 1
        },
        "readme": "# _Trello_ OMG Microservice\n\n[![Open Microservice Guide](https://img.shields.io/badge/OMG%20Enabled-\ud83d\udc4d-green.svg?)](https://microservice.guide)\n[![Build Status](https://travis-ci.com/omg-services/trello.svg?branch=master)](https://travis-ci.com/omg-services/trello)\n[![codecov](https://codecov.io/gh/omg-services/trello/branch/master/graph/badge.svg)](https://codecov.io/gh/omg-services/trello)\n\nTrello microservice allows to create board, list, cards and also to subscribe the entire board or list, it has a variety of work and personal uses and overview of what is being worked on and what is the current status of card.\n\n## Usage in [Storyscript](https://storyscript.io/)\n\n##### Create Board\n```coffee\n>>> trello createBoard boardName:'boardName'\n{\"success\":\"true/false\",\"message\":\"success/failure message\",\"statusCode\":\"HTTPstatusCode\"}\n```\n##### Get Board\n```coffee\n>>> trello getBoard boardId:'boardId'\n{\"id\":\"boardId\",\"name\":\"boardName\",\"desc\":\"description\",\"closed\":\"true/false\"}\n```\n##### Create list on board\n```coffee\n>>> trello createList boardId:'boardId' listName:'listName'\n{\"id\": \"listID\",\"name\": \"listName\",\"idBoard\": \"idBoard\",\"closed\": \"true/false\"}\n```\n##### Get List\n```coffee\n>>> trello getLists boardId:'boardId'\n{\"id\":\"listID\",\"name\":\"listName\",\"idBoard\":\"idBoard\",\"closed\":\"true/false\"}\n```\n##### Add card to list\n```coffee\n>>> trello addCard name:'name' description:'description' listId:'listId'\n{\"success\":\"true/false\",\"message\":\"success/failure message\",\"statusCode\":\"HTTPstatusCode\"}\n```\n##### Get cards\n```coffee\n>>> trello getCards boardId:'boardId'\n{\"id\":\"cardID\",\"name\":\"cardName\",\"shortUrl\":\"shortUrl\",\"url\":\"url\",\"idBoard\":\"idBoard\",\"idList\":\"idList\"}          \n```\n##### Move card to list\n```coffee\n>>> trello moveCard cardId:'cardId' listId:'listId'\n{\"success\":\"true/false\",\"message\":\"success/failure message\",\"statusCode\":\"HTTPstatusCode\"}\n```\n##### Copy card to list\n```coffee\n>>> trello copyCard cardId:'cardId' listId:'listId'\n{\"id\":\"cardID\",\"name\":\"cardName\",\"shortUrl\":\"shortUrl\",\"url\":\"url\",\"idBoard\":\"idBoard\",\"idList\":\"idList\"}\n```\n##### Delete Board\n```coffee\n>>> trello deleteBoard boardId:'boardId'\n{\"success\":\"true/false\",\"message\":\"success/failure message\",\"statusCode\":\"HTTPstatusCode\"}\n```\n##### Get All Boards\n```coffee\n>>> trello getAllBoards username:'username'\n{\"id\":\"boardId\",\"name\":\"boardName\",\"desc\":\"description\",\"closed\":\"true/false\",\"url\":\"boardLink\"}\n```\n\nCurious to [learn more](https://docs.storyscript.io/)?\n\n\u2728\ud83c\udf70\u2728\n\n## Usage with [OMG CLI](https://www.npmjs.com/package/omg)\n##### Create Board\n```shell\n$ omg run createBoard -a boardName=<BOARD_NAME> -e API_KEY=<API_KEY> -e ACCESS_TOKEN=<ACCESS_TOKEN>\n```\n##### Get Board\n```shell\n$ omg run getBoard -a boardId=<BOARD_ID> -e API_KEY=<API_KEY> -e ACCESS_TOKEN=<ACCESS_TOKEN>\n```\n##### Create list on board\n```shell\n$ omg run createList -a boardId=<BOARD_ID> -a listName=<LIST_NAME> -e API_KEY=<API_KEY> -e ACCESS_TOKEN=<ACCESS_TOKEN>\n```\n##### Get List\n```shell\n$ omg run getLists -a boardId=<BOARD_ID> -e API_KEY=<API_KEY> -e ACCESS_TOKEN=<ACCESS_TOKEN>\n```\n##### Add card to list\n```shell\n$ omg run addCard -a name=<CARD_NAME> -a description=<DESCRIPTION> -a listId=<LIST_ID> -e API_KEY=<API_KEY> -e ACCESS_TOKEN=<ACCESS_TOKEN>\n```\n##### Get cards\n```shell\n$ omg run getCards -a boardId=<BOARD_ID> -e API_KEY=<API_KEY> -e ACCESS_TOKEN=<ACCESS_TOKEN>\n```\n##### Move card to list\n```shell\n$ omg run moveCard -a cardId=<CARD_ID> -a listId=<LIST_ID> -e API_KEY=<API_KEY> -e ACCESS_TOKEN=<ACCESS_TOKEN>\n```\n##### Copy card to list\n```shell\n$ omg run copyCard -a cardId=<CARD_ID> -a listId=<LIST_ID> -e API_KEY=<API_KEY> -e ACCESS_TOKEN=<ACCESS_TOKEN>\n```\n##### Delete Board\n```shell\n$ omg run deleteBoard -a boardId=<BOARD_ID> -e API_KEY=<API_KEY> -e ACCESS_TOKEN=<ACCESS_TOKEN>\n```\n##### Subscribe card\n```shell\n$ omg subscribe receive card -a boardId=<BOARD_ID> -a listId=<LIST_ID> -a existing=<BOOLEAN> -e API_KEY=<API_KEY> -e ACCESS_TOKEN=<ACCESS_TOKEN>\n```\n##### Boards For User\n```shell\n$ omg run boardForUser -a username=<USERNAME> -e API_KEY=<API_KEY> -e ACCESS_TOKEN=<ACCESS_TOKEN>\n```\n\n\n**Note**: the OMG CLI requires [Docker](https://docs.docker.com/install/) to be installed.\n\n## License\n[MIT License](https://github.com/HeaptraceTechnologyCollection/microservice-trello/blob/master/LICENSE).\n\n",
        "service": {
            "alias": null,
            "description": "A microservice for Trello using the Open Miroservice Guide(OMG) standard",
            "isCertified": false,
            "name": "trello",
            "owner": {
                "username": "ht68rohit"
            },
            "public": true,
            "topics": [
                "trello",
                "trello-api",
                "microservice"
            ]
        },
        "serviceUuid": "901a3393-7402-493e-9c75-8338450cc53e",
        "state": "BETA"
    },
    {
        "configuration": {
            "actions": {
                "api": {
                    "arguments": {
                        "data": {
                            "help": "The data to post in the API request body.",
                            "in": "requestBody",
                            "type": "map"
                        },
                        "headers": {
                            "in": "requestBody",
                            "type": "map"
                        },
                        "iid": {
                            "help": "The GitHub App installation ID to use during authentication.",
                            "in": "requestBody",
                            "type": "int"
                        },
                        "method": {
                            "default": "get",
                            "enum": [
                                "head",
                                "get",
                                "post",
                                "patch",
                                "put",
                                "delete"
                            ],
                            "in": "requestBody",
                            "type": "enum"
                        },
                        "params": {
                            "in": "requestBody",
                            "type": "map"
                        },
                        "token": {
                            "help": "A oauth user access token to use during the request for authentication.",
                            "in": "requestBody",
                            "type": "string"
                        },
                        "url": {
                            "in": "requestBody",
                            "required": true,
                            "type": "string"
                        }
                    },
                    "help": "Make an API request to the GitHub REST API",
                    "http": {
                        "contentType": "application/json",
                        "method": "post",
                        "path": "/api",
                        "port": 5042
                    },
                    "output": {
                        "type": "map"
                    }
                },
                "events": {
                    "events": {
                        "webhooks": {
                            "arguments": {
                                "events": {
                                    "help": "List of events to listen too\nSee https://developer.github.com/webhooks/#events for full list\n",
                                    "in": "requestBody",
                                    "type": "list"
                                }
                            },
                            "http": {
                                "port": 5042,
                                "subscribe": {
                                    "contentType": "application/json",
                                    "method": "post",
                                    "path": "/webhooks/subscribe"
                                },
                                "unsubscribe": {
                                    "contentType": "application/json",
                                    "method": "post",
                                    "path": "/webhooks/unsubscribe"
                                }
                            },
                            "output": {
                                "properties": {
                                    "event": {
                                        "type": "string"
                                    },
                                    "payload": {
                                        "map": {
                                            "keys": {
                                                "type": "string"
                                            },
                                            "values": {
                                                "type": "any"
                                            }
                                        },
                                        "type": "map"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    },
                    "help": "Server for GitHub webhooks"
                },
                "graphql": {
                    "arguments": {
                        "headers": {
                            "in": "requestBody",
                            "type": "map"
                        },
                        "iid": {
                            "help": "The GitHub App installation ID to use during authentication.",
                            "in": "requestBody",
                            "type": "int"
                        },
                        "query": {
                            "in": "requestBody",
                            "required": true,
                            "type": "string"
                        },
                        "token": {
                            "help": "A oauth user access token to use during the request for authentication.",
                            "in": "requestBody",
                            "type": "string"
                        }
                    },
                    "help": "Query GitHub GraphQL",
                    "http": {
                        "contentType": "application/json",
                        "method": "post",
                        "path": "/graphql",
                        "port": 5042
                    },
                    "output": {
                        "type": "map"
                    }
                }
            },
            "environment": {
                "API_HOSTNAME": {
                    "help": "The GitHub API Hostname (for GitHub Enterprise)\nDefault to \"api.HOSTNAME\"\n",
                    "type": "string"
                },
                "APP_ID": {
                    "help": "Your GitHub App ID",
                    "type": "int"
                },
                "APP_PRIVATE_KEY": {
                    "help": "Your GitHub App private key in PEM format",
                    "type": "string"
                },
                "CLIENT_ID": {
                    "help": "The GitHub Oauth Client ID",
                    "type": "string"
                },
                "CLIENT_SECRET": {
                    "help": "The GitHub Oauth Client Secret",
                    "type": "string"
                },
                "HOSTNAME": {
                    "help": "The GitHub Hostname (for GitHub Enterprise)",
                    "type": "string"
                },
                "OAUTH_TOKEN": {
                    "help": "A user oauth token to be used if not provided during an action.",
                    "type": "string"
                },
                "USER_AGENT": {
                    "default": "Undefined",
                    "help": "GitHub requires a the User-Agent header defined.",
                    "type": "string"
                },
                "WEBHOOK_SECRET": {
                    "help": "Used to check the webhook payload signature.",
                    "type": "string"
                }
            },
            "expose": {
                "webhooks": {
                    "http": {
                        "method": "post",
                        "path": "/webhooks",
                        "port": 5042
                    }
                }
            },
            "info": {
                "contact": {
                    "email": "core@openmicroservices.org",
                    "name": "Open Microservices",
                    "url": "https://openmicroservices.org"
                },
                "description": "GitHub API, GraphQL, Webhook and Login Server",
                "license": {
                    "name": "MIT",
                    "url": "https://opensource.org/licenses/MIT"
                },
                "title": "GitHub",
                "version": "0.1.0"
            },
            "lifecycle": {
                "startup": {
                    "command": [
                        "python",
                        "/app/main.py"
                    ]
                }
            },
            "oms": 1
        },
        "readme": "# _GitHub_ Open Microservice\n\n> GitHub API, GraphQL, Webhook and Login Server\n\n[![Open Microservice Specification Version](https://img.shields.io/badge/Open%20Microservice-1.0-477bf3.svg)](https://openmicroservices.org) [![Open Microservices Spectrum Chat](https://withspectrum.github.io/badge/badge.svg)](https://spectrum.chat/open-microservices) [![Open Microservices Code of Conduct](https://img.shields.io/badge/Contributor%20Covenant-v1.4%20adopted-ff69b4.svg)](https://github.com/oms-services/.github/blob/master/CODE_OF_CONDUCT.md) [![Open Microservices Commitzen](https://img.shields.io/badge/commitizen-friendly-brightgreen.svg)](http://commitizen.github.io/cz-cli/) [![PRs Welcome](https://img.shields.io/badge/PRs-welcome-brightgreen.svg)](http://makeapullrequest.com) \n[![License: MIT](https://img.shields.io/badge/License-MIT-blue.svg)](https://opensource.org/licenses/MIT)\n\n## Introduction\n\nThis project is an example implementation of the [Open Microservice Specification](https://openmicroservices.org), a standard originally created at [Storyscript](https://storyscript.io) for building highly-portable \"microservices\" that expose the events, actions, and APIs inside containerized software.\n\n## Getting Started\n\nThe `oms` command-line interface allows you to interact with Open Microservices. If you're interested in creating an Open Microservice the CLI also helps validate, test, and debug your `oms.yml` implementation!\n\nSee the [oms-cli](https://github.com/microservices/oms) project to learn more!\n\n### Installation\n\n```\nnpm install -g @microservices/oms\n```\n\n## Usage\n\n### Open Microservices CLI Usage\n\nOnce you have the [oms-cli](https://github.com/microservices/oms) installed, you can run any of the following commands from within this project's root directory:\n\n#### Actions\n\n##### api\n\n> Make an API request to the GitHub REST API\n##### Action Arguments\n\n| Argument Name | Type | Required | Default | Description |\n|:------------- |:---- |:-------- |:--------|:----------- |\n| method | `enum` | `false` | None | No description provided. |\n| url | `string` | `true` | None | No description provided. |\n| data | `map` | `false` | None | The data to post in the API request body. |\n| params | `map` | `false` | None | No description provided. |\n| headers | `map` | `false` | None | No description provided. |\n| token | `string` | `false` | None | A oauth user access token to use during the request for authentication. |\n| iid | `int` | `false` | None | The GitHub App installation ID to use during authentication. |\n| APP_ID | `int` | `false` | None | Your GitHub App ID |\n| APP_PRIVATE_KEY | `string` | `false` | None | Your GitHub App private key in PEM format |\n| HOSTNAME | `string` | `false` | None | The GitHub Hostname (for GitHub Enterprise) |\n| API_HOSTNAME | `string` | `false` | None | The GitHub API Hostname (for GitHub Enterprise) Default to \"api.HOSTNAME\"  |\n| CLIENT_ID | `string` | `false` | None | The GitHub Oauth Client ID |\n| CLIENT_SECRET | `string` | `false` | None | The GitHub Oauth Client Secret |\n| OAUTH_TOKEN | `string` | `false` | None | A user oauth token to be used if not provided during an action. |\n| WEBHOOK_SECRET | `string` | `false` | None | Used to check the webhook payload signature. |\n| USER_AGENT | `string` | `false` | None | GitHub requires a the User-Agent header defined. |\n\n``` shell\noms run api \\ \n    -a method='*****' \\ \n    -a url='*****' \\ \n    -a data='*****' \\ \n    -a params='*****' \\ \n    -a headers='*****' \\ \n    -a token='*****' \\ \n    -a iid='*****' \\ \n    -e APP_ID=$APP_ID \\ \n    -e APP_PRIVATE_KEY=$APP_PRIVATE_KEY \\ \n    -e HOSTNAME=$HOSTNAME \\ \n    -e API_HOSTNAME=$API_HOSTNAME \\ \n    -e CLIENT_ID=$CLIENT_ID \\ \n    -e CLIENT_SECRET=$CLIENT_SECRET \\ \n    -e OAUTH_TOKEN=$OAUTH_TOKEN \\ \n    -e WEBHOOK_SECRET=$WEBHOOK_SECRET \\ \n    -e USER_AGENT=$USER_AGENT\n```\n\n##### graphql\n\n> Query GitHub GraphQL\n##### Action Arguments\n\n| Argument Name | Type | Required | Default | Description |\n|:------------- |:---- |:-------- |:--------|:----------- |\n| query | `string` | `true` | None | No description provided. |\n| headers | `map` | `false` | None | No description provided. |\n| token | `string` | `false` | None | A oauth user access token to use during the request for authentication. |\n| iid | `int` | `false` | None | The GitHub App installation ID to use during authentication. |\n| APP_ID | `int` | `false` | None | Your GitHub App ID |\n| APP_PRIVATE_KEY | `string` | `false` | None | Your GitHub App private key in PEM format |\n| HOSTNAME | `string` | `false` | None | The GitHub Hostname (for GitHub Enterprise) |\n| API_HOSTNAME | `string` | `false` | None | The GitHub API Hostname (for GitHub Enterprise) Default to \"api.HOSTNAME\"  |\n| CLIENT_ID | `string` | `false` | None | The GitHub Oauth Client ID |\n| CLIENT_SECRET | `string` | `false` | None | The GitHub Oauth Client Secret |\n| OAUTH_TOKEN | `string` | `false` | None | A user oauth token to be used if not provided during an action. |\n| WEBHOOK_SECRET | `string` | `false` | None | Used to check the webhook payload signature. |\n| USER_AGENT | `string` | `false` | None | GitHub requires a the User-Agent header defined. |\n\n``` shell\noms run graphql \\ \n    -a query='*****' \\ \n    -a headers='*****' \\ \n    -a token='*****' \\ \n    -a iid='*****' \\ \n    -e APP_ID=$APP_ID \\ \n    -e APP_PRIVATE_KEY=$APP_PRIVATE_KEY \\ \n    -e HOSTNAME=$HOSTNAME \\ \n    -e API_HOSTNAME=$API_HOSTNAME \\ \n    -e CLIENT_ID=$CLIENT_ID \\ \n    -e CLIENT_SECRET=$CLIENT_SECRET \\ \n    -e OAUTH_TOKEN=$OAUTH_TOKEN \\ \n    -e WEBHOOK_SECRET=$WEBHOOK_SECRET \\ \n    -e USER_AGENT=$USER_AGENT\n```\n\n##### webhooks\n\n> \n##### Action Arguments\n\n| Argument Name | Type | Required | Default | Description |\n|:------------- |:---- |:-------- |:--------|:----------- |\n| events | `list` | `false` | None | List of events to listen too See https://developer.github.com/webhooks/#events for full list  |\n| APP_ID | `int` | `false` | None | Your GitHub App ID |\n| APP_PRIVATE_KEY | `string` | `false` | None | Your GitHub App private key in PEM format |\n| HOSTNAME | `string` | `false` | None | The GitHub Hostname (for GitHub Enterprise) |\n| API_HOSTNAME | `string` | `false` | None | The GitHub API Hostname (for GitHub Enterprise) Default to \"api.HOSTNAME\"  |\n| CLIENT_ID | `string` | `false` | None | The GitHub Oauth Client ID |\n| CLIENT_SECRET | `string` | `false` | None | The GitHub Oauth Client Secret |\n| OAUTH_TOKEN | `string` | `false` | None | A user oauth token to be used if not provided during an action. |\n| WEBHOOK_SECRET | `string` | `false` | None | Used to check the webhook payload signature. |\n| USER_AGENT | `string` | `false` | None | GitHub requires a the User-Agent header defined. |\n\n``` shell\noms subscribe webhooks \\ \n    -a events='*****' \\ \n    -e APP_ID=$APP_ID \\ \n    -e APP_PRIVATE_KEY=$APP_PRIVATE_KEY \\ \n    -e HOSTNAME=$HOSTNAME \\ \n    -e API_HOSTNAME=$API_HOSTNAME \\ \n    -e CLIENT_ID=$CLIENT_ID \\ \n    -e CLIENT_SECRET=$CLIENT_SECRET \\ \n    -e OAUTH_TOKEN=$OAUTH_TOKEN \\ \n    -e WEBHOOK_SECRET=$WEBHOOK_SECRET \\ \n    -e USER_AGENT=$USER_AGENT\n```\n\n## Contributing\n\nAll suggestions in how to improve the specification and this guide are very welcome. Feel free share your thoughts in the Issue tracker, or even better, fork the repository to implement your own ideas and submit a pull request.\n\n[![Edit github on CodeSandbox](https://codesandbox.io/static/img/play-codesandbox.svg)](https://codesandbox.io/s/github/oms-services/github)\n\nThis project is guided by [Contributor Covenant](https://github.com/oms-services/.github/blob/master/CODE_OF_CONDUCT.md). Please read out full [Contribution Guidelines](https://github.com/oms-services/.github/blob/master/CONTRIBUTING.md).\n\n## Additional Resources\n\n* [Install the CLI](https://github.com/microservices/oms) - The OMS CLI helps developers create, test, validate, and build microservices.\n* [Example OMS Services](https://github.com/oms-services) - Examples of OMS-compliant services written in a variety of languages.\n* [Example Language Implementations](https://github.com/microservices) - Find tooling & language implementations in Node, Python, Scala, Java, Clojure.\n* [Storyscript Hub](https://hub.storyscript.io) - A public registry of OMS services.\n* [Community Chat](https://spectrum.chat/open-microservices) - Have ideas? Questions? Join us on Spectrum.\n",
        "service": {
            "alias": "github",
            "description": ":octocat:GitHub REST API and GraphQL",
            "isCertified": false,
            "name": "github",
            "owner": {
                "username": "oms-services"
            },
            "public": true,
            "topics": [
                "github",
                "microservice",
                "oms",
                "open-microservice"
            ]
        },
        "serviceUuid": "47932e57-cd15-484d-933b-d203b7570c3b",
        "state": "BETA"
    },
    {
        "configuration": {
            "actions": {
                "api": {
                    "arguments": {
                        "data": {
                            "help": "The data to post in the API request body.",
                            "in": "requestBody",
                            "type": "map"
                        },
                        "headers": {
                            "in": "requestBody",
                            "type": "map"
                        },
                        "iid": {
                            "help": "The GitHub App installation ID to use during authentication.",
                            "in": "requestBody",
                            "type": "int"
                        },
                        "method": {
                            "default": "get",
                            "enum": [
                                "head",
                                "get",
                                "post",
                                "patch",
                                "put",
                                "delete"
                            ],
                            "in": "requestBody",
                            "type": "enum"
                        },
                        "params": {
                            "in": "requestBody",
                            "type": "map"
                        },
                        "token": {
                            "help": "A oauth user access token to use during the request for authentication.",
                            "in": "requestBody",
                            "type": "string"
                        },
                        "url": {
                            "in": "requestBody",
                            "required": true,
                            "type": "string"
                        }
                    },
                    "help": "Make an API request to the GitHub REST API",
                    "http": {
                        "contentType": "application/json",
                        "method": "post",
                        "path": "/api",
                        "port": 5042
                    },
                    "output": {
                        "type": "map"
                    }
                },
                "events": {
                    "events": {
                        "webhooks": {
                            "arguments": {
                                "events": {
                                    "help": "List of events to listen too\nSee https://developer.github.com/webhooks/#events for full list\n",
                                    "in": "requestBody",
                                    "type": "list"
                                }
                            },
                            "http": {
                                "port": 5042,
                                "subscribe": {
                                    "contentType": "application/json",
                                    "method": "post",
                                    "path": "/webhooks/subscribe"
                                },
                                "unsubscribe": {
                                    "contentType": "application/json",
                                    "method": "post",
                                    "path": "/webhooks/unsubscribe"
                                }
                            },
                            "output": {
                                "properties": {
                                    "event": {
                                        "type": "string"
                                    },
                                    "payload": {
                                        "map": {
                                            "keys": {
                                                "type": "string"
                                            },
                                            "values": {
                                                "type": "any"
                                            }
                                        },
                                        "type": "map"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    },
                    "help": "Server for GitHub webhooks"
                },
                "graphql": {
                    "arguments": {
                        "headers": {
                            "in": "requestBody",
                            "type": "map"
                        },
                        "iid": {
                            "help": "The GitHub App installation ID to use during authentication.",
                            "in": "requestBody",
                            "type": "int"
                        },
                        "query": {
                            "in": "requestBody",
                            "required": true,
                            "type": "string"
                        },
                        "token": {
                            "help": "A oauth user access token to use during the request for authentication.",
                            "in": "requestBody",
                            "type": "string"
                        }
                    },
                    "help": "Query GitHub GraphQL",
                    "http": {
                        "contentType": "application/json",
                        "method": "post",
                        "path": "/graphql",
                        "port": 5042
                    },
                    "output": {
                        "type": "map"
                    }
                }
            },
            "environment": {
                "API_HOSTNAME": {
                    "help": "The GitHub API Hostname (for GitHub Enterprise)\nDefault to \"api.HOSTNAME\"\n",
                    "type": "string"
                },
                "APP_ID": {
                    "help": "Your GitHub App ID",
                    "type": "int"
                },
                "APP_PRIVATE_KEY": {
                    "help": "Your GitHub App private key in PEM format",
                    "type": "string"
                },
                "CLIENT_ID": {
                    "help": "The GitHub Oauth Client ID",
                    "type": "string"
                },
                "CLIENT_SECRET": {
                    "help": "The GitHub Oauth Client Secret",
                    "type": "string"
                },
                "HOSTNAME": {
                    "help": "The GitHub Hostname (for GitHub Enterprise)",
                    "type": "string"
                },
                "OAUTH_TOKEN": {
                    "help": "A user oauth token to be used if not provided during an action.",
                    "type": "string"
                },
                "USER_AGENT": {
                    "default": "Undefined",
                    "help": "GitHub requires a the User-Agent header defined.",
                    "type": "string"
                },
                "WEBHOOK_SECRET": {
                    "help": "Used to check the webhook payload signature.",
                    "type": "string"
                }
            },
            "expose": {
                "webhooks": {
                    "http": {
                        "method": "post",
                        "path": "/webhooks",
                        "port": 5042
                    }
                }
            },
            "info": {
                "contact": {
                    "email": "core@openmicroservices.org",
                    "name": "Open Microservices",
                    "url": "https://openmicroservices.org"
                },
                "description": "GitHub API, GraphQL, Webhook and Login Server",
                "license": {
                    "name": "MIT",
                    "url": "https://opensource.org/licenses/MIT"
                },
                "title": "GitHub",
                "version": "0.1.0"
            },
            "lifecycle": {
                "startup": {
                    "command": [
                        "python",
                        "/app/main.py"
                    ]
                }
            },
            "oms": 1
        },
        "readme": "# _GitHub_ Open Microservice\n\n> GitHub API, GraphQL, Webhook and Login Server\n\n[![Open Microservice Specification Version](https://img.shields.io/badge/Open%20Microservice-1.0-477bf3.svg)](https://openmicroservices.org) [![Open Microservices Spectrum Chat](https://withspectrum.github.io/badge/badge.svg)](https://spectrum.chat/open-microservices) [![Open Microservices Code of Conduct](https://img.shields.io/badge/Contributor%20Covenant-v1.4%20adopted-ff69b4.svg)](https://github.com/oms-services/.github/blob/master/CODE_OF_CONDUCT.md) [![Open Microservices Commitzen](https://img.shields.io/badge/commitizen-friendly-brightgreen.svg)](http://commitizen.github.io/cz-cli/) [![PRs Welcome](https://img.shields.io/badge/PRs-welcome-brightgreen.svg)](http://makeapullrequest.com) \n[![License: MIT](https://img.shields.io/badge/License-MIT-blue.svg)](https://opensource.org/licenses/MIT)\n\n## Introduction\n\nThis project is an example implementation of the [Open Microservice Specification](https://openmicroservices.org), a standard originally created at [Storyscript](https://storyscript.io) for building highly-portable \"microservices\" that expose the events, actions, and APIs inside containerized software.\n\n## Getting Started\n\nThe `oms` command-line interface allows you to interact with Open Microservices. If you're interested in creating an Open Microservice the CLI also helps validate, test, and debug your `oms.yml` implementation!\n\nSee the [oms-cli](https://github.com/microservices/oms) project to learn more!\n\n### Installation\n\n```\nnpm install -g @microservices/oms\n```\n\n## Usage\n\n### Open Microservices CLI Usage\n\nOnce you have the [oms-cli](https://github.com/microservices/oms) installed, you can run any of the following commands from within this project's root directory:\n\n#### Actions\n\n##### api\n\n> Make an API request to the GitHub REST API\n##### Action Arguments\n\n| Argument Name | Type | Required | Default | Description |\n|:------------- |:---- |:-------- |:--------|:----------- |\n| method | `enum` | `false` | None | No description provided. |\n| url | `string` | `true` | None | No description provided. |\n| data | `map` | `false` | None | The data to post in the API request body. |\n| params | `map` | `false` | None | No description provided. |\n| headers | `map` | `false` | None | No description provided. |\n| token | `string` | `false` | None | A oauth user access token to use during the request for authentication. |\n| iid | `int` | `false` | None | The GitHub App installation ID to use during authentication. |\n| APP_ID | `int` | `false` | None | Your GitHub App ID |\n| APP_PRIVATE_KEY | `string` | `false` | None | Your GitHub App private key in PEM format |\n| HOSTNAME | `string` | `false` | None | The GitHub Hostname (for GitHub Enterprise) |\n| API_HOSTNAME | `string` | `false` | None | The GitHub API Hostname (for GitHub Enterprise) Default to \"api.HOSTNAME\"  |\n| CLIENT_ID | `string` | `false` | None | The GitHub Oauth Client ID |\n| CLIENT_SECRET | `string` | `false` | None | The GitHub Oauth Client Secret |\n| OAUTH_TOKEN | `string` | `false` | None | A user oauth token to be used if not provided during an action. |\n| WEBHOOK_SECRET | `string` | `false` | None | Used to check the webhook payload signature. |\n| USER_AGENT | `string` | `false` | None | GitHub requires a the User-Agent header defined. |\n\n``` shell\noms run api \\ \n    -a method='*****' \\ \n    -a url='*****' \\ \n    -a data='*****' \\ \n    -a params='*****' \\ \n    -a headers='*****' \\ \n    -a token='*****' \\ \n    -a iid='*****' \\ \n    -e APP_ID=$APP_ID \\ \n    -e APP_PRIVATE_KEY=$APP_PRIVATE_KEY \\ \n    -e HOSTNAME=$HOSTNAME \\ \n    -e API_HOSTNAME=$API_HOSTNAME \\ \n    -e CLIENT_ID=$CLIENT_ID \\ \n    -e CLIENT_SECRET=$CLIENT_SECRET \\ \n    -e OAUTH_TOKEN=$OAUTH_TOKEN \\ \n    -e WEBHOOK_SECRET=$WEBHOOK_SECRET \\ \n    -e USER_AGENT=$USER_AGENT\n```\n\n##### graphql\n\n> Query GitHub GraphQL\n##### Action Arguments\n\n| Argument Name | Type | Required | Default | Description |\n|:------------- |:---- |:-------- |:--------|:----------- |\n| query | `string` | `true` | None | No description provided. |\n| headers | `map` | `false` | None | No description provided. |\n| token | `string` | `false` | None | A oauth user access token to use during the request for authentication. |\n| iid | `int` | `false` | None | The GitHub App installation ID to use during authentication. |\n| APP_ID | `int` | `false` | None | Your GitHub App ID |\n| APP_PRIVATE_KEY | `string` | `false` | None | Your GitHub App private key in PEM format |\n| HOSTNAME | `string` | `false` | None | The GitHub Hostname (for GitHub Enterprise) |\n| API_HOSTNAME | `string` | `false` | None | The GitHub API Hostname (for GitHub Enterprise) Default to \"api.HOSTNAME\"  |\n| CLIENT_ID | `string` | `false` | None | The GitHub Oauth Client ID |\n| CLIENT_SECRET | `string` | `false` | None | The GitHub Oauth Client Secret |\n| OAUTH_TOKEN | `string` | `false` | None | A user oauth token to be used if not provided during an action. |\n| WEBHOOK_SECRET | `string` | `false` | None | Used to check the webhook payload signature. |\n| USER_AGENT | `string` | `false` | None | GitHub requires a the User-Agent header defined. |\n\n``` shell\noms run graphql \\ \n    -a query='*****' \\ \n    -a headers='*****' \\ \n    -a token='*****' \\ \n    -a iid='*****' \\ \n    -e APP_ID=$APP_ID \\ \n    -e APP_PRIVATE_KEY=$APP_PRIVATE_KEY \\ \n    -e HOSTNAME=$HOSTNAME \\ \n    -e API_HOSTNAME=$API_HOSTNAME \\ \n    -e CLIENT_ID=$CLIENT_ID \\ \n    -e CLIENT_SECRET=$CLIENT_SECRET \\ \n    -e OAUTH_TOKEN=$OAUTH_TOKEN \\ \n    -e WEBHOOK_SECRET=$WEBHOOK_SECRET \\ \n    -e USER_AGENT=$USER_AGENT\n```\n\n##### webhooks\n\n> \n##### Action Arguments\n\n| Argument Name | Type | Required | Default | Description |\n|:------------- |:---- |:-------- |:--------|:----------- |\n| events | `list` | `false` | None | List of events to listen too See https://developer.github.com/webhooks/#events for full list  |\n| APP_ID | `int` | `false` | None | Your GitHub App ID |\n| APP_PRIVATE_KEY | `string` | `false` | None | Your GitHub App private key in PEM format |\n| HOSTNAME | `string` | `false` | None | The GitHub Hostname (for GitHub Enterprise) |\n| API_HOSTNAME | `string` | `false` | None | The GitHub API Hostname (for GitHub Enterprise) Default to \"api.HOSTNAME\"  |\n| CLIENT_ID | `string` | `false` | None | The GitHub Oauth Client ID |\n| CLIENT_SECRET | `string` | `false` | None | The GitHub Oauth Client Secret |\n| OAUTH_TOKEN | `string` | `false` | None | A user oauth token to be used if not provided during an action. |\n| WEBHOOK_SECRET | `string` | `false` | None | Used to check the webhook payload signature. |\n| USER_AGENT | `string` | `false` | None | GitHub requires a the User-Agent header defined. |\n\n``` shell\noms subscribe webhooks \\ \n    -a events='*****' \\ \n    -e APP_ID=$APP_ID \\ \n    -e APP_PRIVATE_KEY=$APP_PRIVATE_KEY \\ \n    -e HOSTNAME=$HOSTNAME \\ \n    -e API_HOSTNAME=$API_HOSTNAME \\ \n    -e CLIENT_ID=$CLIENT_ID \\ \n    -e CLIENT_SECRET=$CLIENT_SECRET \\ \n    -e OAUTH_TOKEN=$OAUTH_TOKEN \\ \n    -e WEBHOOK_SECRET=$WEBHOOK_SECRET \\ \n    -e USER_AGENT=$USER_AGENT\n```\n\n## Contributing\n\nAll suggestions in how to improve the specification and this guide are very welcome. Feel free share your thoughts in the Issue tracker, or even better, fork the repository to implement your own ideas and submit a pull request.\n\n[![Edit github on CodeSandbox](https://codesandbox.io/static/img/play-codesandbox.svg)](https://codesandbox.io/s/github/oms-services/github)\n\nThis project is guided by [Contributor Covenant](https://github.com/oms-services/.github/blob/master/CODE_OF_CONDUCT.md). Please read out full [Contribution Guidelines](https://github.com/oms-services/.github/blob/master/CONTRIBUTING.md).\n\n## Additional Resources\n\n* [Install the CLI](https://github.com/microservices/oms) - The OMS CLI helps developers create, test, validate, and build microservices.\n* [Example OMS Services](https://github.com/oms-services) - Examples of OMS-compliant services written in a variety of languages.\n* [Example Language Implementations](https://github.com/microservices) - Find tooling & language implementations in Node, Python, Scala, Java, Clojure.\n* [Storyscript Hub](https://hub.storyscript.io) - A public registry of OMS services.\n* [Community Chat](https://spectrum.chat/open-microservices) - Have ideas? Questions? Join us on Spectrum.\n",
        "service": {
            "alias": "github",
            "description": ":octocat:GitHub REST API and GraphQL",
            "isCertified": false,
            "name": "github",
            "owner": {
                "username": "oms-services"
            },
            "public": true,
            "topics": [
                "github",
                "microservice",
                "oms",
                "open-microservice"
            ]
        },
        "serviceUuid": "47932e57-cd15-484d-933b-d203b7570c3b",
        "state": "BETA"
    },
    {
        "configuration": {
            "actions": {
                "send": {
                    "arguments": {
                        "from": {
                            "help": "The sender phone number.",
                            "in": "requestBody",
                            "required": true,
                            "type": "string"
                        },
                        "text": {
                            "help": "The message text to be send.",
                            "in": "requestBody",
                            "required": true,
                            "type": "string"
                        },
                        "to": {
                            "help": "The receiver phone number.",
                            "in": "requestBody",
                            "required": true,
                            "type": "string"
                        }
                    },
                    "help": "Send SMS",
                    "http": {
                        "contentType": "application/json",
                        "method": "post",
                        "path": "/send",
                        "port": 3000
                    },
                    "output": {
                        "contentType": "application/json",
                        "properties": {
                            "message-count": {
                                "help": "The number of message count",
                                "type": "string"
                            },
                            "messages": {
                                "help": "The object of send message response with status, message-id, to, remaining-balance, message-price, network.",
                                "type": "list"
                            }
                        },
                        "type": "object"
                    }
                }
            },
            "environment": {
                "API_KEY": {
                    "help": "API key for nexmo",
                    "required": true,
                    "type": "string"
                },
                "API_SECRET": {
                    "help": "API secret for nexmo",
                    "required": true,
                    "type": "string"
                }
            },
            "info": {
                "contact": {
                    "email": "core@openmicroservices.org",
                    "name": "Open Microservices",
                    "url": "https://openmicroservices.org"
                },
                "description": "This is a nexmo service",
                "license": {
                    "name": "MIT",
                    "url": "https://opensource.org/licenses/MIT"
                },
                "title": "nexmo",
                "version": "1.0.0"
            },
            "lifecycle": {
                "startup": {
                    "command": [
                        "microservice-nexmo"
                    ]
                }
            },
            "oms": 1
        },
        "readme": "# _Nexmo_ OMG Microservice\n\n[![Open Microservice Guide](https://img.shields.io/badge/OMG-enabled-brightgreen.svg?style=for-the-badge)](https://microservice.guide)\n[![Build Status](https://travis-ci.com/omg-services/nexmo.svg?branch=master)](https://travis-ci.com/omg-services/nexmo)\n[![codecov](https://codecov.io/gh/omg-services/nexmo/branch/master/graph/badge.svg)](https://codecov.io/gh/omg-services/nexmo)\n\n\nAn OMG service for Nexmo, it allows to send SMS.\n\n## Direct usage in [Storyscript](https://storyscript.io/):\n\n##### Send SMS\n```coffee\n>>> nexmo send from:'senderPhoneNumber' to:'receiverPhoneNumber' message:'messageText'\n{\"message-count\": \"messageCount\",\"messages\": [\"messageDetails\"]}\n```\n\nCurious to [learn more](https://docs.storyscript.io/)?\n\n\u2728\ud83c\udf70\u2728\n\n## Usage with [OMG CLI](https://www.npmjs.com/package/omg)\n\n##### Send SMS\n```shell\n$ omg run send -a from=<SENDER_PHONE_NUMBER> -a to=<RECEIVER_PHONE_NUMBER> -a text=<MESSAGE_TEXT> -e API_KEY=<API_KEY> -e API_SECRET=<API_SECRET>\n```\n\n**Note**: The OMG CLI requires [Docker](https://docs.docker.com/install/) to be installed.\n\n## License\n[MIT License](https://github.com/omg-services/nexmo/blob/master/LICENSE).\n",
        "service": {
            "alias": "nexmo",
            "description": null,
            "isCertified": true,
            "name": "nexmo",
            "owner": {
                "username": "oms-services"
            },
            "public": true,
            "topics": [
                "microservice",
                "nexmo",
                "sms",
                "sms-api",
                "gateway",
                "sms-gateway",
                "open-microservice",
                "oms"
            ]
        },
        "serviceUuid": "dc1bbafb-de43-4a87-a340-3d126907e017",
        "state": "BETA"
    },
    {
        "configuration": {
            "actions": {
                "send": {
                    "arguments": {
                        "from": {
                            "help": "The sender phone number.",
                            "in": "requestBody",
                            "required": true,
                            "type": "string"
                        },
                        "text": {
                            "help": "The message text to be send.",
                            "in": "requestBody",
                            "required": true,
                            "type": "string"
                        },
                        "to": {
                            "help": "The receiver phone number.",
                            "in": "requestBody",
                            "required": true,
                            "type": "string"
                        }
                    },
                    "help": "Send SMS",
                    "http": {
                        "contentType": "application/json",
                        "method": "post",
                        "path": "/send",
                        "port": 3000
                    },
                    "output": {
                        "contentType": "application/json",
                        "properties": {
                            "message-count": {
                                "help": "The number of message count",
                                "type": "string"
                            },
                            "messages": {
                                "help": "The object of send message response with status, message-id, to, remaining-balance, message-price, network.",
                                "type": "list"
                            }
                        },
                        "type": "object"
                    }
                }
            },
            "environment": {
                "API_KEY": {
                    "help": "API key for nexmo",
                    "required": true,
                    "type": "string"
                },
                "API_SECRET": {
                    "help": "API secret for nexmo",
                    "required": true,
                    "type": "string"
                }
            },
            "info": {
                "contact": {
                    "email": "core@openmicroservices.org",
                    "name": "Open Microservices",
                    "url": "https://openmicroservices.org"
                },
                "description": "This is a nexmo service",
                "license": {
                    "name": "MIT",
                    "url": "https://opensource.org/licenses/MIT"
                },
                "title": "nexmo",
                "version": "1.0.0"
            },
            "lifecycle": {
                "startup": {
                    "command": [
                        "microservice-nexmo"
                    ]
                }
            },
            "oms": 1
        },
        "readme": "# _Nexmo_ OMG Microservice\n\n[![Open Microservice Guide](https://img.shields.io/badge/OMG-enabled-brightgreen.svg?style=for-the-badge)](https://microservice.guide)\n[![Build Status](https://travis-ci.com/omg-services/nexmo.svg?branch=master)](https://travis-ci.com/omg-services/nexmo)\n[![codecov](https://codecov.io/gh/omg-services/nexmo/branch/master/graph/badge.svg)](https://codecov.io/gh/omg-services/nexmo)\n\n\nAn OMG service for Nexmo, it allows to send SMS.\n\n## Direct usage in [Storyscript](https://storyscript.io/):\n\n##### Send SMS\n```coffee\n>>> nexmo send from:'senderPhoneNumber' to:'receiverPhoneNumber' message:'messageText'\n{\"message-count\": \"messageCount\",\"messages\": [\"messageDetails\"]}\n```\n\nCurious to [learn more](https://docs.storyscript.io/)?\n\n\u2728\ud83c\udf70\u2728\n\n## Usage with [OMG CLI](https://www.npmjs.com/package/omg)\n\n##### Send SMS\n```shell\n$ omg run send -a from=<SENDER_PHONE_NUMBER> -a to=<RECEIVER_PHONE_NUMBER> -a text=<MESSAGE_TEXT> -e API_KEY=<API_KEY> -e API_SECRET=<API_SECRET>\n```\n\n**Note**: The OMG CLI requires [Docker](https://docs.docker.com/install/) to be installed.\n\n## License\n[MIT License](https://github.com/omg-services/nexmo/blob/master/LICENSE).\n",
        "service": {
            "alias": "nexmo",
            "description": null,
            "isCertified": true,
            "name": "nexmo",
            "owner": {
                "username": "oms-services"
            },
            "public": true,
            "topics": [
                "microservice",
                "nexmo",
                "sms",
                "sms-api",
                "gateway",
                "sms-gateway",
                "open-microservice",
                "oms"
            ]
        },
        "serviceUuid": "dc1bbafb-de43-4a87-a340-3d126907e017",
        "state": "BETA"
    },
    {
        "configuration": {
            "actions": {
                "analyze": {
                    "arguments": {
                        "text": {
                            "help": "The text to analyze.",
                            "in": "requestBody",
                            "required": true,
                            "type": "string"
                        }
                    },
                    "help": "Analyze text with its sentiment and keywords.",
                    "http": {
                        "contentType": "application/json",
                        "method": "post",
                        "path": "/textAnalyze",
                        "port": 3000
                    },
                    "output": {
                        "contentType": "application/json",
                        "properties": {
                            "keywords": {
                                "help": "List of all keywords.",
                                "type": "list"
                            },
                            "sentences": {
                                "help": "List of sentences and its detail analysis report includes type of word, text index etc.",
                                "type": "list"
                            }
                        },
                        "type": "object"
                    }
                }
            },
            "environment": {
                "ADDRESS": {
                    "help": "The address for client to connect eg- \"http://IP-of-docker-machine:8080\" with port.",
                    "required": true,
                    "type": "string"
                }
            },
            "info": {
                "contact": {
                    "email": "core@openmicroservices.org",
                    "name": "Open Microservices",
                    "url": "https://openmicroservices.org"
                },
                "description": "This is a machinebox-textbox service.",
                "license": {
                    "name": "MIT",
                    "url": "https://opensource.org/licenses/MIT"
                },
                "title": "Machinebox Textbox",
                "version": "1.0.0"
            },
            "lifecycle": {
                "startup": {
                    "command": [
                        "machinebox-textbox"
                    ]
                }
            },
            "oms": 1
        },
        "readme": "# _Machinebox Textbox_ Open Microservice\n\n> This is a machinebox-textbox service.\n\n[![Open Microservice Specification Version](https://img.shields.io/badge/Open%20Microservice-1.0-477bf3.svg)](https://openmicroservices.org) [![Open Microservices Spectrum Chat](https://withspectrum.github.io/badge/badge.svg)](https://spectrum.chat/open-microservices) [![Open Microservices Code of Conduct](https://img.shields.io/badge/Contributor%20Covenant-v1.4%20adopted-ff69b4.svg)](https://github.com/oms-services/.github/blob/master/CODE_OF_CONDUCT.md) [![Open Microservices Commitzen](https://img.shields.io/badge/commitizen-friendly-brightgreen.svg)](http://commitizen.github.io/cz-cli/) [![PRs Welcome](https://img.shields.io/badge/PRs-welcome-brightgreen.svg)](http://makeapullrequest.com) \n[![License: MIT](https://img.shields.io/badge/License-MIT-blue.svg)](https://opensource.org/licenses/MIT)\n\n## Introduction\n\nThis project is an example implementation of the [Open Microservice Specification](https://openmicroservices.org), a standard originally created at [Storyscript](https://storyscript.io) for building highly-portable \"microservices\" that expose the events, actions, and APIs inside containerized software.\n\n## Getting Started\n\nThe `oms` command-line interface allows you to interact with Open Microservices. If you're interested in creating an Open Microservice the CLI also helps validate, test, and debug your `oms.yml` implementation!\n\nSee the [oms-cli](https://github.com/microservices/oms) project to learn more!\n\n### Installation\n\n```\nnpm install -g @microservices/oms\n```\n\n## Usage\n\n### Open Microservices CLI Usage\n\nOnce you have the [oms-cli](https://github.com/microservices/oms) installed, you can run any of the following commands from within this project's root directory:\n\n#### Actions\n\n##### analyze\n\n> Analyze text with its sentiment and keywords.\n##### Action Arguments\n\n| Argument Name | Type | Required | Default | Description |\n|:------------- |:---- |:-------- |:--------|:----------- |\n| text | `string` | `true` | None | The text to analyze. |\n| ADDRESS | `string` | `true` | None | The address for client to connect eg- \"http://IP-of-docker-machine:8080\" with port. |\n\n``` shell\noms run analyze \\ \n    -a text='*****' \\ \n    -e ADDRESS=$ADDRESS\n```\n\n## Contributing\n\nAll suggestions in how to improve the specification and this guide are very welcome. Feel free share your thoughts in the Issue tracker, or even better, fork the repository to implement your own ideas and submit a pull request.\n\n[![Edit machinebox-textbox on CodeSandbox](https://codesandbox.io/static/img/play-codesandbox.svg)](https://codesandbox.io/s/github/oms-services/machinebox-textbox)\n\nThis project is guided by [Contributor Covenant](https://github.com/oms-services/.github/blob/master/CODE_OF_CONDUCT.md). Please read out full [Contribution Guidelines](https://github.com/oms-services/.github/blob/master/CONTRIBUTING.md).\n\n## Additional Resources\n\n* [Install the CLI](https://github.com/microservices/oms) - The OMS CLI helps developers create, test, validate, and build microservices.\n* [Example OMS Services](https://github.com/oms-services) - Examples of OMS-compliant services written in a variety of languages.\n* [Example Language Implementations](https://github.com/microservices) - Find tooling & language implementations in Node, Python, Scala, Java, Clojure.\n* [Storyscript Hub](https://hub.storyscript.io) - A public registry of OMS services.\n* [Community Chat](https://spectrum.chat/open-microservices) - Have ideas? Questions? Join us on Spectrum.\n",
        "service": {
            "alias": null,
            "description": "",
            "isCertified": false,
            "name": "machinebox-textbox",
            "owner": {
                "username": "rohit121"
            },
            "public": true,
            "topics": [
                "machinelearning",
                "textprocessing",
                "nlp",
                "ai"
            ]
        },
        "serviceUuid": "15fb45fa-7f0a-4ef2-a7b3-ce800672a295",
        "state": "BETA"
    }
]