# Python CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-python/ for more details
#
version: 2
jobs:
  build:
    docker:
      # specify the version you desire here
      # use `-browsers` prefix for selenium tests, e.g. `3.6.1-browsers`
      - image: circleci/python:3.7

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/postgres:9.4

    working_directory: ~/repo

    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "setup.py" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-

      - run:
          name: install dependencies
          command: |
            python3 -m venv venv
            . venv/bin/activate
            python3 setup.py install
            pip3 install tox

      - save_cache:
          paths:
            - ./venv
          key: v1-dependencies-{{ checksum "setup.py" }}

      - run:
          name: run stylecheck
          command: |
              . venv/bin/activate
              tox -e stylecheck

      - run:
          name: run pep8 checks
          command: |
              . venv/bin/activate
              tox -e pep8

      # run tests!
      # this example uses Django's built-in test-runner
      # other common Python testing frameworks include pytest and nose
      # https://pytest.org
      # https://nose.readthedocs.io
      - run:
          name: run tests
          command: |
            . venv/bin/activate
            tox -e py36

      - run:
          name: collect coverage
          command: |
            bash <(curl -s https://codecov.io/bash)

      - store_artifacts:
          path: test-reports
          destination: test-reports

  release_pypi:
    docker:
      - image: circleci/python:3.7
    steps:
      - checkout
      - run:
            name: init .pypirc
            command: |
              echo -e "[pypi]" >> ~/.pypirc
              echo -e "username = ${PYPI_USER}" >> ~/.pypirc
              echo -e "password = ${PYPI_PASSWORD}" >> ~/.pypirc
      - run:
          name: upload to PyPI
          command: |
            python -m venv venv
            . venv/bin/activate
            pip install twine wheel
            python setup.py upload

workflows:
  version: 2
  build-test-deploy:
    jobs:
      - build:
          filters:
            tags:
              only: /.*/
      - release_pypi:
          requires:
            - build
          filters:
            tags:
              only: /^[0-9]+\.[0-9]+\.[0-9]+$/
            branches:
              ignore: /.*/
